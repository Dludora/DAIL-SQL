System:
Please return only the SQL query that starts with "SELECT".

System:
/* Some SQL examples are provided based on similar problems: */
/* Answer the following: How many aircrafts do we have? */
SELECT count(*) FROM Aircraft

/* Answer the following: How many employees do we have? */
SELECT count(*) FROM Employee

/* Answer the following: How many flights do we have? */
SELECT count(*) FROM Flight

/* Answer the following: How many accounts do we have? */
SELECT count(*) FROM Accounts

/* Answer the following: How many customers do we have? */
SELECT count(*) FROM Customers

/* Answer the following: How many tracks do we have? */
SELECT count(*) FROM track

/* Answer the following: How many transactions do we have? */
SELECT count(*) FROM Financial_transactions

/* Answer the following: How many invoices do we have? */
SELECT count(*) FROM Invoices

/* Answer the following: How many artists do we have? */
SELECT count(*) FROM artist

/* Given the following database schema: */
CREATE TABLE "stadium" (
"Stadium_ID" int,
"Location" text,
"Name" text,
"Capacity" int,
"Highest" int,
"Lowest" int,
"Average" int,
PRIMARY KEY ("Stadium_ID")
)

CREATE TABLE "singer" (
"Singer_ID" int,
"Name" text,
"Country" text,
"Song_Name" text,
"Song_release_year" text,
"Age" int,
"Is_male" bool,
PRIMARY KEY ("Singer_ID")
)

CREATE TABLE "concert" (
"concert_ID" int,
"concert_Name" text,
"Theme" text,
"Stadium_ID" text,
"Year" text,
PRIMARY KEY ("concert_ID"),
FOREIGN KEY ("Stadium_ID") REFERENCES "stadium"("Stadium_ID")
)

CREATE TABLE "singer_in_concert" (
"concert_ID" int,
"Singer_ID" text,
PRIMARY KEY ("concert_ID","Singer_ID"),
FOREIGN KEY ("concert_ID") REFERENCES "concert"("concert_ID"),
FOREIGN KEY ("Singer_ID") REFERENCES "singer"("Singer_ID")
)



Question:
/* Answer the following: How many singers do we have? */
SELECT 

Answer:
SELECT COUNT(*) FROM singerSystem:
Please return only the SQL query that starts with "SELECT".

System:
/* Some SQL examples are provided based on similar problems: */
/* Answer the following: What is the total number of students? */
SELECT count(*) FROM Student

/* Answer the following: What is the total number of companies? */
SELECT count(*) FROM company

/* Answer the following: What is the total number of campuses? */
SELECT count(*) FROM campuses

/* Answer the following: What is the total number of games played? */
SELECT sum(gamesplayed) FROM Sportsinfo

/* Answer the following: What is the total count of enzymes? */
SELECT count(*) FROM enzyme

/* Answer the following: What is the number of employees? */
SELECT count(*) FROM Employee

/* Answer the following: What is the number of flights? */
SELECT count(*) FROM Flight

/* Answer the following: What is the number of technicians? */
SELECT count(*) FROM technician

/* Answer the following: What is the number of ships? */
SELECT count(*) FROM ship

/* Given the following database schema: */
CREATE TABLE "stadium" (
"Stadium_ID" int,
"Location" text,
"Name" text,
"Capacity" int,
"Highest" int,
"Lowest" int,
"Average" int,
PRIMARY KEY ("Stadium_ID")
)

CREATE TABLE "singer" (
"Singer_ID" int,
"Name" text,
"Country" text,
"Song_Name" text,
"Song_release_year" text,
"Age" int,
"Is_male" bool,
PRIMARY KEY ("Singer_ID")
)

CREATE TABLE "concert" (
"concert_ID" int,
"concert_Name" text,
"Theme" text,
"Stadium_ID" text,
"Year" text,
PRIMARY KEY ("concert_ID"),
FOREIGN KEY ("Stadium_ID") REFERENCES "stadium"("Stadium_ID")
)

CREATE TABLE "singer_in_concert" (
"concert_ID" int,
"Singer_ID" text,
PRIMARY KEY ("concert_ID","Singer_ID"),
FOREIGN KEY ("concert_ID") REFERENCES "concert"("concert_ID"),
FOREIGN KEY ("Singer_ID") REFERENCES "singer"("Singer_ID")
)



Question:
/* Answer the following: What is the total number of singers? */
SELECT 

Answer:
count(*) FROM singerSystem:
Please return only the SQL query that starts with "SELECT".

System:
/* Some SQL examples are provided based on similar problems: */
/* Answer the following: Show the working years of managers in descending order of their level. */
SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC

/* Answer the following: Find the name of the students and their department names sorted by their total credits in ascending order. */
SELECT name,  dept_name FROM student ORDER BY tot_cred

/* Answer the following: Show the names of members in ascending order of their rank in rounds. */
SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC

/* Answer the following: Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order. */
SELECT name,  headquarter,  revenue FROM manufacturers ORDER BY revenue DESC

/* Answer the following: For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host. */
SELECT T3.Location,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age

/* Answer the following: List all the cities in a decreasing order of each city's stations' highest latitude. */
SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC

/* Answer the following: Show names of actors in descending order of the year their musical is awarded. */
SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC

/* Answer the following: Show the name and service for all trains in order by time. */
SELECT name,  service FROM train ORDER BY TIME

/* Answer the following: Show all movie titles, years, and directors, ordered by budget. */
SELECT title,  YEAR,  director FROM movie ORDER BY budget_million

/* Given the following database schema: */
CREATE TABLE "stadium" (
"Stadium_ID" int,
"Location" text,
"Name" text,
"Capacity" int,
"Highest" int,
"Lowest" int,
"Average" int,
PRIMARY KEY ("Stadium_ID")
)

CREATE TABLE "singer" (
"Singer_ID" int,
"Name" text,
"Country" text,
"Song_Name" text,
"Song_release_year" text,
"Age" int,
"Is_male" bool,
PRIMARY KEY ("Singer_ID")
)

CREATE TABLE "concert" (
"concert_ID" int,
"concert_Name" text,
"Theme" text,
"Stadium_ID" text,
"Year" text,
PRIMARY KEY ("concert_ID"),
FOREIGN KEY ("Stadium_ID") REFERENCES "stadium"("Stadium_ID")
)

CREATE TABLE "singer_in_concert" (
"concert_ID" int,
"Singer_ID" text,
PRIMARY KEY ("concert_ID","Singer_ID"),
FOREIGN KEY ("concert_ID") REFERENCES "concert"("concert_ID"),
FOREIGN KEY ("Singer_ID") REFERENCES "singer"("Singer_ID")
)



Question:
/* Answer the following: Show name, country, age for all singers ordered by age from the oldest to the youngest. */
SELECT 

Answer:
SELECT Name,  Country,  Age FROM singer ORDER BY AgeSystem:
Please return only the SQL query that starts with "SELECT".

System:
/* Some SQL examples are provided based on similar problems: */
/* Answer the following: What are the years, titles, and publishers for all books, ordered by year descending? */
SELECT YEAR,  book_title,  publisher FROM book_club ORDER BY YEAR DESC

/* Answer the following: What are the card numbers, names, and hometowns of every member ordered by descending level? */
SELECT card_number,  name,  hometown FROM member ORDER BY LEVEL DESC

/* Answer the following: What are the total points for all gymnasts, ordered by total points descending? */
SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC

/* Answer the following: What are the themes and years for exhibitions, sorted by ticket price descending? */
SELECT theme,  YEAR FROM exhibition ORDER BY ticket_price DESC

/* Answer the following: What are the names of enzymes in descending order? */
SELECT name FROM enzyme ORDER BY name DESC

/* Answer the following: What are the lifespans of representatives in descending order of vote percent? */
SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC

/* Answer the following: What are the weights of entrepreneurs in descending order of money requested? */
SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC

/* Answer the following: What are the characters of actors in descending order of age? */
SELECT Character FROM actor ORDER BY age DESC

/* Answer the following: What are the names of representatives in descending order of votes? */
SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC

/* Given the following database schema: */
CREATE TABLE "stadium" (
"Stadium_ID" int,
"Location" text,
"Name" text,
"Capacity" int,
"Highest" int,
"Lowest" int,
"Average" int,
PRIMARY KEY ("Stadium_ID")
)

CREATE TABLE "singer" (
"Singer_ID" int,
"Name" text,
"Country" text,
"Song_Name" text,
"Song_release_year" text,
"Age" int,
"Is_male" bool,
PRIMARY KEY ("Singer_ID")
)

CREATE TABLE "concert" (
"concert_ID" int,
"concert_Name" text,
"Theme" text,
"Stadium_ID" text,
"Year" text,
PRIMARY KEY ("concert_ID"),
FOREIGN KEY ("Stadium_ID") REFERENCES "stadium"("Stadium_ID")
)

CREATE TABLE "singer_in_concert" (
"concert_ID" int,
"Singer_ID" text,
PRIMARY KEY ("concert_ID","Singer_ID"),
FOREIGN KEY ("concert_ID") REFERENCES "concert"("concert_ID"),
FOREIGN KEY ("Singer_ID") REFERENCES "singer"("Singer_ID")
)



Question:
/* Answer the following: What are the names, countries, and ages for every singer in descending order of age? */
SELECT 

Answer:
SELECT Name, Country, Age FROM singer ORDER BY Age DESC