SELECT count(*) FROM club
SELECT count(*) FROM club
SELECT Name FROM club ORDER BY Name ASC
SELECT Name FROM club ORDER BY Name ASC
SELECT Manager, Captain FROM club
SELECT T1.Manager, T1.Captain, T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Manager = T2.Player_ID
SELECT Name FROM club WHERE Manufacturer!= "Nike"
SELECT Name FROM CLUB EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId
SELECT Name FROM People ORDER BY Weight ASC
SELECT Name FROM player ORDER BY Wins_count ASC
SELECT t1.Name FROM club AS t1 JOIN player AS t2 ON t1.Club_ID = t2.Club_ID ORDER BY t2.Earnings DESC LIMIT 1
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000
SELECT T1.Country FROM Players AS T1 WHERE T1.Earnings > 1200000
SELECT T1.Country FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Wins_count > 2 ORDER BY T1.Earnings DESC LIMIT 1
SELECT T1.Name, T1.Country, T1.Wins_count FROM player AS T1 WHERE T1.Wins_count > 2 ORDER BY T1.Earnings DESC LIMIT 1
SELECT T1.Name, T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID
SELECT T1.Name, T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Wins_count > 2
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T2.Club_ID HAVING COUNT(*) >= 2
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Manager = "Sam Allardyce"
SELECT T1.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Manager = 'Sam Allardyce'
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Name ORDER BY AVG(T2.Earnings) DESC
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Name ORDER BY AVG(Earnings) DESC
SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer
SELECT manufacturer, COUNT(*) FROM club GROUP BY manufacturer
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING count(*) > 1
SELECT Country, COUNT(*) FROM player GROUP BY Country HAVING COUNT(*) >= 2
SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections) /* Answer the following: What are the names of documents that do not have any images? */ SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id /* Answer the following: What are the names of counties that do not contain any cities? */ SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city) /* Answer the following: What are the names of parties that have no members? */ SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member) /* Answer the following: What are the names of all the dorms that don't have any amenities? */ SELECT dorm_name FROM dorm WHERE dorm
SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings < 1100000
SELECT T1.Country FROM country AS T1 JOIN player AS T2 ON T1.Country_id = T2.Country WHERE T2.Earnings > 1400000 INTERSECT SELECT T1.Country FROM country AS T1 JOIN player AS T2 ON T1.Country_id = T2.Country WHERE T2.Earnings < 1100000
SELECT COUNT (DISTINCT Country) FROM player
SELECT COUNT(DISTINCT "Country") FROM "player"
SELECT Earnings FROM player WHERE Country = "Australia" OR Country = "Zimbabwe"
SELECT sum(Earnings) FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'
SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2 INTERSECT SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 3
SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.order_item_id) >= 3 AND COUNT (DISTINCT T2.order_id) > 2
SELECT T1.order_id, T1.order_status_code, count(*) FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id
SELECT T1.order_id, T1.order_status_code, count(*) FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id
SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING COUNT(*) > 1 OR T1.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)
SELECT MIN(date_order_placed) AS earliest_order, date_order_placed AS order_with_more_than_1_item FROM Orders GROUP BY date_order_placed HAVING COUNT(order_id) > 1
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)
SELECT customer_first_name, customer_last_name, customer_middle_initial FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)
SELECT /* Answer the following: What are the names of the customers who have not placed any orders? */ SELECT /* Answer the following: What are the names of the customers who have placed at least one order? */ SELECT /* Answer the following: What are the names of the customers who have placed more than one order? */ SELECT /* Answer the following: What are the names of the customers who have placed more than one order? */ SELECT /* Answer the following: What are the names of the customers who have placed more than one order? */ SELECT /* Answer the following: What are the names of the customers who have placed more than one order? */ SELECT /* Answer the following: What are the names of the customers who have placed more than one order? */ SELECT /* Answer the following: What are the names of the customers who have placed more than one order? */ SELECT /* Answer the following: What are the names of the customers who have placed more than one order? */ SELECT /* Answer the following: What are the names of the customers who have placed more than one order? */ SELECT /* Answer the following
SELECT T1.product_id, T1.product_name, T1.product_price, T1.product_color FROM Products AS T1 WHERE T1.product_id IN ( SELECT T2.product_id FROM Order_Items AS T2 GROUP BY T2.product_id HAVING count(*) < 2 )
SELECT T1.order_id, T1.date_order_placed FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING COUNT(*) >= 2
SELECT T1.order_id, T1.date_order_placed FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING count(*) >= 2
SELECT t2.product_id, t2.product_name, t2.product_price FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.product_id, T1.product_name, T1.product_price FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.order_id, sum(T2.product_price) FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY sum(T2.product_price) LIMIT 1
SELECT order_id, sum(product_price) as total_price FROM Order_Items GROUP BY order_id ORDER BY total_price ASC LIMIT 1
SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1 /* Answer the following: What is the most popular full name of the actors? */ SELECT first_name, last_name FROM actor GROUP BY first_name, last_name ORDER BY count(*) DESC LIMIT 1 /* Answer the following: What is the most used instrument? */ SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1 /* Answer the following: Find the name of the most popular party form. */ SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1 /* Answer the following: What is the product ID of the most frequently ordered item on invoices? */ SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the description of the most popular role among users that have logged in?
SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1
SELECT gender_code, COUNT(*) FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY gender_code
SELECT gender_code, COUNT(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id JOIN Products AS T4 ON T3.product_id = T4.product_id GROUP BY gender_code
SELECT gender_code, COUNT(*) FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code
SELECT gender_code, COUNT(*) FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code
SELECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name, T2.payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id
SELECT C.customer_first_name, C.customer_middle_initial, C.customer_last_name, P.payment_method_code FROM Customers C JOIN Customer_Payment_Methods P ON C.customer_id = P.customer_id
SELECT T1.invoice_number, T1.invoice_status_code, T1.invoice_date, T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number
SELECT T1.invoice_status_code, T1.invoice_date, T1.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number
SELECT T3.product_name, T2.shipment_date FROM Shipment_Items AS T1 JOIN Shipments AS T2 ON T1.shipment_id = T2.shipment_id JOIN Products AS T3 ON T1.product_id = T3.product_id
SELECT T1.product_name, T2.shipment_date FROM Products AS T1 JOIN Shipment_Items AS T2 ON T1.product_id = T2.product_id JOIN Shipments AS T3 ON T2.shipment_id = T3.shipment_id
SELECT shipment_tracking_number, order_item_status_code FROM Shipments JOIN Order_Items ON Shipments.order_id = Order_Items.order_id JOIN Order_Item_Status_Codes ON Order_Items.order_item_status_code = Order_Item_Status_Codes.order_item_status_code WHERE shipment_date IS NOT NULL
SELECT shipment_tracking_number, shipment_status_code FROM shipments JOIN orders ON orders.order_id = shipments.order_id JOIN order_items ON order_items.order_id = orders.order_id WHERE order_items.order_item_status_code = 'Ordered' AND shipments.shipment_status_code = 'Shipped'
SELECT T1.product_name, T1.product_color FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id = T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id = T4.shipment_id
SELECT T1.product_name, T1.product_color FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id = T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id = T4.shipment_id
SELECT DISTINCT T1.product_name, T1.product_price, T1.product_description FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T2.order_id = T3.order_id JOIN Customers AS T4 ON T3.customer_id = T4.customer_id WHERE T4.gender_code = 'F'
SELECT t1.product_name, t1.product_price, t1.product_description FROM products AS t1 JOIN customer_orders AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t3.gender_code = "F"
SELECT invoice_status_code FROM Invoices WHERE invoice_number IN ( SELECT invoice_number FROM Shipments )
SELECT T1.invoice_status_code FROM Invoices AS T1 JOIN Orders AS T2 ON T1.invoice_number = T2.invoice_number WHERE T2.order_status_code = "Not Shipped"
SELECT `order_id`, `date_order_placed`, sum(`product_price`) as `total_cost` FROM `Order_Items` INNER JOIN `Products` ON `Order_Items`.`product_id` = `Products`.`product_id` GROUP BY `order_id`
SELECT T1.order_id, T1.date_order_placed, SUM(T2.product_price) FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id
SELECT count(DISTINCT customer_id) FROM Orders
SELECT COUNT(DISTINCT customer_id) FROM Orders
SELECT count(DISTINCT order_item_status_code) FROM Order_Items
SELECT count(DISTINCT order_item_status_code) FROM Order_Items
SELECT count(DISTINCT payment_method_code) FROM Customer_Payment_Methods
SELECT count(DISTINCT payment_method_code) FROM Customer_Payment_Methods
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE "+12%"
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE "+12%"
SELECT product_size FROM Products WHERE product_name LIKE "%Dell%"
SELECT product_size FROM Products WHERE product_name LIKE "%Dell%"
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)
SELECT count(DISTINCT product_name) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)
SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )
SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)
SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)
SELECT order_status_code, date_order_placed FROM Orders
SELECT order_id, order_status_code, date_order_placed FROM Orders
SELECT T1.address_line_1, T1.town_city, T1.county FROM Customers AS T1 WHERE T1.country = "USA"
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA'
SELECT T1.customer_first_name, T3.product_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.account_id = T3.account_id
SELECT T1.customer_first_name, T2.product_name FROM Customers AS T1 JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id
SELECT count(*) FROM Shipment_Items
SELECT count(*) FROM Shipment_Items
SELECT avg(product_price) FROM Products
SELECT avg(product_price) FROM Products
SELECT AVG(product_price) FROM Products
SELECT avg(product_price) FROM Products
SELECT T1.email_address, T1.town_city, T1.county FROM Customers AS T1 WHERE T1.gender_code = ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1 )
SELECT t1.email_address, t1.town_city, t1.county FROM Customers AS t1 JOIN (SELECT gender_code, COUNT(*) AS cnt FROM Customers GROUP BY gender_code ORDER BY cnt LIMIT 1) AS t2 ON t1.gender_code = t2.gender_code
SELECT T1.date_order_placed FROM Orders AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.order_id HAVING COUNT(*) >= 2
SELECT T1.date_order_placed FROM Orders AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.order_id HAVING COUNT(*) >= 2
SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) ASC LIMIT 1
SELECT T1.product_id, T1.product_description FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id HAVING count(*) > 3
SELECT T1.product_id, T1.product_description FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id HAVING count(*) > 3
SELECT T1.invoice_number, T1.invoice_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number HAVING count(*) >= 2
SELECT T1.invoice_number, T1.invoice_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number HAVING count(*) >= 2
SELECT shipment_tracking_number, shipment_date FROM Shipments
SELECT shipment_tracking_number, shipment_date FROM Shipments
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products)
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products)
SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director)
SELECT Name FROM director ORDER BY Age DESC LIMIT 1
SELECT count(*) FROM channel WHERE Internet LIKE "%bbc%"
SELECT Answer: /* Answer the following: How many different programs are there? */ SELECT Answer: /* Answer the following: How many different channels are there? */ SELECT Answer: /* Answer the following: How many different directors are there? */ SELECT Answer: /* Answer the following: How many different programs are there? */ SELECT Answer: /* Answer the following: How many different channels are there? */ SELECT Answer: /* Answer the following: How many different directors are there? */ SELECT Answer: /* Answer the following: How many different programs are there? */ SELECT Answer: /* Answer the following: How many different channels are there? */ SELECT Answer: /* Answer the following: How many different directors are there? */ SELECT Answer: /* Answer the following: How many different programs are there? */ SELECT Answer: /* Answer the following: How many different channels are there? */ SELECT Answer: /* Answer the following: How many different directors are there
SELECT Title FROM program ORDER BY Start_Year DESC
SELECT T1.Name FROM director AS T1 JOIN director_admin AS T2 ON T1.Director_ID = T2.Director_ID GROUP BY T1.Director_ID ORDER BY count(*) DESC LIMIT 1
SELECT T1.Name, T1.Age FROM director AS T1 JOIN director_admin AS T2 ON T1.Director_ID = T2.Director_ID JOIN program AS T3 ON T2.Channel_ID = T3.Channel_ID GROUP BY T1.Director_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1
SELECT T1.Name, T1.Website_link FROM Channel AS T1 JOIN Program AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T1.Channel_ID HAVING COUNT(*) > 1
SELECT T1.Name, count(*) FROM channel AS T1 JOIN program AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T1.Name
SELECT count(*) FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program)
SELECT T3.Name FROM program AS T1 JOIN director_admin AS T2 ON T1.Program_ID = T2.Program_ID JOIN director AS T3 ON T2.Director_ID = T3.Director_ID WHERE T1.Title = "Dracula"
SELECT T1.Name, T1.Internet FROM channel AS T1 JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T2.Channel_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT Name FROM director WHERE Age BETWEEN 30 AND 60
SELECT T1.Name FROM channel AS T1 JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID JOIN director AS T3 ON T2.Director_ID = T3.Director_ID WHERE T3.Age < 40 INTERSECT SELECT T1.Name FROM channel AS T1 JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID JOIN director AS T3 ON T2.Director_ID = T3.Director_ID WHERE T3.Age > 60
SELECT T1.Channel_ID, T1.Name FROM channel AS T1 WHERE NOT T1.Channel_ID IN (SELECT T2.Channel_ID FROM director_admin AS T2 JOIN director AS T3 ON T2.Director_ID = T3.Director_ID WHERE T3.Name = 'Hank Baskett')
SELECT count(*) FROM radio
SELECT T1.Transmitter FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID ORDER BY T1.ERP_kW ASC
SELECT tv_show_name, Original_Airdate FROM tv_show
SELECT Station_name FROM city_channel WHERE Affiliation!= "ABC"
SELECT City, Station_name FROM city_channel WHERE NOT Affiliation = "NPR" AND NOT Affiliation = "ABC" AND Is_online = 1
SELECT T1.City, T1.Station_name FROM city_channel AS T1 JOIN city_channel_radio AS T2 ON T1.ID = T2.City_channel_ID JOIN radio AS T3 ON T2.Radio_ID = T3.Radio_ID ORDER BY T3.ERP_kW DESC LIMIT 1
SELECT avg(ERP_kW) FROM radio
SELECT Affiliation, COUNT(*) FROM city_channel GROUP BY Affiliation
SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 3
SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC
SELECT T1.Transmitter, T2.City FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID
SELECT T1.Transmitter, T2.Station_name FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID ORDER BY T1.ERP_kW DESC
SELECT Answer: /* Answer the following: Show the names of the city channels and the number of TV shows they are associated with. */ SELECT Answer: /* Answer the following: Show the names of the city channels and the number of TV shows they are associated with, but only for those city channels that are online. */ SELECT Answer: /* Answer the following: Show the names of the city channels and the number of TV shows they are associated with, but only for those city channels that are online and free. */ SELECT Answer: /* Answer the following: Show the names of the city channels and the number of TV shows they are associated with, but only for those city channels that are online and free, and that have an affiliation with the "American" TV show. */ SELECT
SELECT DISTINCT T1.Transmitter FROM radio AS T1 LEFT JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID WHERE T2.Radio_ID IS NULL
SELECT T1.Model FROM vehicle AS T1 WHERE T1.Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle) AND T1.Power > 6000
SELECT T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.Power > 6000 ORDER BY T1.Top_Speed DESC LIMIT 1
SELECT T2.Name FROM Driver AS T1 JOIN vehicle_driver AS T3 ON T1.Driver_ID = T3.Driver_ID JOIN Vehicle AS T2 ON T3.Vehicle_ID = T2.Vehicle_ID WHERE T1.Citizenship = "United States"
SELECT T1.Name FROM driver AS T1 WHERE T1.Citizenship = "United States"
SELECT COUNT(*), T1.Driver_ID FROM vehicle_driver AS T1 GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Driver_ID, count(*) FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY count(*) DESC LIMIT 1
SELECT max(T1.Power), avg(T1.Power) FROM vehicle AS T1 WHERE T1.Builder = "Zhuzhou"
SELECT max(Power), avg(Power) FROM vehicle WHERE Builder = "Zhuzhou"
SELECT T1.Vehicle_ID FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T2.Vehicle_ID ORDER BY count(*) ASC LIMIT 1
SELECT T1.Vehicle_ID FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Vehicle_ID ORDER BY count(*) ASC LIMIT 1
SELECT max(Top_Speed), max(Power) FROM vehicle WHERE Build_Year = 1996
SELECT T1.Top_Speed, T1.Power FROM vehicle AS T1 WHERE T1.Build_Year = 1996
SELECT Build_Year, Model, Builder FROM vehicle
SELECT Build_Year, Model, Builder FROM vehicle
SELECT count(DISTINCT Driver_ID) FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Build_Year = 2012)
SELECT count(DISTINCT Driver_ID) FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Build_Year = 2012
SELECT count(*) FROM driver WHERE Racing_Series = "NASCAR"
SELECT count(*) FROM driver WHERE Racing_Series = "NASCAR"
SELECT avg(Top_Speed) FROM vehicle
SELECT avg(Top_Speed) FROM vehicle
SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Power > 5000
SELECT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Power > 5000
SELECT T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T1.Total_Production > 100 OR T1.Top_Speed > 150
SELECT T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T1.Total_Production > 100 OR T1.Top_Speed > 150
SELECT T1.Model, T1.Build_Year FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T1.Model LIKE '%DJ%'
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN ( SELECT Vehicle_ID FROM vehicle_driver )
SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Vehicle_ID HAVING count(*) >= 2 UNION SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 WHERE T1.Builder = 'Ziyang'
SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Vehicle_ID HAVING count(*) = 2 UNION SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 WHERE T1.Builder = 'Ziyang'
SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Vehicle_ID HAVING count(*) > 2 UNION SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T3.Name = 'Jeff Gordon'
SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Vehicle_ID HAVING COUNT(*) > 2 UNION SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = "Jeff Gordon")
SELECT Answer: /* Answer the following: List the driver's name and the number of vehicles they drove. */ SELECT Answer: /* Answer the following: What is the maximum top speed of the vehicles driven by the driver who drove the most vehicles? */ SELECT
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle)
SELECT Name FROM driver ORDER BY Name
SELECT Name FROM driver ORDER BY Name
SELECT T1.Racing_Series, count(*) FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID GROUP BY T1.Racing_Series
SELECT count(*), Racing_Series FROM driver WHERE Racing_Series!= " " GROUP BY Racing_Series
SELECT T1.Name, T1.Citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Model = 'DJ1'
SELECT T1.Name, T1.Citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Model = "DJ1"
SELECT count(*) FROM driver WHERE driver.Driver_ID NOT IN (SELECT driver.Driver_ID FROM vehicle_driver)
SELECT count(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)
SELECT count(*) FROM Exams
SELECT count(*) FROM Exams
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code
SELECT T1.Exam_Name, T1.Exam_Date FROM Exams AS T1 WHERE T1.Subject_Code!= "Database"
SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code <> 'Database'
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
SELECT /* Answer the following: What are the names of the students who have taken the exam with the highest score? */ SELECT
SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = "Normal"
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = "Normal"
SELECT count(DISTINCT Comments) FROM Student_Answers
SELECT count(DISTINCT Comments) FROM Student_Answers
SELECT Student_Answer_Text, COUNT(*) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC
SELECT Student_Answer_Text, COUNT(*) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC
SELECT T1.First_Name, T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID
SELECT T1.Student_Answer_ID, T2.First_Name, T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID = T2.Student_ID
SELECT T1.Email_Adress, T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY T2.Date_of_Answer DESC
SELECT /* Answer the following: Find the name of the student and the name of the exam, and sort the results in descending alphabetical order. */ SELECT /* Answer the following: Find the name of the student and the name of the exam, and sort the results in descending alphabetical order. */ SELECT /* Answer the following: Find the name of the student and the name of the exam, and sort the results in descending alphabetical order. */ SELECT /* Answer the following: Find the name of the student and the name of the exam, and sort the results in descending alphabetical order. */ SELECT /* Answer the following: Find the name of the student and the name of the exam, and sort the results in descending alphabetical order. */ SELECT /* Answer the following: Find the name of the student and the name of the exam, and sort the results in descending alphabetical order. */ SELECT /* Answer the following: Find the name of the student and the name of the exam, and sort the results in descending alphabetical order. */ SELECT /* Answer the following: Find the name of the student and the name of the exam, and sort the results
SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1
SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1
SELECT T1.First_Name FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID GROUP BY T2.Student_ID HAVING COUNT(*) >= 2
SELECT T1.First_Name FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID GROUP BY T1.Student_ID HAVING count(*) >= 2
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Valid_Answer_Text FROM Valid_Answers AS T1 JOIN Student_Assessments AS T2 ON T1.Valid_Answer_ID = T2.Valid_Answer_ID GROUP BY T1.Valid_Answer_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT Last_Name FROM Students WHERE Gender_MFU <> 'M'
SELECT Last_Name FROM Students WHERE Gender_MFU <> 'M'
SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU
SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU
SELECT Last_Name FROM Students WHERE Gender_MFU = "F" OR Gender_MFU = "M"
SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M'
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
SELECT T1.First_Name, T1.Middle_Name, T1.Last_Name FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID WHERE T2.Comments = "Normal" INTERSECT SELECT T1.First_Name, T1.Middle_Name, T1.Last_Name FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID WHERE T2.Comments = "Absent"
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent'
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3
SELECT * FROM Students
SELECT * FROM Students
SELECT count(*) FROM Addresses
SELECT count(*) FROM Addresses
SELECT address_id, address_details FROM Addresses
SELECT product_id, product_type_code, product_name, product_price FROM Products /* Answer the following: What are all the customer ids, customer numbers, customer names, and payment method codes? */ SELECT customer_id, customer_number, customer_name, payment_method_code FROM Customers /* Answer the following: What are all the order ids, order dates, and order status codes? */ SELECT order_id, order_date, order_status_code FROM Customer_Orders /* Answer the following: What are all the order item ids, order ids, product ids, and order quantities? */ SELECT order_item_id, order_id, product_id, order_quantity FROM Order_Items
SELECT count(*) FROM Products
SELECT /* Answer the following: Count the number of customers. */ SELECT /* Answer the following: Count the number of orders. */ SELECT /* Answer the following: Count the number of order items. */ SELECT
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_price FROM Products WHERE product_name = "Monitor"
SELECT product_price FROM Products WHERE product_name = 'Monitor'
SELECT min(product_price), max(product_price), avg(product_price) FROM products
SELECT min(product_price), avg(product_price), max(product_price) FROM Products
SELECT avg(Product_Price) FROM Products /* Answer the following: What is the average price for each type of product? */ SELECT product_type_code, avg(product_price) FROM products GROUP BY product_type_code /* Answer the following: What are the names and average prices of products for manufacturers whose products cost on average 150 or more? */ SELECT avg(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150 /* Answer the following: How many rooms cost more than 120, for each different decor? */ SELECT decor, count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor
SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes'
SELECT count(*) FROM Products WHERE product_type_code = "Hardware"
SELECT count(*) FROM Products WHERE product_type_code = "Hardware"
SELECT roomName FROM Rooms WHERE basePrice > ( SELECT avg(basePrice) FROM Rooms )
SELECT product_name FROM Products WHERE product_price > ( SELECT avg(product_price) FROM Products )
SELECT product_name FROM Products WHERE product_type_code = "Hardware" AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = "Hardware")
SELECT product_name FROM Products WHERE product_type_code = "Hardware" AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = "Hardware")
SELECT product_name FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1
SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1 /* Answer the following: List the name of the phone model launched in year 2002 and with the highest RAM size. */ SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price LIMIT 1
SELECT name, price FROM Products ORDER BY price ASC LIMIT 1
SELECT Product_Name FROM Products ORDER BY Product_Price DESC
SELECT product_name FROM Products ORDER BY product_price DESC
SELECT product_name, product_price FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC
SELECT product_name FROM Products WHERE product_type_code = "Hardware" ORDER BY product_price
SELECT product_type_code, count(*) FROM Products GROUP BY product_type_code
SELECT product_type_code, count(*) FROM Products GROUP BY product_type_code
SELECT product_type_code, avg(product_price) FROM Products GROUP BY product_type_code
SELECT product_type_code, avg(product_price) FROM products GROUP BY product_type_code
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*) >= 2
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT count(*) FROM Customers
SELECT count(*) FROM Customers
SELECT customer_id, customer_name FROM Customers
SELECT customer_id, customer_name FROM Customers
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = "Jeromy"
SELECT T1.customer_address, T1.customer_phone, T1.customer_email FROM Customers AS T1 WHERE T1.customer_name = "Jeromy"
SELECT payment_method_code, count(*) FROM Customers GROUP BY payment_method_code
SELECT payment_method_code, count(*) FROM customers GROUP BY payment_method_code /* Answer the following: How many accounts are there for each customer id? */ SELECT customer_id, count(*) FROM Accounts GROUP BY customer_id /* Answer the following: How many medications are prescribed for each brand? */ SELECT count(*), T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand /* Answer the following: What is the number of professors for different school? */ SELECT count(*), T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code /* Answer the following: How many students play each sport? */ SELECT sportname, count(*) FROM Sportsinfo GROUP BY sportname /* Answer the following: What are the number of rooms for each bed type? */ SELECT bedType,
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1
SELECT T1.customer_name, T1.payment_method_code FROM Customers AS T1 GROUP BY T1.payment_method_code, T1.customer_name ORDER BY count(*) ASC LIMIT 1
SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) ASC LIMIT 1)
SELECT T1.payment_method_code, T1.customer_number FROM Customers AS T1 WHERE T1.customer_name = "Jeromy"
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = "Jeromy"
SELECT DISTINCT payment_method_code FROM Customers
SELECT DISTINCT payment_method_code FROM Customers
SELECT product_id, product_type_code FROM Products ORDER BY product_name
SELECT product_id, product_type_code FROM Products ORDER BY product_name
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) LIMIT 1
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1
SELECT count(*) FROM Customer_Orders
SELECT count(*) FROM Customer_Orders
SELECT T1.order_id, T1.order_date, T1.order_status_code FROM Customer_Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_name = "Jeromy"
SELECT T1.order_id, T1.order_date, T1.order_status_code FROM Customer_Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_name = 'Jeromy'
SELECT T1.customer_id, T2.customer_name, COUNT(*) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT T1.customer_id, T2.customer_name, count(*) FROM Customer_Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
SELECT order_status_code, COUNT(*) FROM Customer_Orders GROUP BY order_status_code
SELECT order_status_code, count(*) FROM Customer_Orders GROUP BY order_status_code
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)
SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)
SELECT /* Answer the following: Find the id of the courses that do not have any prerequisite? */ SELECT /* Answer the following: Find the name of the department that has no students minored in? */ SELECT /* Answer the following: Find the names of customers who have no policies associated. */ SELECT /* Answer the following: Which cities have at least one customer but no performer? */ SELECT /* Answer the following: Which employees do not destroy any document? Find their employee ids. */ SELECT /* Answer the following: Which faculty do not participate in any activity? Find their faculty ids. */ SELECT /* Answer the following: Show the first names and last names of customers without any account. */ SELECT
SELECT Answer: /* Answer the following: What are the names of all the games that have been played for at least 1000 hours? */ SELECT Answer: /* Answer the following: List the names of wrestlers that have not been eliminated. */ SELECT Answer: /* Answer the following: What are the names of regions that were not affected? */ SELECT Answer: /* Answer the following: List the names of shops that have no devices in stock. */ SELECT Answer: /* Answer the following: List the names of products that are not in any event. */ SELECT Answer: /* Answer the following: List the names of pilots that do not have any record. */ SELECT Answer: /* Answer the following: What are the names of the services that have never been used? */ SELECT
SELECT count(*) FROM Products AS t1 JOIN Order_Items AS t2 ON t1.product_id = t2.product_id JOIN Customer_Orders AS t3 ON t2.order_id = t3.order_id WHERE t1.product_name = "Monitor"
SELECT count(*) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = "Monitor"
SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'
SELECT count(DISTINCT customer_id) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id JOIN Products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_type_code = 'Monitor'
SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts) /* Answer the following: How many courses that do not have prerequisite? */ SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq) /* Answer the following: How many video games do you have? */ SELECT count(*) FROM Video_games /* Answer the following: How many students have advisors? */ SELECT count(DISTINCT s_id) FROM advisor /* Answer the following: How many accounts have a savings balance above the average savings balance? */ SELECT count(*) FROM savings WHERE balance > (SELECT avg(balance) FROM savings) /* Answer the following: how many states do not have rivers */ SELECT COUNT ( DISTINCT state_name ) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river )
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders
SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id /* Answer the following: Show the names of all the clients with no booking. */ SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID /* Answer the following: Find the id of the courses that do not have any prerequisite? */ SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq /* Answer the following: Find the name of the department that has no students minored in? */ SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO /* Answer the following: Find the names of customers who have no policies associated. */ SELECT customer_details FROM customers EXCEPT SELECT t2.customer_
SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_Orders
SELECT T1.order_date, T1.order_id FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T2.order_quantity > 6 OR COUNT(*) > 3
SELECT T1.order_id, T1.order_date FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING SUM(T2.order_quantity) > 6 OR COUNT(*) > 3
SELECT count(*) FROM building
SELECT count(*) FROM building
SELECT Name FROM building ORDER BY Number_of_Stories ASC
SELECT Name FROM building ORDER BY Number_of_Stories ASC
SELECT Address FROM building ORDER BY Completed_Year DESC
SELECT Address FROM building ORDER BY Completed_Year DESC
SELECT MAX(Number_of_Stories) FROM building WHERE NOT Completed_Year = 1980
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year < 1980
SELECT avg(Population) FROM region
SELECT avg(Population) FROM region
SELECT Name FROM region ORDER BY Name ASC
SELECT Name FROM region ORDER BY Name ASC
SELECT T1.Capital FROM region AS T1 JOIN building AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Area > 10000
SELECT T1.Capital FROM region AS T1 JOIN building AS T2 ON T1.Region_ID = T2.Region_ID WHERE T1.Area > 10000
SELECT Name FROM building ORDER BY Number_of_Stories DESC LIMIT 1
SELECT t1.Name, t1.Capital FROM region AS t1 WHERE t1.Population = ( SELECT MAX ( Population ) FROM region )
SELECT Name FROM region ORDER BY Area DESC LIMIT 5
SELECT Name FROM region ORDER BY Area DESC LIMIT 5
SELECT T1.Name, T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Name, T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name HAVING COUNT(*) > 1
SELECT T1.Name FROM region AS T1 JOIN building AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*) > 1
SELECT T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT T2.Name, T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Address, T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Address, T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT SUM(T1.Number_of_Stories) FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Name = "Abruzzo"
SELECT Number_of_Stories, Name FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = "Abruzzo"
SELECT "Completed_Year", COUNT(*) FROM "building" GROUP BY "Completed_Year"
SELECT "Completed_Year", COUNT(*) FROM "building" GROUP BY "Completed_Year"
SELECT /* Answer the following: List the name of the building that has the highest number of stories. */ SELECT /* Answer the following: List the name of the region that has the largest population. */ SELECT /* Answer the following: List the name of the building that has been completed the latest. */ SELECT /* Answer the following: List the name of the region that has the largest area. */ SELECT /* Answer the following: List the name of the capital of the region that has the largest population. */ SELECT /* Answer the following: List the name of the building that has the largest number of stories. */ SELECT /* Answer the following: List the name of the region that has the largest area. */ SELECT /* Answer the following: List the name of the capital of the region that has the largest population. */ SELECT /* Answer the following: List the name of the building that has the largest number of stories. */ SELECT /* Answer the following: List the name of the region that has the largest area. */ SELECT /* Answer the following: List the name of the capital of the region that has the largest population.
SELECT max(Completed_Year) FROM building
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
SELECT /* Answer the following: Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories. */ SELECT
SELECT /* Answer the following: In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed? */ SELECT
SELECT DISTINCT Completed_Year FROM building
SELECT DISTINCT Address FROM building
SELECT "Completed_Year" FROM "building" ORDER BY "Number_of_Stories" DESC
SELECT "Completed_Year" FROM "building" ORDER BY "Number_of_Stories" DESC
SELECT Channel_Details FROM Channels ORDER BY Channel_Details
SELECT Channel_Details FROM Channels ORDER BY Channel_Details
SELECT count(*) FROM Services
SELECT count(*) FROM Services
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT T3.Service_Details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Services AS T3 ON T2.Service_ID = T3.Service_ID WHERE T1.Customer_Details = "Hardy Kutch"
SELECT T3.Service_Details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Services AS T3 ON T2.Service_ID = T3.Service_ID WHERE T1.Customer_Details = "Hardy Kutch"
SELECT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID GROUP BY Service_ID HAVING COUNT(*) > 3
SELECT t2.Service_Details FROM Customers_and_Services AS t1 JOIN Services AS t2 ON t1.Service_ID = t2.Service_ID GROUP BY t1.Service_ID HAVING count(*) > 3
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Customer_Interactions AS T3 ON T2.Customers_and_Services_ID = T3.Customers_and_Services_ID JOIN Integration_Platform AS T4 ON T3.Customer_Interaction_ID = T4.Customer_Interaction_ID GROUP BY T1.Customer_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT t1.Customer_Details FROM Customers AS t1 JOIN Customers_and_Services AS t2 ON t1.Customer_ID = t2.Customer_ID GROUP BY t1.Customer_ID ORDER BY count(*) DESC LIMIT 1
SELECT C.Customer_Details FROM Customers AS C WHERE C.Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)
SELECT t1.Customer_ID, t1.Customer_Details FROM Customers AS t1 LEFT JOIN Customers_and_Services AS t2 ON t1.Customer_ID = t2.Customer_ID WHERE t2.Customer_ID IS NULL
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Services AS T3 ON T2.Service_ID = T3.Service_ID GROUP BY T1.Customer_ID ORDER BY COUNT(*) ASC LIMIT 1
SELECT t1.Customer_ID, t1.Customer_Details FROM Customers AS t1 WHERE NOT EXISTS ( SELECT * FROM Customers_and_Services AS t2 WHERE t1.Customer_ID = t2.Customer_ID )
SELECT count(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services
SELECT count(*) FROM Customers_and_Services
SELECT customer_details FROM customers WHERE customer_details LIKE "%Kutch%"
SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE "%Kutch%"
SELECT T3.Service_Details FROM Customer_Interactions AS T1 JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Services AS T3 ON T1.Service_ID = T3.Service_ID WHERE T2.Customer_Details = "Hardy Kutch" INTERSECT SELECT T3.Service_Details FROM Customer_Interactions AS T1 JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Services AS T3 ON T1.Service_ID = T3.Service_ID WHERE T1.Status_Code = "good"
SELECT T4.Service_Details FROM Customer_Interactions AS T1 JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Customers_and_Services AS T3 ON T1.Customer_Interaction_ID = T3.Customers_and_Services_ID JOIN Services AS T4 ON T3.Service_ID = T4.Service_ID WHERE T2.Customer_Details = "Hardy Kutch" OR T1.Status_Code = "good"
SELECT T3.Service_Details FROM Customer_Interactions AS T1 JOIN Customers_and_Services AS T2 ON T1.Customers_and_Services_ID = T2.Customers_and_Services_ID JOIN Services AS T3 ON T2.Service_ID = T3.Service_ID WHERE T1.Status_Code = "Bad" INTERSECT SELECT T3.Service_Details FROM Customer_Interactions AS T1 JOIN Customers_and_Services AS T2 ON T1.Customers_and_Services_ID = T2.Customers_and_Services_ID JOIN Services AS T3 ON T2.Service_ID = T3.Service_ID WHERE T1.Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch")
SELECT T3.Service_Details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Services AS T3 ON T2.Service_ID = T3.Service_ID JOIN Customer_Interactions AS T4 ON T2.Customers_and_Services_ID = T4.Customers_and_Services_ID WHERE T1.Customer_Details = 'Hardy Kutch' AND T4.Status_Code = 'bad'
SELECT T1.Service_Details FROM Services AS T1 JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Channel_ID = 15 AND T2.Service_ID = 15
SELECT T3.Service_Details FROM Customer_Interactions AS T1 JOIN Channels AS T2 ON T1.Channel_ID = T2.Channel_ID JOIN Services AS T3 ON T1.Service_ID = T3.Service_ID WHERE T2.Channel_Details = "15 ij"
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status_Code = 'Stuck' AND T2.Services_and_Channels_Details = 'bad'
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status_Code = "Stuck" AND T2.Services_and_Channels_Details = "bad"
SELECT count(*) FROM Integration_Platform AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_Interaction_ID = T2.Customer_Interaction_ID WHERE T2.Status_Code = "successful"
SELECT count(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE "%Success%"
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Integration_Platform AS T3 ON T2.Customer_Interaction_ID = T3.Customer_Interaction_ID WHERE T3.Integration_Platform_Details = "Failed"
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Integration_Platform AS T3 ON T2.Customer_Interaction_ID = T3.Customer_Interaction_ID WHERE T3.Integration_Platform_Details = "Fail"
SELECT /* Answer the following: Which service ( s ) has never been used by any customer? List their details. */ SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services)
SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services)
SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
SELECT T1.Service_ID, T1.Service_Details FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customers_and_Services_Details = "Unsatisfied"
SELECT T1.Service_Details FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customers_and_Services_Details = "Unsatisfied"
SELECT count(*) FROM Vehicles
SELECT count(*) FROM Vehicles
SELECT name FROM Vehicles ORDER BY Model_year DESC
SELECT name FROM Vehicles ORDER BY Model_year DESC
SELECT DISTINCT Type_of_powertrain FROM Vehicles
SELECT DISTINCT Type_of_powertrain FROM Vehicles
SELECT T1.name, T1.Type_of_powertrain, T1.Annual_fuel_cost FROM Vehicles AS T1 WHERE T1.Model_year = 2013 OR T1.Model_year = 2014
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013
SELECT T1.Type_of_powertrain FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id WHERE T1.Model_year = 2013 INTERSECT SELECT T1.Type_of_powertrain FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id WHERE T1.Model_year = 2014
SELECT Type_of_powertrain, count(*) FROM Vehicles GROUP BY Type_of_powertrain
SELECT Type_of_powertrain, count(*) FROM Vehicles GROUP BY Type_of_powertrain
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY count(*) DESC LIMIT 1
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1
SELECT min(Annual_fuel_cost), max(Annual_fuel_cost), avg(Annual_fuel_cost) FROM Vehicles
SELECT min(Annual_fuel_cost), max(Annual_fuel_cost), avg(Annual_fuel_cost) FROM Vehicles
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate
SELECT T1.name, T1.Model_year FROM Vehicles AS T1 WHERE T1.City_fuel_economy_rate <= T1.Highway_fuel_economy_rate
SELECT T1.Type_of_powertrain, avg(T1.Annual_fuel_cost) FROM Vehicles AS T1 GROUP BY T1.Type_of_powertrain HAVING count(*) >= 2
SELECT T1.Type_of_powertrain, avg(T1.Annual_fuel_cost) FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id GROUP BY T1.Type_of_powertrain HAVING count(*) > 1
SELECT name, age, membership_credit FROM Customers
SELECT name, age, membership_credit FROM Customers
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1
SELECT avg(age) FROM Customers WHERE membership_credit > (SELECT avg(membership_credit) FROM Customers)
SELECT avg(age) FROM Customers WHERE membership_credit > (SELECT avg(membership_credit) FROM Customers)
SELECT * FROM Discount
SELECT * FROM Discount
SELECT T3.name, SUM(T1.total_hours) FROM Renting_history AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.id JOIN Vehicles AS T3 ON T1.vehicles_id = T3.id GROUP BY T3.id
SELECT T1.name, sum(T3.total_hours) FROM Vehicles AS T1 JOIN Renting_history AS T3 ON T1.id = T3.vehicles_id GROUP BY T1.id
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)
SELECT T1.name FROM Customers AS T1 JOIN Renting_history AS T2 ON T1.id = T2.customer_id GROUP BY T2.customer_id HAVING COUNT(*) >= 2
SELECT T1.name FROM Customers AS T1 JOIN Renting_history AS T2 ON T1.id = T2.customer_id GROUP BY T1.id HAVING count(*) >= 2
SELECT T2.name, T2.Model_year FROM Renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicles_id = T2.id GROUP BY T1.vehicles_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.name, T1.Model_year FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T3.name FROM renting_history AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.id JOIN Vehicles AS T3 ON T1.vehicles_id = T3.id ORDER BY T1.total_hours DESC
SELECT T3.name FROM renting_history AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.id JOIN Vehicles AS T3 ON T1.vehicles_id = T3.id ORDER BY T1.total_hours DESC
SELECT T1.name FROM Discount AS T1 JOIN Renting_history AS T2 ON T1.id = T2.discount_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM Discount AS T1 JOIN Renting_history AS T2 ON T1.id = T2.discount_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
SELECT T3.name, T3.Type_of_powertrain FROM Renting_history AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.id JOIN Vehicles AS T3 ON T1.vehicles_id = T3.id GROUP BY T3.name, T3.Type_of_powertrain HAVING sum(T1.total_hours) > 30
SELECT T1.name, T1.Type_of_powertrain FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id GROUP BY T1.name HAVING sum(T2.total_hours) > 30
SELECT Type_of_powertrain, avg(City_fuel_economy_rate), avg(Highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain
SELECT Type_of_powertrain, avg(City_fuel_economy_rate), avg(Highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain
SELECT avg(amount_of_loan) FROM student_loans
SELECT avg(amount_of_loan) FROM student_loans
SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) >= 2 INTERSECT SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) < 2
SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) >= 2 INTERSECT SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) < 2
SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_details LIKE 'net%'
SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_details LIKE "%data%" AND NOT T2.class_details LIKE "net%"
SELECT bio_data FROM Students EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id = T2.student_id UNION SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id
SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans)
SELECT T1.amount_of_loan, T1.date_of_loan FROM Student_Loans AS T1 JOIN Achievements AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2
SELECT T1.amount_of_loan, T1.date_of_loan FROM student_loans AS T1 JOIN achievements AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2
SELECT T2.teacher_details, T1.teacher_id FROM Classes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1
SELECT T2.emp_fname, T4.prof_office, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num
SELECT DISTINCT detention_summary FROM Detention
SELECT DISTINCT detention_summary FROM Detention
SELECT T1.bio_data, T2.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id = T2.student_id
SELECT T1.student_id, T1.bio_data, T1.student_details, T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id = T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code = T3.address_type_code
SELECT T1.address_details, T2.bio_data FROM Students_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
SELECT T1.address_details, T2.bio_data FROM Students_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
SELECT T1.bio_data, T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id
SELECT T1.bio_data, T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id
SELECT COUNT(*), student_details FROM Students JOIN Behaviour_Monitoring ON Students.student_id = Behaviour_Monitoring.student_id GROUP BY student_details ORDER BY COUNT(*) DESC LIMIT 1
SELECT behaviour_monitoring_details, COUNT(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id WHERE result = (SELECT result FROM Transcripts GROUP BY result ORDER BY count(*) DESC LIMIT 1) INTERSECT SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id JOIN Behaviour_Monitoring AS T3 ON T1.student_id = T3.student_id WHERE result = (SELECT result FROM Transcripts GROUP BY result ORDER BY count(*) DESC LIMIT 1) AND COUNT(DISTINCT T3.behaviour_monitoring_id) >= 3
SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id WHERE T2.transcript_details = (SELECT T3.transcript_details FROM Transcripts AS T3 GROUP BY T3.transcript_details ORDER BY COUNT(*) DESC LIMIT 1) INTERSECT SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id WHERE T2.behaviour_monitoring_details = (SELECT T3.behaviour_monitoring_details FROM Behaviour_Monitoring AS T3 GROUP BY T3.behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)
SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING count(*) = (SELECT count(*) FROM Behaviour_Monitoring GROUP BY student_id ORDER BY count(*) DESC LIMIT 1)
SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.bio_data, T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id = T2.student_id
SELECT T1.bio_data, T3.event_date FROM Students AS T1 JOIN Student_Events AS T3 ON T1.student_id = T3.student_id
SELECT COUNT(*), T1.event_type_code, T2.event_type_description FROM Student_Events AS T1 JOIN Ref_Event_Types AS T2 ON T1.event_type_code = T2.event_type_code GROUP BY T1.event_type_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.event_type_code, T1.event_type_description, count(*) FROM Ref_Event_Types AS T1 JOIN Student_Events AS T2 ON T1.event_type_code = T2.event_type_code GROUP BY T1.event_type_code, T1.event_type_description ORDER BY count(*) DESC LIMIT 1
SELECT T1.achievement_details, T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code = T2.achievement_type_code
SELECT Achievements.achievement_details, Ref_Achievement_Type.achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code
SELECT count(*) FROM Classes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id JOIN Achievements AS T3 ON T2.student_id = T3.student_id WHERE T3.achievement_type_code = 'WIN'
SELECT count(*) FROM Teachers WHERE teacher_id IN ( SELECT teacher_id FROM Classes WHERE class_id IN ( SELECT class_id FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Achievements ) ) )
SELECT date_of_transcript, transcript_details FROM Transcripts
SELECT T1.date_of_transcript, T1.transcript_details FROM Transcripts AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements
SELECT Achievement_Type_Code, Achievement_Details, Date_Achievement FROM Achievements
SELECT datetime_detention_start, datetime_detention_end FROM Detention
SELECT datetime_detention_start, datetime_detention_end FROM Detention
SELECT T1.bio_data FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id = T2.student_id WHERE T2.address_type_code = "H" AND T1.student_details LIKE "%Suite%"
SELECT bio_data FROM Students WHERE student_details LIKE "%Suite%"
SELECT T1.teacher_id, T1.class_id, T2.student_id FROM Classes AS T1 JOIN Classes AS T2 ON T1.class_id = T2.class_id WHERE T1.teacher_id <> T2.teacher_id
SELECT T1.teacher_id, T1.teacher_details, T2.student_id, T2.student_details FROM Classes AS T1 JOIN Classes AS T2 ON T1.class_id = T2.class_id WHERE T1.teacher_id <> T2.teacher_id
SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 1 /* Answer the following: Find the first names of all the teachers that teach in classroom 110. */ SELECT firstname FROM teachers WHERE classroom = 110
SELECT T1.address_line_1, T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count(*) >= 2
SELECT COUNT(*), student_id FROM Classes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT student_id, COUNT(*) FROM Classes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) = 2)
SELECT T1.student_id, T1.student_details FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) = 2
SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type GROUP BY detention_type_code, detention_type_description ORDER BY COUNT(*) ASC LIMIT 1
SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1
SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id WHERE T2.amount_of_loan > ( SELECT avg(amount_of_loan) FROM Student_Loans )
SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id WHERE T2.amount_of_loan > ( SELECT avg(amount_of_loan) FROM Student_Loans )
SELECT min(date_of_loan) FROM Student_Loans
SELECT min(date_of_loan) FROM student_loans
SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.amount_of_loan LIMIT 1
SELECT student_name FROM student ORDER BY attendance DESC LIMIT 1
SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1
SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.transcript_id = T2.transcript_id ORDER BY T2.amount_of_loan DESC LIMIT 1
SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id JOIN Transcripts AS T3 ON T2.class_id = T3.transcript_id ORDER BY T3.date_of_transcript ASC LIMIT 1
SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id JOIN Students AS T3 ON T2.student_id = T3.student_id JOIN Transcripts AS T4 ON T3.student_id = T4.student_id ORDER BY T4.date_of_transcript ASC LIMIT 1
SELECT sum(amount_of_loan), student_id FROM Student_Loans GROUP BY student_id
SELECT T1.student_id, SUM(T1.amount_of_loan) FROM Student_Loans AS T1 GROUP BY T1.student_id
SELECT T1.student_id, T1.bio_data, COUNT(*) FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id
SELECT T1.student_id, T1.bio_data, count(*) FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id
SELECT COUNT(DISTINCT student_id) FROM Detention
SELECT COUNT(DISTINCT student_id) FROM Detention
SELECT T1.address_type_code, T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 ON T1.address_type_code = T2.address_type_code GROUP BY T1.address_type_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.address_type_code, T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 ON T1.address_type_code = T2.address_type_code GROUP BY T1.address_type_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id = T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans)
SELECT T1.date_from, T1.date_to FROM Students_Addresses AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2
SELECT T1.date_from, T1.date_to FROM Students_Addresses AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2
SELECT min(datetime_detention_start) FROM Detention
SELECT datetime_detention_start FROM Detention
SELECT Name FROM Author
SELECT Name FROM Author
SELECT Name, Address FROM Client
SELECT Name, Address FROM Client
SELECT Title, ISBN, SalePrice FROM Book
SELECT Title, ISBN, SalePrice FROM Book
SELECT count(*) FROM Book
SELECT count(*) FROM `Book`
SELECT count(*) FROM author
SELECT count(*) FROM author
SELECT count(*) FROM Client
SELECT COUNT(*) FROM Client
SELECT Name, Address FROM Client ORDER BY Name
SELECT Name, Address FROM Client ORDER BY Name
SELECT T1.Title, T2.Name FROM Book AS T1 JOIN Author AS T2 ON T1.Author = T2.idAuthor
SELECT T1.Title, T2.Name FROM Book AS T1 JOIN Author AS T2 ON T1.Author = T2.idAuthor
SELECT T1.IdOrder, T2.Name FROM Orders AS T1 JOIN Client AS T2 ON T1.IdClient = T2.IdClient
SELECT T1.IdOrder, T2.Name FROM Orders AS T1 JOIN Client AS T2 ON T1.IdClient = T2.IdClient
SELECT T1.Name, COUNT(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author GROUP BY T1.idAuthor
SELECT T1.Name, count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author GROUP BY T1.idAuthor
SELECT T1.ISBN, count(*) FROM Books_Order AS T1 JOIN `Order` AS T2 ON T1.IdOrder = T2.IdOrder GROUP BY T1.ISBN
SELECT T1.ISBN, COUNT(*) FROM Books_Order AS T1 JOIN Book AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN
SELECT T1.ISBN, sum(T2.amount) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN
SELECT T1.ISBN, SUM(T1.amount) FROM Books_Order AS T1 GROUP BY T1.ISBN
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN ORDER BY count(*) DESC LIMIT 1
SELECT T1.Title FROM `Book` AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Title, T1.PurchasePrice FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN ORDER BY SUM(T2.amount) DESC LIMIT 1
SELECT T1.Title, T1.PurchasePrice FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN ORDER BY sum(T2.amount) DESC LIMIT 1
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder WHERE T3.DateExped <CURRENT_DATE
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.Name
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient
SELECT T1.Name, COUNT(*) FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient
SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Name, sum(T2.amount) FROM Client AS T1 JOIN Books_Order AS T2 ON T1.IdClient = T2.IdOrder GROUP BY T1.IdClient
SELECT T1.Name, SUM(T2.amount) FROM Client AS T1 JOIN Books_Order AS T2 ON T1.IdClient = T2.IdOrder GROUP BY T1.IdClient
SELECT T1.Name, SUM(T2.amount) FROM Client AS T1 JOIN Books_Order AS T2 ON T1.IdClient = T2.IdOrder GROUP BY T1.IdClient ORDER BY SUM(T2.amount) DESC LIMIT 1
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder GROUP BY T1.Name ORDER BY sum(T3.amount) DESC LIMIT 1
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)
SELECT Name FROM Client WHERE NOT EXISTS (SELECT * FROM Orders WHERE Client.IdClient = Orders.IdClient)
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)
SELECT max(SalePrice), min(SalePrice) FROM Book
SELECT max(SalePrice), min(SalePrice) FROM Book
SELECT avg(PurchasePrice), avg(SalePrice) FROM Book
SELECT avg(PurchasePrice), avg(SalePrice) FROM Book
SELECT max(SalePrice - PurchasePrice) FROM Book
SELECT max(SalePrice - PurchasePrice) FROM Book
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN WHERE T1.SalePrice > ( SELECT avg(SalePrice) FROM Book )
SELECT Title FROM Book WHERE SalePrice > (SELECT avg(SalePrice) FROM Book)
SELECT Title FROM Book ORDER BY SalePrice ASC LIMIT 1
SELECT Title FROM Book ORDER BY SalePrice ASC LIMIT 1
SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1
SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1
SELECT AVG(SalePrice) FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = "George Orwell"
SELECT avg(SalePrice) FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = "George Orwell"
SELECT
SELECT
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = "George Orwell" ORDER BY T1.SalePrice LIMIT 1
SELECT Title FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = "George Orwell") ORDER BY SalePrice LIMIT 1
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN WHERE T2.Author = 1 AND T1.SalePrice < (SELECT avg(SalePrice) FROM Book)
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient HAVING COUNT(*) > 1)
SELECT Answer: /* Answer the following: What is the average purchase price of books? */ SELECT Answer: /* Answer the following: What is the name of the client who bought the most books? */ SELECT Answer: /* Answer the following: What is the name of the client who bought the book "The Catcher in the Rye" and "To Kill a Mockingbird"? */ SELECT Answer: /* Answer the following: What is the name of the author who wrote the book with the highest sale price? */ SELECT Answer: /* Answer the following: What is the name of the author who wrote the book with the lowest sale price? */ SELECT Answer: /* Answer the following: What is the name of the author who wrote the book with the highest purchase price? */ SELECT Answer: /* Answer the following: What is the name of the author who wrote the book with the lowest purchase price? */ SELECT Answer: /* Answer the following: What is the name of the author who wrote the book with the
SELECT T1.Name FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author JOIN Book AS T3 ON T2.ISBN = T3.ISBN WHERE T3.Title = "Pride and Prejudice"
SELECT t3.Title FROM Author AS t1 JOIN Author_Book AS t2 ON t1.idAuthor = t2.Author JOIN Book AS t3 ON t2.ISBN = t3.ISBN WHERE t1.Name LIKE "%Plato%"
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name LIKE "%Plato%"
SELECT count(*) FROM Books_Order AS t1 JOIN Book AS t2 ON t1.ISBN = t2.ISBN WHERE t2.Title = "Pride and Prejudice"
SELECT count(*) FROM `Books_Order` AS T1 JOIN `Book` AS T2 ON T1.ISBN = T2.ISBN WHERE T2.Title = 'Pride and Prejudice'
SELECT T1.IdOrder FROM Books_Order AS T1 JOIN Book AS T2 ON T1.ISBN = T2.ISBN WHERE T2.Title = "Pride and Prejudice" INTERSECT SELECT T1.IdOrder FROM Books_Order AS T1 JOIN Book AS T2 ON T1.ISBN = T2.ISBN WHERE T2.Title = "The Little Prince"
SELECT T1.IdOrder FROM Books_Order AS T1 JOIN Book AS T2 ON T1.ISBN = T2.ISBN WHERE T2.Title = 'Pride and Prejudice' INTERSECT SELECT T1.IdOrder FROM Books_Order AS T1 JOIN Book AS T2 ON T1.ISBN = T2.ISBN WHERE T2.Title = 'The Little Prince'
SELECT T1.ISBN FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder JOIN Client AS T4 ON T3.IdClient = T4.IdClient WHERE T4.Name = 'Peter Doe' INTERSECT SELECT T1.ISBN FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder JOIN Client AS T4 ON T3.IdClient = T4.IdClient WHERE T4.Name = 'James Smith'
SELECT T1.ISBN FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder JOIN Client AS T4 ON T3.IdClient = T4.IdClient WHERE T4.Name = 'Peter Doe' INTERSECT SELECT T1.ISBN FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder JOIN Client AS T4 ON T3.IdClient = T4.IdClient WHERE T4.Name = 'James Smith'
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder JOIN Client AS T4 ON T3.IdClient = T4.IdClient WHERE T4.Name = 'Peter Doe' INTERSECT SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder JOIN Client AS T4 ON T3.IdClient = T4.IdClient WHERE T4.Name = 'James Smith'
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder WHERE T3.IdClient = 'PeterDoe' INTERSECT SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder WHERE T3.IdClient = 'JamesSmith'
SELECT C.Name FROM Client C WHERE EXISTS (SELECT * FROM Orders O, Books_Order BO, Book B WHERE C.IdClient = O.IdClient AND O.IdOrder = BO.IdOrder AND BO.ISBN = B.ISBN AND B.Title = 'Pride and Prejudice')
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder JOIN Book AS T4 ON T3.ISBN = T4.ISBN WHERE T4.Title = "Pride and Prejudice"
SELECT count(*) FROM book
SELECT Title FROM book ORDER BY Title ASC
SELECT Title FROM book ORDER BY Pages DESC
SELECT Type, Release FROM book
SELECT max(Chapters), min(Chapters), Type FROM book
SELECT Title FROM book WHERE Type!= "Poet"
SELECT avg(Rating) FROM review
SELECT Title, Rating FROM book
SELECT AVG(T1.Rating) FROM review AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Type = 'Mystery'
SELECT min(Rank) FROM review AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Pages = (SELECT min(Pages) FROM book)
SELECT t1.Title FROM book AS t1 JOIN review AS t2 ON t1.Book_ID = t2.Book_ID ORDER BY t2.Rank DESC LIMIT 1
SELECT avg(T1.Readers_in_Million) FROM review AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Type = "Novel"
SELECT Type, COUNT(*) FROM book GROUP BY Type
SELECT Type FROM book GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1
SELECT Type FROM book GROUP BY Type HAVING COUNT(*) >= 3
SELECT Title FROM book ORDER BY Rating ASC
SELECT Title, Audio FROM book ORDER BY Readers_in_Million DESC
SELECT count(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)
SELECT Type FROM book WHERE Chapters > 75 INTERSECT SELECT Type FROM book WHERE Chapters < 50
SELECT count(DISTINCT Type) FROM book
SELECT Type, Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)
SELECT count(*) FROM customer
SELECT count(*) FROM customer
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Nationality, Card_Credit FROM customer
SELECT Nationality, Card_Credit FROM customer
SELECT Name FROM customer WHERE Nationality = "England" OR Nationality = "Australia"
SELECT T1.Name FROM customer AS T1 WHERE T1.Nationality = 'England' OR T1.Nationality = 'Australia'
SELECT AVG(T1.Card_Credit) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Level_of_Membership > 1
SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership > 1
SELECT MAX(Card_Credit) FROM customer WHERE Level_of_Membership = 1
SELECT MAX(t1.Card_Credit) FROM customer AS t1 JOIN customer_order AS t2 ON t1.Customer_ID = t2.Customer_ID GROUP BY t1.Customer_ID ORDER BY t1.Level_of_Membership DESC LIMIT 1
SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality
SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Answer: /* Answer the following: Which customer has the highest card credit? */ SELECT Answer: /* Answer the following: Which dish has the most customers order? */ SELECT Answer: /* Answer the following: Which customer has the highest level of membership? */ SELECT Answer:
SELECT Nationality FROM customer WHERE Card_Credit < 50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit > 75
SELECT Nationality FROM customer WHERE Card_Credit > 50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit < 75
SELECT T1.Name, T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID
SELECT T1.Name, T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID
SELECT T1.Name, T2.Dish_Name, T2.Quantity FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.Quantity DESC
SELECT T1.Name, T2.Dish_Name, T2.Quantity FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.Quantity DESC
SELECT T1.Name, SUM(T3.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN customer_order AS T3 ON T2.Dish_Name = T3.Dish_Name GROUP BY T1.Name
SELECT T1.Name, SUM(T3.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN customer_order AS T3 ON T2.Branch_ID = T3.Branch_ID AND T2.Dish_Name = T3.Dish_Name GROUP BY T1.Name
SELECT T1.Name, T1.Nationality, T1.Card_Credit, T1.Level_of_Membership, SUM(T2.Quantity) as Total_Quantity FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID HAVING Total_Quantity > 1
SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity) > 1
SELECT DISTINCT Manager FROM branch
SELECT SUM(Card_Credit) FROM customer WHERE Level_of_Membership > 1 /* Answer the following: What is the total number of customers who ordered a specific dish from a specific branch? */ SELECT COUNT(DISTINCT Customer_ID) FROM customer_order WHERE Branch_ID = <branch_id> AND Dish_Name = '<dish_name>' /* Answer the following: What is the total number of customers who ordered a specific dish from all branches? */ SELECT COUNT(DISTINCT Customer_ID) FROM customer_order WHERE Dish_Name = '<dish_name>' /* Answer the following: What is the total number of customers who ordered a specific dish from all branches and have a level of membership greater than 1? */ SELECT COUNT(DISTINCT Customer_ID) FROM customer_order AS T1 JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Dish_Name = '<dish_name>' AND T2.Level_of_Membership > 1
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
SELECT count(*) FROM member
SELECT Name FROM member ORDER BY Age ASC
SELECT Name, Nationality FROM member
SELECT Name FROM actor WHERE Age!= 20
SELECT Name FROM member WHERE Age = 19 OR Age = 20
SELECT Name FROM member ORDER BY Age DESC LIMIT 1
SELECT Nationality, COUNT(*) FROM member GROUP BY Nationality
SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*) >= 2
SELECT T1.Name, T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID
SELECT T3.Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID JOIN member AS T3 ON T1.Member_ID = T3.Member_ID WHERE T2.Overall_Ranking > 100
SELECT T3.Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID JOIN member AS T3 ON T1.Member_ID = T3.Member_ID WHERE T1.Year_Join < 2018
SELECT T3.Team_Leader FROM club AS T1 JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID JOIN member AS T3 ON T2.Member_ID = T3.Member_ID WHERE T1.Club_Name = "Houston"
SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)
SELECT Nationality FROM member WHERE Age > 22 INTERSECT SELECT Nationality FROM member WHERE Age < 19
SELECT AVG(T1.Age) FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID
SELECT Club_Name FROM club WHERE Club_Name LIKE "%state%"
SELECT Collection_ID, Collection_Name, Collection_Description, Collection_Subset_ID, Collection_Subset_Name, Collection_Subset_Details FROM Collections LEFT JOIN Collection_Subset_Members ON Collections.Collection_ID = Collection_Subset_Members.Collection_ID LEFT JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID
SELECT Collection_Subset_Name FROM Collection_Subsets
SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Top collection'
SELECT Document_Object_ID, Document_Subset_ID, Document_Subset_Name FROM Document_Objects JOIN Document_Subsets ON Document_Objects.Document_Subset_ID = Document_Subsets.Document_Subset_ID
SELECT Document_Subset_Name FROM Document_Subsets
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Object_ID FROM Document_Objects
SELECT Document_Object_ID FROM Document_Objects
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' AND Parent_Document_Object_ID IS NULL
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'
SELECT T1.Owner FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID WHERE T1.Description = "Braeden Collection"
SELECT T1.Owner FROM Document_Objects AS T1 JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T2.Collection_Name = "Braeden Collection"
SELECT T3.Owner FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Document_Objects AS T3 ON T2.Parent_Document_Object_ID = T3.Document_Object_ID WHERE T1.Owner = 'Marlin'
SELECT T1.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T2.Owner = 'Marlin'
SELECT Description FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL
SELECT count(*) FROM Document_Objects WHERE Owner = "Marlin"
SELECT count(*) FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL
SELECT Document_Object_ID, COUNT(*) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Document_Object_ID
SELECT Document_Object_ID, COUNT(*) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID
SELECT Collection_Name FROM Collections
SELECT Collection_Name FROM Collections
SELECT Collection_Description FROM Collections WHERE Collection_Name = "Best"
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'
SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Nice"
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice')
SELECT Collection_Name FROM Collections WHERE Parent_Collection_ID IS NULL
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections)
SELECT Document_Object_ID FROM Document_Objects GROUP BY Document_Object_ID HAVING COUNT(Parent_Document_Object_ID) > 1
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Document_Object_ID HAVING COUNT(*) > 1
SELECT count(*) FROM Collections WHERE Parent_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT count(*) FROM Collections WHERE Parent_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom' /* Answer the following: List all collections which is related to collection owned by Ransom. List the collection id. */ SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Ransom' /* Answer the following: List all collections which is related to collection owned by Ransom. List the collection id. */ SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Ransom' /* Answer the following: List all collections which is related to collection owned by Ransom. List the collection id. */ SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Ransom'
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Document_Object_ID = T2.Parent_Document_Object_ID WHERE T2.Owner = "Ransom"
SELECT Collection_Subset_ID, Collection_Subset_Name, Collection_Subset_Details, COUNT(*) FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subset_ID
SELECT T1.Collection_Subset_ID, T1.Collection_Subset_Name, COUNT(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID GROUP BY T1.Collection_Subset_ID
SELECT Document_Object_ID, COUNT(*) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Document_Object_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT Document_Object_ID, COUNT(*) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Document_Object_ID
SELECT Document_Object_ID, count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY count(*) ASC LIMIT 1
SELECT Document_Object_ID FROM Document_Objects GROUP BY Document_Object_ID ORDER BY COUNT(*) LIMIT 1
SELECT Document_Object_ID, COUNT(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(*) BETWEEN 2 AND 4
SELECT Document_Object_ID, COUNT(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(*) BETWEEN 2 AND 4
SELECT T1.Owner FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Document_Objects AS T3 ON T2.Related_Document_Object_ID = T3.Document_Object_ID WHERE T3.Owner = 'Braeden'
SELECT DISTINCT T1.Owner FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Document_Objects AS T3 ON T2.Related_Document_Object_ID = T3.Document_Object_ID WHERE T3.Owner = 'Braeden'
SELECT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Objects AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID WHERE T2.Owner = 'Braeden'
SELECT T3.Document_Subset_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Subset_Members AS T3 ON T2.Document_Object_ID = T3.Document_Object_ID WHERE T1.Owner = "Braeden"
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subset_ID, Document_Subset_Name
SELECT T1.Document_Subset_ID, T1.Document_Subset_Name, COUNT(*) FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID
SELECT Document_Subset_ID, Document_Subset_Name, count(distinct Document_Object_ID) as distinct_doc_count FROM Document_Subset_Members GROUP BY Document_Subset_ID ORDER BY distinct_doc_count DESC LIMIT 1
SELECT T1.Document_Subset_ID, T1.Document_Subset_Name, T1.Document_Subset_Details, COUNT(*) FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID WHERE T2.Document_Subset_Name = 'Best for 2000'
SELECT Collection_ID FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Collection_Subsets AS T3 ON T2.Collection_Subset_ID = T3.Collection_Subset_ID WHERE T3.Collection_Subset_Name = 'Best for 2000'
SELECT Document_Subset_Name, Document_Object_ID FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID JOIN Collection_Subset_Members ON Collections.Collection_ID = Collection_Subset_Members.Collection_ID JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID
SELECT T1.Document_Object_ID, T2.Document_Subset_Name, T1.Related_Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID
SELECT T3.Collection_Name FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID WHERE T1.Owner = 'Ransom'
SELECT T3.Collection_Name FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID WHERE T1.Owner = 'Ransom'
SELECT COUNT(*), Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY Document_Object_ID
SELECT Document_Object_ID, COUNT(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY Document_Object_ID
SELECT count(*) FROM Collections AS t1 JOIN Documents_in_Collections AS t2 ON t1.Collection_ID = t2.Collection_ID JOIN Document_Objects AS t3 ON t2.Document_Object_ID = t3.Document_Object_ID WHERE t1.Collection_Name = "Best"
SELECT count(*) FROM Collections AS t1 JOIN Documents_in_Collections AS t2 ON t1.Collection_ID = t2.Collection_ID JOIN Document_Objects AS t3 ON t2.Document_Object_ID = t3.Document_Object_ID WHERE t1.Collection_Name = "Best"
SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Collections ON Collections.Collection_ID = Document_Objects.Collection_ID JOIN Documents_in_Collections ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Collections.Collection_Name = "Best"
SELECT count(document_object_id) FROM collections c JOIN documents_in_collections d ON c.collection_id = d.collection_id WHERE collection_name = 'Best'
SELECT T2.Collection_Name, count(*), T1.Collection_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Document_Objects AS T4 ON T3.Document_Object_ID = T4.Document_Object_ID GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1
SELECT T1.Collection_ID, T1.Collection_Name, COUNT(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Best' GROUP BY T1.Collection_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT Document_Object_ID FROM Document_Objects AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Subset_Members AS T3 ON T1.Document_Object_ID = T3.Document_Object_ID JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID = T4.Document_Subset_ID WHERE T4.Document_Subset_Name = "Best for 2000" AND T2.Collection_Name = "Best"
SELECT Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID WHERE T2.Document_Subset_Name = 'Best for 2000' INTERSECT SELECT T3.Document_Object_ID FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T3.Document_Object_ID = T2.Document_Object_ID WHERE T1.Collection_Name = 'Best'
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = "Best for 2000")) AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = "Best"))
SELECT Document_Object_ID FROM Collections WHERE Collection_Name = 'Best' EXCEPT SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = "Best for 2000")) OR Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = "Best"))
SELECT Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID WHERE T2.Document_Subset_Name = 'Best for 2000' INTERSECT SELECT Document_Object_ID FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best'
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = "Best"))
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = "Best"))
SELECT count(*) FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T2.Related_Collection_ID = T3.Collection_ID WHERE T3.Collection_Name = 'Best'
SELECT count(DISTINCT Collection_ID) FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best"
SELECT Collection_Subset_Name FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Collection_Subsets AS T3 ON T1.Collection_Subset_ID = T3.Collection_Subset_ID WHERE T2.Collection_Name = "Best in"
SELECT Collection_Subset_Name FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Collection_Subsets AS T3 ON T1.Collection_Subset_ID = T3.Collection_Subset_ID WHERE T2.Collection_Name = 'Best'
SELECT count(*) FROM songs WHERE name LIKE "%Love%"
SELECT Name FROM phone ORDER BY Price ASC
SELECT T1.name, T1.language FROM songs AS T1
SELECT max(voice_sound_quality), min(voice_sound_quality) FROM performance_score
SELECT T3.voice_sound_quality, T3.rhythm_tempo, T3.stage_presence FROM participants AS T1 JOIN performance_score AS T3 ON T1.id = T3.participant_id JOIN songs AS T2 ON T2.id = T3.songs_id WHERE T1.name = 'Freeway'
SELECT id, language, original_artist FROM songs WHERE name!= 'Love'
SELECT T1.name, T1.original_artist FROM songs AS T1 WHERE T1.english_translation = 'All the streets of love'
SELECT DISTINCT T3.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id = T2.id JOIN songs AS T3 ON T1.songs_id = T3.id WHERE T3.language = 'English'
SELECT T1.id, T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id GROUP BY T2.participant_id HAVING COUNT(*) >= 2
SELECT T1.id, T1.name, T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id GROUP BY T1.id ORDER BY count(*) DESC
SELECT T1.id, T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T2.voice_sound_quality = 5 OR T2.rhythm_tempo = 5
SELECT T3.voice_sound_quality FROM participants AS T1 JOIN performance_score AS T3 ON T1.id = T3.participant_id JOIN songs AS T2 ON T2.id = T3.songs_id WHERE T2.language = 'English' AND T2.name = 'The Balkan Girls'
SELECT T2.id, T2.name FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
SELECT /* Answer the following: List the names of the participants who have scored higher than 8 in all four categories. */
SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score )
SELECT T1.language, avg(T2.rhythm_tempo) FROM songs AS T1 JOIN performance_score AS T2 ON T1.id = T2.songs_id GROUP BY T1.language
SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id JOIN songs AS T3 ON T2.songs_id = T3.id WHERE T3.language = "English"
SELECT T1.name, T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id JOIN songs AS T3 ON T2.songs_id = T3.id WHERE T3.language = "Croatian" INTERSECT SELECT T1.name, T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id JOIN songs AS T3 ON T2.songs_id = T3.id WHERE T3.language = "English"
SELECT name FROM songs WHERE name LIKE "%Is%"
SELECT T1.original_artist FROM songs AS T1 JOIN performance_score AS T2 ON T1.id = T2.songs_id WHERE T2.rhythm_tempo > 5 ORDER BY T2.voice_sound_quality DESC
SELECT count(*) FROM City
SELECT count(*) FROM City
SELECT DISTINCT state FROM City
SELECT DISTINCT state FROM City
SELECT count(distinct country) FROM City
SELECT count(*) FROM country
SELECT city_name, city_code, state, country FROM City
SELECT city_name, city_code, state, country FROM City
SELECT latitude, longitude FROM City WHERE city_name = "Baltimore"
SELECT latitude, longitude FROM City WHERE city_name = "Baltimore"
SELECT city_name FROM City WHERE state = "PA"
SELECT city_name FROM City WHERE state = "PA"
SELECT count(*) FROM city WHERE country = 'Canada'
SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'Australia'
SELECT city_name FROM City WHERE country = "USA" ORDER BY latitude
SELECT city_name FROM City WHERE country = "USA" ORDER BY latitude
SELECT state, count(*) FROM City GROUP BY state
SELECT count(*), state FROM City GROUP BY state
SELECT country, count(*) FROM City GROUP BY country
SELECT count(*), major FROM student GROUP BY major /* Answer the following: How many students are in each department? */ SELECT count(*), dept_name FROM student GROUP BY dept_name /* Answer the following: How many members are in each party? */ SELECT T2.party_name, count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id /* Answer the following: How many departments are in each school? */ SELECT count(DISTINCT dept_name), school_code FROM department GROUP BY school_code /* Answer the following: How many students are in each department? */ SELECT count(*), dept_code FROM student GROUP BY dept_code /* Answer the following: How many captains are in each rank? */ SELECT count(*), rank FROM captain GROUP BY rank /* Answer the following: For each team, how many technicians are there? */ SELECT Team, COUNT(*) FROM technician GROUP BY Team
SELECT state FROM City GROUP BY state HAVING COUNT(*) >= 2
SELECT State FROM City GROUP BY State HAVING COUNT(*) >= 2
SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1
SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1 /* Answer the following: Show the party that has the most people. */ SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Find the department with the most employees. */ SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1
SELECT country, COUNT(*) FROM City GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1
SELECT country FROM City GROUP BY country ORDER BY COUNT(*) LIMIT 1
SELECT LName, Fname FROM Student WHERE Sex = 'M' AND city_code IN (SELECT city_code FROM City WHERE state = 'MD')
SELECT T1.Fname, T1.Lname FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.state = "MD"
SELECT count(*) FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.country = 'China'
SELECT city_name FROM City ORDER BY population DESC LIMIT 1
SELECT T1.Fname, T1.Major FROM Student AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.city2_code = 'BTA'
SELECT T1.Fname, T1.Major FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.city_name = "Baltimore"
SELECT count(*), country FROM Student GROUP BY country
SELECT count(*), avg(age), city_code FROM student GROUP BY city_code /* Answer the following: How many countries are there in total? */ SELECT count(*) FROM country /* Answer the following: how many people live in the state with the largest population density */ SELECT population FROM state WHERE density = ( SELECT MAX ( density ) FROM state )
SELECT count(*), avg(age), city_code FROM student GROUP BY city_code /* Answer the following: Find the first name of students who are living in the dorm that has most number of amenities. */ SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1) /* Answer the following: Find the average age of students living in each dorm and the name of dorm. */ SELECT avg(T1.age), T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2
SELECT Answer: /* Answer the following: How many countries are there in total? */ SELECT Answer: /* Answer the following: how many people live in the state with the largest population density */ SELECT Answer: /* Answer the following: How many staff live in state Georgia? */ SELECT Answer: /* Answer the following: How many customers are there in the customer type with the most customers? */ SELECT Answer: /* Answer the following: What are the first names of all students who live in the dorm with the most amenities? */ SELECT Answer: /* Answer the following: Find the number of members living in each address. */ SELECT Answer: /* Answer the following: How many branches where have more than average number of memberships are there? */ SELECT
SELECT state FROM Student GROUP BY state ORDER BY count(*) DESC LIMIT 1
SELECT Answer: /* Answer the following: Show the party that has the most people. */ SELECT Answer: /* Answer the following: Find the department with the most employees. */ SELECT Answer: /* Answer the following: Show the role code with the least employees. */ SELECT Answer: /* Answer the following: Find the state which has the most number of customers. */ SELECT Answer: /* Answer the following: Please show the team that has the most number of technicians. */ SELECT Answer: /* Answer the following: Show the location with most number of train stations. */ SELECT Answer: /* Answer the following: Show the name of the building that has the most company offices. */ SELECT
SELECT Major, count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1
SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1
SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3)
SELECT city_name FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY City.city_name HAVING COUNT(*) >= 3
SELECT state, COUNT(*) FROM Student GROUP BY state HAVING COUNT(*) > 5
SELECT state, COUNT(*) FROM Student GROUP BY state HAVING COUNT(*) > 5
SELECT StuID FROM Student WHERE city_code = "CHI" /* Answer the following: Show ids for all documents with budget types described as 'Government'. */ SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = "Government" /* Answer the following: Show ids for all students who have advisor 1121. */ SELECT StuID FROM Student WHERE Advisor = 1121 /* Answer the following: Show the ids for projects with at least 2 documents. */ SELECT project_id FROM Documents GROUP BY project_id HAVING count(*) >= 2 /* Answer the following: Show the ids for all the students who participate in an activity and are under 20. */ SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age < 20
SELECT StuID FROM Student WHERE country!= "USA"
SELECT /* Answer the following: Show ids for all female (sex is F) students living in state PA. */ SELECT StuID FROM Student WHERE sex = 'F' AND state = 'PA'
SELECT StuID FROM Student WHERE Sex = 'F' AND State = 'PA'
SELECT StuID FROM Student WHERE Sex = 'M' AND NOT EXISTS (SELECT * FROM City WHERE Student.city_code = City.city_code AND City.country <> 'USA')
SELECT StuID FROM Student WHERE sex = 'M' AND country <> "USA"
SELECT distance FROM Direct_distance WHERE city1_code = "BAL" AND city2_code = "CHI"
SELECT distance FROM Direct_distance WHERE city1_code = "BAL" AND city2_code = "CHI"
SELECT distance FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'NEW'
SELECT distance FROM Direct_distance WHERE city1_code = "BOS" AND city2_code = "NEW"
SELECT min(distance), avg(distance), max(distance) FROM Direct_distance
SELECT min(distance), avg(distance), max(distance) FROM Direct_distance
SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance)
SELECT city1_code FROM Direct_distance ORDER BY distance DESC LIMIT 1
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)
SELECT city1_code FROM Direct_distance WHERE distance > (SELECT avg(distance) FROM Direct_distance)
SELECT T1.city1_code, T1.city2_code FROM Direct_distance AS T1 WHERE T1.distance < 1000
SELECT city1_code FROM Direct_distance WHERE distance < 1000 /* Answer the following: What are the city codes corresponding to cities with distances less than 1000? */ SELECT city2_code FROM Direct_distance WHERE distance < 1000 /* Answer the following: What are the city codes corresponding to cities with distances less than 1000? */ SELECT city1_code FROM Direct_distance WHERE distance < 1000 UNION SELECT city2_code FROM Direct_distance WHERE distance < 1000 /* Answer the following: What are the city codes corresponding to cities with distances less than 1000? */ SELECT city1_code FROM Direct_distance WHERE distance < 1000 INTERSECT SELECT city2_code FROM Direct_distance WHERE distance < 1000
SELECT sum(distance) FROM Direct_distance WHERE city1_code = 'BAL'
SELECT sum(distance) FROM Direct_distance WHERE city1_code = 'BAL'
SELECT avg(distance) FROM Direct_distance WHERE city1_code = 'BOS'
SELECT AVG(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code = T2.city_code WHERE T2.city_name = "Boston"
SELECT city_name FROM City ORDER BY latitude - 41.8321, longitude - 87.6298 LIMIT 1
SELECT city_name FROM City ORDER BY (latitude - 41.83) * (latitude - 41.83) + (longitude - 87.6297) * (longitude - 87.6297) LIMIT 1
SELECT city_name FROM City ORDER BY latitude - 42.3581 LIMIT 1
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' ORDER BY distance DESC LIMIT 1)
SELECT T1.city_code, sum(T2.distance) FROM City AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code GROUP BY T1.city_code
SELECT T1.city_code, sum(T2.distance) FROM City AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code GROUP BY T1.city_code
SELECT city_name, AVG(distance) FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code WHERE city_code!= Direct_distance.city2_code GROUP BY city_name
SELECT T1.city_name, avg(T2.distance) FROM City AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code GROUP BY T1.city_name
SELECT /* Answer the following: How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live? */ SELECT T1.city_name, T2.distance FROM City AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_code = (SELECT city_code FROM Student WHERE Fname = "Linda" AND Lname = "Smith") INTERSECT SELECT T1.city_name, T2.distance FROM City AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_code = (SELECT city_code FROM Student WHERE Fname = "Tracy" AND Lname = "Kim")
SELECT T1.distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code = T2.city_code JOIN Student AS T3 ON T1.city2_code = T3.city_code WHERE T2.Fname = "Linda" AND T2.LName = "Smith" AND T3.Fname = "Tracy" AND T3.LName = "Kim"
SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.city2_code = (SELECT city_code FROM City WHERE city_name = "Linda Smith") ORDER BY T2.distance DESC LIMIT 1
SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.city2_code IN (SELECT T3.city_code FROM City AS T3 WHERE T3.city_name = 'Linda Smith')
SELECT city_code FROM Student WHERE LName = "Kim" /* Answer the following: Who are the advisors for students that live in a city with city code "BAL"? */ SELECT Advisor FROM STUDENT WHERE city_code = "BAL" /* Answer the following: Which city does staff with first name as Janessa and last name as Sawayn live? */ SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn"
SELECT T3.state FROM student AS T1 JOIN city AS T3 ON T1.city_code = T3.city_code WHERE T1.Fname = 'LINDA'
SELECT * FROM Sailors WHERE age > 30
SELECT name FROM Sailors WHERE age > 30
SELECT name, age FROM Sailors WHERE age < 30
SELECT name, age FROM Sailors WHERE age < 30
SELECT Boats.name FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid WHERE Reserves.sid = 1
SELECT bid FROM Reserves WHERE sid = 1
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 102
SELECT AVG(rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 102 /* Answer the following: What is the name of the boat that the sailor who rated the highest rated boat reserved? */ SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T1.rating = (SELECT MAX(rating) FROM Sailors) /* Answer the following: What is the average age of the sailors who reserved the boat with the lowest age? */ SELECT AVG(age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = (SELECT bid FROM Boats ORDER BY age LIMIT 1) /* Answer the following: What is the name of the sailor who reserved the bo
SELECT /* Answer the following: Return the unique boat ids (bid) of all reserved boats. */ SELECT DISTINCT bid FROM Reserves
SELECT bid FROM Boats INTERSECT SELECT bid FROM Reserves
SELECT name FROM Sailors WHERE name LIKE '%e%' /* Answer the following: What is the name of boats that are white? */ SELECT name FROM Boats WHERE color = 'white' /* Answer the following: What is the name of sailors who have a rating of 10? */ SELECT name FROM Sailors WHERE rating = 10 /* Answer the following: What is the name of boats that are reserved by sailors with a rating of 10? */ SELECT T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid JOIN Sailors AS T3 ON T1.sid = T3.sid WHERE T3.rating = 10 /* Answer the following: What is the name of boats that are reserved by sailors with a rating of 10 and a name that contains letter e? */ SELECT T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid JOIN Sailors AS
SELECT name FROM Sailors WHERE name LIKE '%e%' /* Answer the following: What is the name of every boat that is white? */ SELECT name FROM Boats WHERE color = 'white' /* Answer the following: What is the name of every sailor who has a rating of 1 or 2? */ SELECT name FROM Sailors WHERE rating = 1 OR rating = 2 /* Answer the following: What is the name of every boat that is reserved for a sailor who is 3 years old? */ SELECT T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid JOIN Sailors AS T3 ON T1.sid = T3.sid WHERE T3.age = 3 /* Answer the following: What is the name of every boat that is reserved for a sailor who is 3 years old and has a rating of 1 or 2? */ SELECT T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON
SELECT sid FROM Sailors WHERE age > (SELECT MAX(age) FROM Sailors) /* Answer the following: return the unique ids of boats that have not been reserved by any sailor. */ SELECT bid FROM Boats WHERE NOT bid IN (SELECT bid FROM Reserves) /* Answer the following: return the unique ids of sailors who have not reserved any boats. */ SELECT sid FROM Sailors WHERE NOT sid IN (SELECT sid FROM Reserves) /* Answer the following: return the unique ids of boats that have been reserved by at least one sailor. */ SELECT bid FROM Boats WHERE bid IN (SELECT bid FROM Reserves) /* Answer the following: return the unique ids of sailors who have reserved at least one boat. */ SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves) /* Answer the following: return the unique ids of sailors who have reserved at least one red boat. */ SELECT sid FROM Sailors WHERE sid IN (SELECT T1.sid
SELECT sid FROM Sailors WHERE age > (SELECT min(age) FROM Sailors)
SELECT name FROM Sailors WHERE age > (SELECT MIN(age) FROM Sailors WHERE rating > 7)
SELECT T1.name FROM Sailors AS T1 WHERE T1.age > (SELECT T2.age FROM Sailors AS T2 WHERE T2.rating > 7)
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid GROUP BY T1.sid HAVING count(*) > 1
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid GROUP BY T1.sid
SELECT T1.sid, T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid GROUP BY T2.sid HAVING count(*) > 1
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid GROUP BY T2.sid HAVING count(*) > 1
SELECT /* Answer the following: Find the id of Sailors (sid) that reserved red or blue boat. */ SELECT T1.sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color = "red" OR T2.color = "blue"
SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = 'red' OR T3.color = 'blue'
SELECT /* Answer the following: Find the name and id of Sailors (sid) that reserved red or blue boat. */ SELECT Sailors.name, Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Boats.bid = Reserves.bid WHERE Boats.color = "red" OR Boats.color = "blue"
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = "red" OR T3.color = "blue"
SELECT /* Answer the following: Find the id of Sailors (sid) that reserved red and blue boat. */ SELECT T1.sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color = "red" INTERSECT SELECT T1.sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color = "blue"
SELECT sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color = "red" INTERSECT SELECT sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color = "blue"
SELECT /* Answer the following: Find the name and id of Sailors (sid) that reserved red and blue boat. */ SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = "red" INTERSECT SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = "blue"
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = "red" INTERSECT SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = "blue"
SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves
SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves
SELECT name, sid FROM Sailors EXCEPT SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid
SELECT name, sid FROM Sailors EXCEPT SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 103
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 103
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')
SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')
SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T1.rating > 2
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T1.rating >= 3
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1
SELECT count(*) FROM Sailors
SELECT /* Answer the following: How many reservations exist? */ SELECT
SELECT avg(age) FROM Sailors WHERE rating = 7
SELECT avg(age) FROM Sailors WHERE rating = 7
SELECT count(*) FROM Sailors WHERE name LIKE "D%"
SELECT COUNT(*) FROM Sailors WHERE name LIKE "D%"
SELECT avg(rating), max(age) FROM Sailors
SELECT avg(rating), max(age) FROM Sailors
SELECT Boats.name, COUNT( Reserves.bid ) AS Reservations FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid
SELECT Boats.bid, COUNT( Reserves.bid) FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid
SELECT count(*), bid FROM Reserves WHERE bid > 50 GROUP BY bid
SELECT count(*), bid FROM Reserves WHERE bid > 50 GROUP BY bid
SELECT Boats.bid, Boats.name, COUNT(*) FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid, Boats.name HAVING COUNT(*) > 1
SELECT Boats.bid, Boats.name, COUNT(*) as Reservations FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid, Boats.name HAVING COUNT(*) > 1
SELECT count(*), T1.name FROM Boats AS T1 JOIN Reserves AS T2 ON T1.bid = T2.bid JOIN Sailors AS T3 ON T3.sid = T2.sid WHERE T3.sid > 1 GROUP BY T1.name
SELECT T1.bid, count(*) FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.sid > 1 GROUP BY T1.bid
SELECT T1.rating, avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red' GROUP BY T1.rating
SELECT T1.rating, avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T3.bid = T2.bid WHERE T3.color ='red' GROUP BY T1.rating
SELECT name, rating, age FROM Sailors ORDER BY rating, age
SELECT name, rating, age FROM Sailors ORDER BY rating, age
SELECT count(*) FROM Boats
SELECT count(*) FROM Boats
SELECT count(*) FROM Boats WHERE color ='red'
SELECT count(*) FROM Boats WHERE color ='red'
SELECT T1.name FROM boat AS T1 JOIN reserves AS T2 ON T1.bid = T2.bid JOIN sailor AS T3 ON T2.sid = T3.sid WHERE T3.age > 20 AND T3.age < 30
SELECT T3.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T1.bid = T3.bid WHERE T2.age BETWEEN 20 AND 30
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red')))
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = "red")))
SELECT max(rating) FROM Sailors
SELECT max(rating) FROM Sailors
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.name = 'Melon'
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.name = "Melon"
SELECT name, age FROM Sailors ORDER BY rating DESC
SELECT name, age FROM Sailors ORDER BY rating DESC
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
SELECT Model FROM headphone ORDER BY Model
SELECT DISTINCT Model FROM headphone ORDER BY Model
SELECT Class FROM headphone GROUP BY Class ORDER BY count(*) DESC LIMIT 1
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) > 2
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) <= 2
SELECT count(*), Class FROM headphone WHERE Price > 200 GROUP BY Class
SELECT Class, count(*) FROM headphone WHERE Price > 200 GROUP BY Class
SELECT count(DISTINCT Earpads) FROM headphone
SELECT COUNT (DISTINCT Earpads) FROM headphone
SELECT Earpads, COUNT(*) as "Number of headphones" FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2
SELECT Earpads, COUNT(*) FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2
SELECT Model, Class, Construction FROM headphone ORDER BY Price LIMIT 1
SELECT T1.Model, T1.Class, T1.Construction FROM headphone AS T1 ORDER BY T1.Price LIMIT 1
SELECT Construction, avg(Price) FROM headphone GROUP BY Construction
SELECT avg(Price) as avg_price, Construction FROM headphone GROUP BY Construction
SELECT Class FROM headphone WHERE Earpads = "Bowls" INTERSECT SELECT Class FROM headphone WHERE Earpads = "Comfort Pads"
SELECT Class FROM headphone WHERE Earpads = "Bowls" INTERSECT SELECT Class FROM headphone WHERE Earpads = "Comfort Pads"
SELECT Earpads FROM headphone WHERE Construction = 'Plastic' EXCEPT SELECT Earpads FROM headphone WHERE Construction = 'Plastic' INTERSECT SELECT Earpads FROM headphone WHERE Construction = 'Plastic'
SELECT Earpads FROM headphone WHERE Construction!= "Plastic"
SELECT Model FROM headphone WHERE Price < (SELECT avg(Price) FROM headphone)
SELECT Model FROM headphone WHERE Price < ( SELECT avg(Price) FROM headphone )
SELECT Name FROM store ORDER BY Date_Opened
SELECT Name FROM store ORDER BY Date_Opened
SELECT Name, Parking FROM store WHERE Neighborhood = "Tarzana"
SELECT T1.Name, T1.Parking FROM store AS T1 WHERE T1.Neighborhood = "Tarzana"
SELECT count(DISTINCT Neighborhood) FROM store
SELECT count(DISTINCT Neighborhood) FROM store
SELECT count(*), neighborhood FROM store GROUP BY neighborhood
SELECT count(*), neighborhood FROM store GROUP BY neighborhood
SELECT t1.Name, t1.Store_ID, SUM(t3.Quantity) as Total_Headphones FROM store as t1 JOIN stock as t2 ON t1.Store_ID = t2.Store_ID JOIN headphone as t3 ON t2.Headphone_ID = t3.Headphone_ID GROUP BY t1.Store_ID ORDER BY Total_Headphones DESC LIMIT 1
SELECT T1.Name, SUM(T3.Quantity) FROM store AS T1 JOIN stock AS T3 ON T1.Store_ID = T3.Store_ID GROUP BY T1.Store_ID ORDER BY SUM(T3.Quantity) DESC LIMIT 1
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)
SELECT T2.Model FROM stock AS T1 JOIN headphone AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T2.Model ORDER BY SUM(T1.Quantity) DESC LIMIT 1
SELECT T1.Model FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.Headphone_ID ORDER BY sum(T2.Quantity) DESC LIMIT 1
SELECT count(*) FROM stock AS T1 JOIN store AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.Name = 'Woodman'
SELECT sum(T3.Quantity) FROM store AS T1 JOIN stock AS T3 ON T1.Store_ID = T3.Store_ID WHERE T1.Name = "Woodman"
SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)
SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)
SELECT count(*) FROM Author
SELECT COUNT(*) FROM Author
SELECT count(*) FROM Paper
SELECT count(*) FROM Paper
SELECT count(*) FROM Affiliation
SELECT COUNT(*) FROM Affiliation
SELECT COUNT(*) FROM Paper WHERE venue = "NAACL" AND year = 2000
SELECT COUNT(*) FROM Paper WHERE venue = "NAACL" AND year = 2000
SELECT count(*) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T1.venue = "Columbia University" AND T1.year = 2009
SELECT COUNT(*) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T1.venue = "Columbia University" AND T1.year = 2009
SELECT T1.name, T1.address FROM Affiliation AS T1
SELECT T1.name, T1.address FROM Affiliation AS T1
SELECT Paper.venue, Paper.year FROM Paper ORDER BY Paper.year
SELECT DISTINCT venue FROM Paper ORDER BY year
SELECT t1.title, t1.paper_id FROM Paper AS t1 JOIN Author_list AS t2 ON t1.paper_id = t2.paper_id JOIN Affiliation AS t3 ON t2.affiliation_id = t3.affiliation_id WHERE t3.name = "Harvard University"
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = "Harvard University"
SELECT T1.paper_id, T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id = (SELECT author_id FROM Author WHERE name = "Mckeown")
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = "Mckeown"
SELECT /* Given the following database schema: */ CREATE TABLE `Affiliation` ( `affiliation_id` integer NOT NULL , `name` varchar(255) DEFAULT NULL , `address` varchar(255) DEFAULT NULL , PRIMARY KEY (`affiliation_id`) ) CREATE TABLE `Author` ( `author_id` integer NOT NULL , `name` varchar(255) DEFAULT NULL , `email` varchar(255) DEFAULT NULL , PRIMARY KEY (`author_id`) ) CREATE TABLE `Author_list` ( `paper_id` varchar(25) NOT NULL , `author_id` integer NOT NULL , `affiliation_id` integer DEFAULT NULL , PRIMARY KEY (`paper_id`,`author_id`) , CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`) , CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`) , CONSTRAINT `Author_list_ibfk_
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Stanford University' INTERSECT SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Columbia University'
SELECT T1.paper_id, T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id IN (SELECT author_id FROM Author WHERE name = "Mckeown, Kathleen" INTERSECT SELECT author_id FROM Author WHERE name = "Rambow, Owen")
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id IN (SELECT author_id FROM Author WHERE name = "Mckeown, Kathleen" INTERSECT SELECT author_id FROM Author WHERE name = "Rambow, Owen")
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id IN (SELECT author_id FROM Author WHERE name = "Mckeown") EXCEPT SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id IN (SELECT author_id FROM Author WHERE name = "Rambow")
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown') EXCEPT SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow')
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = "Mckeown, Kathleen" OR T3.name = "Rambow, Owen" OR T3.name = "Kathleen Mckeown"
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = "Mckeown, Kathleen" OR T3.name = "Rambow, Owen"
SELECT T1.name, COUNT(*) FROM authors AS T1 JOIN author_list AS T2 ON T1.id = T2.author_id JOIN papers AS T3 ON T2.paper_id = T3.id GROUP BY T1.id ORDER BY COUNT(*) DESC
SELECT T1.name, COUNT(*) FROM authors AS T1 JOIN author_list AS T2 ON T2.author_id = T1.id GROUP BY T1.id ORDER BY count(*) DESC
SELECT T1.affiliation_id, T1.name, T1.address, COUNT(*) FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY COUNT(*) ASC
SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY COUNT(*) DESC
SELECT T1.name FROM authors AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id HAVING COUNT(*) > 50
SELECT T1.name FROM authors AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id HAVING count(*) > 50
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id HAVING COUNT(*) = 1
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id HAVING count(*) = 1
SELECT venue, year, COUNT(*) FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1
SELECT venue, COUNT(*) FROM Paper GROUP BY venue ORDER BY COUNT(*) LIMIT 1
SELECT venue, COUNT(*) FROM Paper GROUP BY venue ORDER BY COUNT(*) LIMIT 1
SELECT count(*) FROM CITATION WHERE cited_paper_id = "A00-1002"
SELECT COUNT(*) FROM CITATION WHERE cited_paper_id = "A00-1002"
SELECT COUNT(*) FROM Citation WHERE paper_id = "D12-1027"
SELECT COUNT(*) FROM CITATION WHERE paper_id = "D12-1027"
SELECT T1.paper_id, COUNT(*) FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT t1.paper_id, COUNT(*) FROM Citation AS t1 JOIN Paper AS t2 ON t1.cited_paper_id = t2.paper_id GROUP BY t1.paper_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.paper_id, T1.title, COUNT(*) FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.cited_paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 10
SELECT T1.paper_id, T1.title, COUNT(*) FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.cited_paper_id GROUP BY T1.paper_id ORDER BY COUNT(*) DESC LIMIT 10
SELECT count(*) FROM Citation AS T1 JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.title = "Mckeown, Kathleen"
SELECT COUNT(*) FROM CITATION AS T1 JOIN Paper AS T2 ON T1.paper_id = T2.paper_id JOIN Author_list AS T3 ON T2.paper_id = T3.paper_id JOIN Author AS T4 ON T3.author_id = T4.author_id WHERE T4.name = "Mckeown, Kathleen"
SELECT COUNT(*) FROM CITATION AS T1 JOIN Paper AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T3.author_id = T1.cited_paper_id WHERE T3.name = "Mckeown, Kathleen"
SELECT COUNT(*) FROM CITATION AS T1 JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.title = "Mckeown, Kathleen"
SELECT T1.name, COUNT(*) FROM Author AS T1 JOIN Citation AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.name, COUNT(*) FROM authors AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id JOIN citations AS T3 ON T2.paper_id = T3.paper_id GROUP BY T1.author_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.venue, T1.year FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id IN (SELECT author_id FROM Author WHERE name = "Mckeown, Kathleen")
SELECT T1.venue, T1.year FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = "Mckeown, Kathleen"
SELECT T1.venue, T1.year FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.affiliation_id = 1
SELECT venue, year FROM Paper WHERE venue LIKE '%Columbia University%'
SELECT T1.name, COUNT(*) FROM authors AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id JOIN paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 GROUP BY T1.author_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 GROUP BY T1.author_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.name, COUNT(*) FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 3
SELECT T1.affiliation_id, T1.name, COUNT(*) FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 GROUP BY T1.affiliation_id ORDER BY COUNT(*) DESC LIMIT 3
SELECT count(*) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = "Columbia University" AND T1.year <= 2009
SELECT COUNT(*) FROM Paper WHERE venue = "Columbia University" AND year <= 2009
SELECT count(*) FROM Paper WHERE venue = "Stanford University" AND year BETWEEN 2000 AND 2009
SELECT COUNT(*) FROM Paper WHERE venue = "Stanford University" AND year BETWEEN 2000 AND 2009
SELECT T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(*) FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id JOIN Paper AS T3 ON T2.cited_paper_id = T3.paper_id WHERE T1.venue = "Mckeown" AND T3.venue = "Mckeown" AND T1.title = "Kathleen" AND T3.title = "Kathleen"
SELECT T2.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T1.venue = "Journal of Computer Science"
SELECT T1.author_id, T1.name, COUNT(*) AS paper_count FROM authors AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id JOIN paper AS T3 ON T2.paper_id = T3.paper_id WHERE T1.name LIKE "%Mckeown, Kathleen%" GROUP BY T1.author_id ORDER BY paper_count DESC LIMIT 1
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.title LIKE "%Mckeown, Kathleen%" GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT paper_id FROM Citation)
SELECT T1.name FROM Affiliation AS T1 JOIN Paper AS T2 ON T1.affiliation_id = T2.paper_id JOIN Author_list AS T3 ON T2.paper_id = T3.paper_id GROUP BY T1.affiliation_id HAVING T1.address LIKE '%China%' ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T1.address LIKE '%China%' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
SELECT COUNT(*), Paper.year, Paper.venue FROM Paper GROUP BY Paper.year, Paper.venue
SELECT T1.venue, T1.year, count(*) FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.venue, T1.year
SELECT T1.affiliation_id, T1.name, COUNT(*) FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id
SELECT T1.affiliation_id, T1.name, T1.address, COUNT(T2.paper_id) FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id
SELECT T1.title FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id HAVING count(*) > 50
SELECT T1.title FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id HAVING count(*) > 50
SELECT COUNT(*) FROM authors AS t1 WHERE NOT EXISTS (SELECT * FROM papers AS t2 JOIN authorship AS t3 ON t2.paperid = t3.paperid WHERE t3.authid = t1.authid AND t2.paperid IN (SELECT t4.cited_paper_id FROM citation AS t4 WHERE t4.paper_id = t3.paperid))
SELECT COUNT(*) FROM authors WHERE NOT author_id IN (SELECT author_id FROM author_list WHERE paper_id IN (SELECT paper_id FROM citation GROUP BY paper_id HAVING COUNT(*) > 50))
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.venue = "NAACL" OR T3.venue = "ACL" AND T3.year = 2009
SELECT T1.name FROM Author AS T1 JOIN Paper AS T2 ON T1.author_id = T2.author_id JOIN Citation AS T3 ON T2.paper_id = T3.paper_id WHERE T2.venue = "NAACL" AND T2.year = 2009 INTERSECT SELECT T1.name FROM Author AS T1 JOIN Paper AS T2 ON T1.author_id = T2.author_id JOIN Citation AS T3 ON T2.paper_id = T3.paper_id WHERE T2.venue = "ACL" AND T2.year = 2009
SELECT T1.name FROM Author AS T1 LEFT JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.paper_id IS NULL
SELECT T1.name FROM author AS T1 WHERE NOT EXISTS (SELECT * FROM author_list AS T2 WHERE T1.author_id = T2.author_id)
SELECT count(*) FROM conference
SELECT count(*) FROM conference
SELECT DISTINCT Conference_Name FROM conference
SELECT Answer: /* Answer the following: What are the different staff names? */ SELECT Answer: /* Answer the following: What are the different conference roles? */ SELECT
SELECT Conference_Name, Year, Location FROM conference
SELECT "Conference_Name", "Year", "Location" FROM conference
SELECT "Conference_Name", COUNT(*) FROM conference GROUP BY "Conference_Name"
SELECT Conference_Name, COUNT(*) FROM conference GROUP BY Conference_Name
SELECT "Year", count(*) FROM conference GROUP BY "Year"
SELECT COUNT(DISTINCT Year) FROM conference
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) ASC LIMIT 1
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) LIMIT 1
SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2
SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2
SELECT Institution_Name, Location, Founded FROM institution
SELECT "Institution_Name", "Location", "Founded" FROM institution
SELECT count(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900
SELECT count(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900
SELECT "Institution_Name", "Location" FROM institution ORDER BY "Founded" DESC LIMIT 1
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1
SELECT T1.Institution_Name, count(*) FROM staff AS T1 JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Founded > 1800 GROUP BY T1.Institution_ID
SELECT T1.Institution_ID, count(*), GROUP_CONCAT(T1.name) FROM staff AS T1 JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Founded > 1800 GROUP BY T1.Institution_ID
SELECT "Institution_Name" FROM institution WHERE "Institution_ID" NOT IN (SELECT "Institution_ID" FROM staff)
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)
SELECT name FROM staff WHERE Age > (SELECT avg(Age) FROM staff)
SELECT name FROM staff WHERE Age > (SELECT avg(Age) FROM staff)
SELECT max(Age), min(Age) FROM STUDENT WHERE Major = 600
SELECT max(Age), min(Age) FROM staff
SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID JOIN staff AS T3 ON T2.staff_ID = T3.staff_ID WHERE T3.Nationality = 'Canada'
SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID JOIN staff AS T3 ON T2.staff_ID = T3.staff_ID WHERE T3.Nationality = "Canada"
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='speaker' INTERSECT SELECT staff_ID FROM conference_participation WHERE role ='sponsor')
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.role = "speaker" INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.role = "sponsor"
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID JOIN conference AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Conference_Name = "ACL" INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID JOIN conference AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Conference_Name = "NACCL"
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.Conference_ID = 1 INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.Conference_ID = 2
SELECT T2.name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_ID = T2.staff_ID WHERE T1.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2003 OR Year = 2004)
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID JOIN conference AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Year = 2003 OR T3.Year = 2004
SELECT T1.Conference_Name, T1.Year, COUNT(*) FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID
SELECT T1.Conference_ID, T1.Conference_Name, T1.Year, COUNT(*) FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID
SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID ORDER BY COUNT(*) DESC LIMIT 2
SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_Name ORDER BY COUNT(*) DESC LIMIT 2
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2018 AND Location = 'ACL'))
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE role = 'ACL')
SELECT Institution_Name, Location FROM institution WHERE NOT Institution_ID IN (SELECT Institution_ID FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2004))
SELECT "Institution_Name", "Location" FROM institution WHERE NOT "Institution_ID" IN (SELECT "Institution_ID" FROM "staff" AS T1 JOIN "conference_participation" AS T2 ON T1."staff_ID" = T2."staff_ID" WHERE T2."Conference_ID" IN (SELECT "Conference_ID" FROM "conference" WHERE "Year" = 2004))
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
SELECT pilot_name FROM PilotSkills GROUP BY pilot_name ORDER BY age DESC LIMIT 1
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age < (SELECT avg(age) FROM PilotSkills) ORDER BY T1.age
SELECT * FROM PilotSkills WHERE age < 30
SELECT * FROM PilotSkills WHERE age < 30
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = "Piper Cub" AND T1.age < 35
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age < 35 AND T2.location = "Piper Cub"
SELECT Answer: /* Answer the following: What is the location of the plane with the longest wingspan? */ SELECT Answer: /* Answer the following: What is the name of the pilot who flies the plane with the longest wingspan? */ SELECT
SELECT location FROM Hangar WHERE plane_name = "F-14 Fighter"
SELECT count(DISTINCT location) FROM Hangar
SELECT COUNT (DISTINCT location) FROM Hangar
SELECT T1.plane_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.pilot_name = "Jones" AND T2.age = 32
SELECT T1.plane_name FROM PilotSkills AS T1 WHERE T1.pilot_name = 'Jones' AND T1.age = 32
SELECT count(*) FROM PilotSkills WHERE age > 40
SELECT count(*) FROM PilotSkills WHERE age > 40
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age < 35 AND T2.location = "B-52 Bomber"
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age < 35 AND T2.location = 'B-52 Bomber'
SELECT Answer: /* Answer the following: What is the age of the pilot who flew the plane Piper Cub? */ SELECT Answer: /* Answer the following: What is the name of the pilot who flew the plane Piper Cub? */ SELECT Answer: /* Answer the following: What is the name of the plane that the pilot Piper has flown? */ SELECT Answer: /* Answer the following: What is the name of the pilot who flew the plane Piper Cub? */ SELECT Answer: /* Answer the following: What is the name of the plane that the pilot Piper has flown? */ SELECT Answer: /* Answer the following: What is the name of the pilot who flew the plane Piper Cub? */ SELECT Answer: /* Answer the following: What is the name of the plane that the pilot Piper has flown? */ SELECT Answer: /* Answer the following:
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Piper Cub' AND T1.age = (SELECT MIN(age) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Piper Cub')
SELECT plane_name FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1
SELECT plane_name FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT plane_name FROM Hangar WHERE plane_name NOT IN (SELECT plane_name FROM PilotSkills)
SELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY count(*) LIMIT 1
SELECT COUNT(DISTINCT T1.pilot_name) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Chicago'
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Chicago'
SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'
SELECT T1.plane_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.pilot_name = "Smith" AND T2.age = 41
SELECT COUNT(DISTINCT plane_name) FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name
SELECT COUNT(DISTINCT plane_name) FROM Hangar
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name = 'Smith'
SELECT count(*) FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.pilot_name = "Smith"
SELECT count(*) FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name WHERE PilotSkills.age > 40
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age > 40
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC
SELECT pilot_name FROM PilotSkills ORDER BY age DESC
SELECT Name FROM pilot ORDER BY Age DESC
SELECT location FROM Hangar ORDER BY plane_name
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age >= 10 AND T2.location ='hangar' ORDER BY T1.pilot_name
SELECT DISTINCT T1.plane_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name ORDER BY T1.plane_name
SELECT plane_name FROM Hangar ORDER BY plane_name
SELECT count(*) FROM PilotSkills WHERE age > 40 OR age < 30
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age > 40 OR T1.age < 30
SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" AND T1.age > 35 UNION SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "F-14 Fighter" AND T1.age < 30
SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = "Piper Cub" AND T1.age > 35 INTERSECT SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = "F-14 Fighter" AND T1.age < 30
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Piper Cub' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'B-52 Bomber'
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = "Piper Cub" INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = "B-52 Bomber"
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'hangar' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'hangar'
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = "Piper Cub" INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = "B-52 Bomber"
SELECT avg(age), min(age) FROM PilotSkills
SELECT avg(age), min(age) FROM artist WHERE country = 'United States'
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Boston'
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Boston'
SELECT /* Given the following database schema: */ CREATE TABLE PilotSkills (pilot_name CHAR(15) NOT NULL, plane_name CHAR(15) NOT NULL, age INTEGER, PRIMARY KEY (pilot_name, plane_name), FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name) ) CREATE TABLE Hangar (plane_name CHAR(15) NOT NULL PRIMARY KEY, location CHAR(15) ) Question: /* Answer the following: Find the pilots who have either plane Piper Cub or plane F-14 Fighter. */ SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = "Piper Cub" INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = "F-14 Fighter"
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = "Piper Cub" OR T2.location = "F-14 Fighter"
SELECT avg(age), plane_name FROM PilotSkills GROUP BY plane_name
SELECT plane_name, avg(age) FROM PilotSkills GROUP BY plane_name
SELECT plane_type, count(*) FROM Hangar GROUP BY plane_type
SELECT plane_name, COUNT(*) FROM Hangar GROUP BY plane_name
SELECT T1.plane_name, T2.pilot_name, MAX(T1.age) FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name GROUP BY T1.plane_name, T2.pilot_name ORDER BY T1.plane_name
SELECT T1.plane_name, T2.pilot_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.age = (SELECT MIN(age) FROM PilotSkills) ORDER BY T1.plane_name
SELECT T1.pilot_name, T1.plane_name, T1.age FROM PilotSkills AS T1 WHERE T1.age = (SELECT MAX(age) FROM PilotSkills AS T2 WHERE T1.plane_name = T2.plane_name)
SELECT T1.plane_name, T2.pilot_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.age = (SELECT MIN(age) FROM PilotSkills)
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name
SELECT count(*), avg(age), location FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name GROUP BY location
SELECT T1.location, count(*), avg(T2.age) FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name GROUP BY T1.location
SELECT plane_name, COUNT(pilot_name) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35
SELECT T1.plane_name, count(*) FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.age < 35 GROUP BY T1.plane_name
SELECT T1.location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name ORDER BY T2.age LIMIT 1
SELECT T1.location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name ORDER BY T2.age LIMIT 1
SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin'
SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = "Austin"
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age > (SELECT min(age) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Piper Cub') ORDER BY T1.pilot_name
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'hangar' AND T1.age > (SELECT max(age) FROM PilotSkills AS T3 JOIN Hangar AS T4 ON T3.plane_name = T4.plane_name WHERE T4.location = 'hangar' AND T3.pilot_name <> 'Piper Cub') ORDER BY T1.pilot_name
SELECT count(*) FROM PilotSkills WHERE age < (SELECT max(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')
SELECT count(*) FROM PilotSkills WHERE age < (SELECT max(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')
SELECT plane_name FROM Hangar WHERE plane_name LIKE "%Bomber%"
SELECT plane_name FROM Hangar WHERE plane_name LIKE "%Bomber%"
SELECT count(*) FROM PilotSkills WHERE age > (SELECT min(age) FROM PilotSkills WHERE plane_name = "Piper Cub")
SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age LIMIT 1)
SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1
SELECT "Area_km", "Government_website" FROM "district" ORDER BY "Population" ASC LIMIT 1
SELECT Name, Population FROM district WHERE Area_km > (SELECT avg(Area_km) FROM district)
SELECT max(Area_km), avg(Area_km) FROM district
SELECT sum(Population) FROM district ORDER BY Area_km DESC LIMIT 3
SELECT District_ID, Name, Government_website FROM district ORDER BY Population
SELECT Name FROM district WHERE Government_website LIKE '%gov%'
SELECT "District_ID", "Name" FROM "district" WHERE "Population" > 4000 OR "Area_km" > 3000
SELECT T1.Name, T1.Speach_title FROM spokesman AS T1 JOIN spokesman_district AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID
SELECT avg(T1.Points), avg(T1.Age) FROM spokesman AS T1 JOIN spokesman_district AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID WHERE T2.Start_year = 1997 AND T2.District_ID = 1 AND T1.Rank_position = 1
SELECT T1.Name, T1.Points FROM spokesman AS T1 JOIN spokesman_district AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID WHERE T1.Age < 40
SELECT Answer: /* Answer the following: What is the name of the spokesman who is the oldest? */ SELECT Answer: /* Answer the following: What is the name of the spokesman who is the oldest? */ SELECT Answer: /* Answer the following: What is the name of the spokesman who is the oldest? */ SELECT Answer: /* Answer the following: What is the name of the spokesman who is the oldest? */ SELECT Answer: /* Answer the following: What is the name of the spokesman who is the oldest? */ SELECT Answer: /* Answer the following: What is the name of the spokesman who is the oldest? */ SELECT Answer: /* Answer the following: What is the name of the spokesman who is the oldest? */ SELECT Answer: /* Answer the following: What is the name of the spokesman who is the oldest? */ SELECT Answer: /* Answer the following: What is the name of the spokes
SELECT Name FROM spokesman WHERE Points < (SELECT avg(Points) FROM spokesman)
SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T2.District_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Name FROM spokesman AS T1 JOIN spokesman_district AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID WHERE T2.Start_year < 2004
SELECT T1.Name, COUNT(*) FROM spokesman AS T1 JOIN spokesman_district AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID GROUP BY T1.Spokesman_ID
SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID JOIN spokesman AS T3 ON T2.Spokesman_ID = T3.Spokesman_ID WHERE T3.Rank_position = 1 INTERSECT SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID JOIN spokesman AS T3 ON T2.Spokesman_ID = T3.Spokesman_ID WHERE T3.Rank_position = 2
SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.District_ID HAVING COUNT(*) > 1
SELECT count(*) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district)
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)
SELECT sum(Population), avg(Population) FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district)
SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures)
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1
SELECT title, location FROM Paintings ORDER BY year DESC LIMIT 1
SELECT /* Answer the following: What is the name of the oldest sculpture and where is it located? */
SELECT title FROM Sculptures WHERE location = "gallery 226"
SELECT title FROM Sculptures AS T1 JOIN Paintings AS T2 ON T1.sculptureID = T2.sculptureID WHERE T2.location = "gallery 226"
SELECT title, location FROM Paintings
SELECT /* Answer the following: What are the sculptures called and where are they located? */
SELECT title, location FROM Sculptures
SELECT title, location FROM Sculptures
SELECT medium FROM Paintings WHERE paintingID = 80
SELECT medium FROM Paintings WHERE paintingID = 80
SELECT lname, fname FROM Artists WHERE birthYear > 1850
SELECT lname, fname FROM Artists WHERE birthYear > 1850
SELECT title, year FROM Sculptures WHERE location!= "Gallery 226"
SELECT title, year FROM Sculptures WHERE location!= "Gallery 226"
SELECT DISTINCT T1.fname, T1.lname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year < 1900
SELECT DISTINCT T1.fname, T1.lname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year < 1900
SELECT DISTINCT birthYear FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE year > 1920
SELECT DISTINCT T1.birthYear FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year > 1920
SELECT lname, fname FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists)
SELECT lname, fname FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists)
SELECT MIN(deathYear - birthYear) FROM Artists
SELECT Answer: /* Answer the following: What is the title of the painting with the largest area? */ SELECT Answer: /* Answer the following: What is the title of the sculpture with the largest area? */ SELECT Answer: /* Answer the following: What is the title of the painting with the largest area? */ SELECT Answer: /* Answer the following: What is the title of the sculpture with the largest area? */ SELECT Answer: /* Answer the following: What is the title of the painting with the largest area? */ SELECT Answer: /* Answer the following: What is the title of the sculpture with the largest area? */ SELECT Answer: /* Answer the following: What is the title of the painting with the largest area? */ SELECT Answer: /* Answer the following: What is the title of the sculpture with the largest area? */ SELECT Answer: /* Answer the following: What is the title of the painting with the
SELECT lname, fname, deathYear - birthYear AS life_span FROM Artists ORDER BY life_span DESC LIMIT 1
SELECT lname, fname, (deathYear - birthYear) AS ageLived FROM Artists ORDER BY ageLived DESC LIMIT 1
SELECT COUNT(*) FROM Paintings WHERE location = "Gallery 240"
SELECT COUNT(*) FROM Paintings WHERE location = "Gallery 240" /* Answer the following: What is the total number of sculptures exhibited in gallery 240? */ SELECT COUNT(*) FROM Sculptures WHERE location = "Gallery 240" /* Answer the following: What is the total number of paintings and sculptures exhibited in gallery 240? */ SELECT COUNT(*) FROM (SELECT * FROM Paintings UNION SELECT * FROM Sculptures) WHERE location = "Gallery 240" /* Answer the following: What is the average height of all paintings by painters born after 1800? */ SELECT AVG(height_mm) FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE birthYear > 1800 /* Answer the following: What is the average height of all sculptures by sculptors born after 1800? */ SELECT AVG(height_mm) FROM Sculpt
SELECT /* Answer the following: What is the title of the painting with the largest area? */
SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1)
SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = "Aerosmith"
SELECT T1.title, T1.year FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.fname = 'Mary'
SELECT /* Answer the following: What are the titles of the paintings that were created by the artist who was born after 1850? */
SELECT /* Answer the following: How many sculptures were created by the artist who died after 1850? */
SELECT T2.location, T2.medium FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.fname = "Pablo"
SELECT T1.location, T1.medium FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.fname = "Pablo"
SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID
SELECT lname, fname FROM Artists WHERE artistID IN ( SELECT painterID FROM Paintings UNION SELECT sculptorID FROM Sculptures )
SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' INTERSECT SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'lithographic'
SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = "oil" INTERSECT SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = "lithographic"
SELECT
SELECT Answer: /* Answer the following: What is the title of the painting that is on display at the Metropolitan Museum of Art? */ SELECT Answer: /* Answer the following: What is the title of the sculpture that is on display at the Metropolitan Museum of Art? */ SELECT
SELECT DISTINCT T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = "oil" AND T2.location = "gallery 241"
SELECT T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' AND T2.location = 'gallery 241'
SELECT count(*), medium FROM Paintings GROUP BY medium /* Answer the following: What are the numbers of works for different medium type? */ SELECT count(*), medium FROM Sculptures GROUP BY medium
SELECT medium, COUNT(*) FROM Paintings GROUP BY medium /* Answer the following: How many works are there in each medium? */ SELECT medium, COUNT(*) FROM Sculptures GROUP BY medium
SELECT avg(height_mm), medium FROM Paintings GROUP BY medium
SELECT avg(height_mm), medium FROM Paintings GROUP BY medium
SELECT COUNT(*), location FROM Paintings WHERE year < 1900 GROUP BY location
SELECT count(*) FROM Paintings WHERE year < 1900
SELECT title FROM Paintings WHERE year > 1910 AND medium = "oil" /* Answer the following: What are the titles of sculptures that are created after 1910 and whose medium is wood? */ SELECT title FROM Sculptures WHERE year > 1910 AND medium = "wood" /* Answer the following: What are the titles of paintings that are created after 1910 and are painted by the artist born in 1850? */ SELECT title FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.year > 1910 AND T2.birthYear = 1850 /* Answer the following: What are the titles of sculptures that are created after 1910 and are sculpted by the artist born in 1850? */ SELECT title FROM Sculptures AS T1 JOIN Artists AS T2 ON T1
SELECT T2.title FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.medium = "oil" AND T2.year > 1910
SELECT DISTINCT T1.artistID FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = "oil" AND T2.location = "gallery 240"
SELECT T1.artistID FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = "oil" AND T2.location = "gallery 240"
SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT min(height_mm) FROM Paintings WHERE medium = "canvas")
SELECT DISTINCT T1.title FROM Paintings AS T1 JOIN Paintings AS T2 ON T1.height_mm > T2.height_mm WHERE T2.medium = 'canvas'
SELECT paintingID FROM Paintings WHERE year < (SELECT MAX(year) FROM Paintings WHERE location = "Gallery 240") /* Answer the following: Find the distinct ids of all sculptures that are older than some sculpture at location gallery 240. */ SELECT sculptureID FROM Sculptures WHERE year < (SELECT MAX(year) FROM Sculptures WHERE location = "Gallery 240") /* Answer the following: Find the distinct ids of all paintings that are painted by somebody who died before 1800. */ SELECT paintingID FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE deathYear < 1800) /* Answer the following: Find the distinct ids of all sculptures that are sculpted by somebody who died before 1800. */ SELECT sculptureID FROM Sculptures WHERE sculptorID IN (SELECT artistID FROM Artists WHERE
SELECT DISTINCT T1.paintingID FROM Paintings AS T1 JOIN Paintings AS T2 ON T1.paintingID < T2.paintingID WHERE T2.location = "Gallery 240" AND T1.year > T2.year
SELECT paintingID FROM Paintings ORDER BY year LIMIT 1
SELECT Answer: /* Answer the following: What is the id of the oldest artist? */ SELECT Answer: /* Answer the following: What is the id of the oldest artist who painted? */ SELECT Answer: /* Answer the following: What is the id of the oldest artist who sculpted? */ SELECT Answer: /* Answer the following: What is the title of the oldest painting? */ SELECT Answer: /* Answer the following: What is the title of the oldest sculpture? */ SELECT Answer: /* Answer the following: What is the title of the painting with the largest area? */ SELECT Answer: /* Answer the following: What is the title of the sculpture with the largest area? */ SELECT Answer: /* Answer the following: What is the title of the painting with the largest area? */ SELECT Answer: /* Answer the following: What is the title of the sculpture with the largest area? */ SELECT Answer: /*
SELECT /* Answer the following: What are the first and last name of the artist who had a painting work whose title has the word “landscape” in it? */
SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE "%female%"
SELECT DISTINCT title FROM paintings ORDER BY title
SELECT DISTINCT title FROM Paintings ORDER BY title
SELECT DISTINCT title FROM paintings ORDER BY height_mm
SELECT title FROM paintings ORDER BY height_mm ASC
SELECT T1.title FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.year BETWEEN 1900 AND 1950 INTERSECT SELECT T1.title FROM Sculptures AS T1 JOIN Artists AS T2 ON T1.sculptorID = T2.artistID WHERE T1.year BETWEEN 1900 AND 1950
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950
SELECT title FROM Paintings WHERE painterID = 222 INTERSECT SELECT title FROM Sculptures WHERE sculptorID = 222
SELECT title FROM Paintings WHERE painterID = 222 INTERSECT SELECT title FROM Sculptures WHERE sculptorID = 222
SELECT Answer: /* Answer the following: What is the id of the artist who has the highest number of painting works after 1900? */ SELECT Answer: /* Answer the following: What is the id of the artist who has the highest number of sculpture works after 1900? */ SELECT Answer: /* Answer the following: What is the id of the artist who has the highest number of painting works before 1900? */ SELECT Answer: /* Answer the following: What is the id of the artist who has the highest number of sculpture works before 1900? */ SELECT Answer: /* Answer the following: What is the id of the artist who has the highest number of painting works after 1900? */ SELECT Answer: /* Answer the following: What is the id of the artist who has the highest number of sculpture works after 1900? */ SELECT
SELECT /* Answer the following: What is the id of the artist with the most sculptures before 1900? */
SELECT T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1
SELECT T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800 /* Answer the following: What are the names of sculptures that were created after 1800 and have a medium of "Clay"? */ SELECT title FROM Sculptures WHERE year > 1800 AND medium = "Clay" /* Answer the following: What are the names of painters whose first name is "Joseph" and last name is "Gordon-Levitt"? */ SELECT fname FROM Artists WHERE lname = "Gordon-Levitt" AND fname = "Joseph" /* Answer the following: What are the names of paintings that were created in the year 1930 and have a medium of "Oil on canvas"? */ SELECT title FROM Paintings WHERE year = 1930 AND medium = "Oil on canvas" /* Answer the following: What are the names of sculptures that were
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800 /* Answer the following: What are the titles of sculptures that have a year of 1970 or 1980? */ SELECT title FROM Sculptures WHERE year = 1970 OR year = 1980 /* Answer the following: What are the titles of paintings that have a medium of Oil on canvas? */ SELECT title FROM Paintings WHERE medium = "Oil" AND mediumOn = "canvas" /* Answer the following: What are the titles of sculptures that have a location of New York? */ SELECT title FROM Sculptures WHERE location = "New York" /* Answer the following: What are the titles of paintings that have a painterID of 1001? */ SELECT title FROM Paintings WHERE painterID = 1001
SELECT Answer: /* Answer the following: Which paintings were created in the year 1930? */ SELECT Answer: /* Answer the following: Which sculptures were created in the year 1930? */ SELECT Answer: /* Answer the following: Which paintings were created in the year 1930 and had a height greater than 1000 mm? */ SELECT Answer: /* Answer the following: Which sculptures were created in the year 1930 and had a height greater than 1000 mm? */ SELECT Answer: /* Answer the following: Which paintings were created in the year 1930 and had a height greater than 1000 mm and a width greater than 1500 mm? */ SELECT Answer: /* Answer the following: Which sculptures were created in the year 1930 and had a height greater than 1000 mm and a width greater than
SELECT location FROM Paintings WHERE year < 1885 INTERSECT SELECT location FROM Sculptures WHERE year > 1930
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND width_mm < 2000
SELECT location FROM paintings WHERE mediumOn = "Panel" INTERSECT SELECT location FROM paintings WHERE mediumOn = "Canvas"
SELECT location FROM Paintings WHERE mediumOn = 'Panel' INTERSECT SELECT location FROM Paintings WHERE mediumOn = 'Canvas'
SELECT location FROM Paintings WHERE year < 1885 INTERSECT SELECT location FROM Paintings WHERE year > 1930
SELECT location FROM Paintings WHERE year < 1885 INTERSECT SELECT location FROM Paintings WHERE year > 1930
SELECT avg(height_mm), avg(width_mm) FROM Paintings WHERE medium = "oil" AND location = "gallery 241"
SELECT avg(height_mm), avg(width_mm) FROM Paintings WHERE medium = "oil" AND location = "gallery 241"
SELECT max(height_mm), paintingID FROM Paintings WHERE year < 1900
SELECT MAX(height_mm), paintingID FROM Paintings WHERE year < 1900
SELECT max(height_mm), max(width_mm), year FROM Paintings GROUP BY year /* Answer the following: What are the maximum height and width of sculptures for each year? */ SELECT max(height_mm), max(width_mm), year FROM Sculptures GROUP BY year /* Answer the following: What is the average and oldest birth year for each artist? */ SELECT avg(birthYear), max(birthYear), fname, lname FROM Artists GROUP BY fname, lname /* Answer the following: What is the average and oldest death year for each artist? */ SELECT avg(deathYear), max(deathYear), fname, lname FROM Artists GROUP BY fname, lname /* Answer the following: What is the average and oldest birth year for each artist? */ SELECT avg(birthYear), max(birthYear), fname, lname FROM Artists GROUP BY fname, lname /* Answer the following:
SELECT max(height_mm), max(width_mm), year FROM Paintings GROUP BY year
SELECT T1.painterID, T1.title, avg(T1.height_mm), avg(T1.width_mm) FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID GROUP BY T1.painterID ORDER BY T2.fname
SELECT T1.painterID, T1.title, T1.year, T1.height_mm, T1.width_mm, T2.fname, T2.lname, avg(T1.height_mm), avg(T1.width_mm) FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID GROUP BY T1.painterID, T1.title, T1.year, T1.height_mm, T1.width_mm, T2.fname, T2.lname ORDER BY T2.fname
SELECT T1.fname, count(*) FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T2.painterID HAVING count(*) >= 2
SELECT T1.fname, count(*) FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T2.painterID HAVING count(*) >= 2
SELECT deathYear FROM Artists WHERE artistID IN ( SELECT painterID FROM Paintings GROUP BY painterID HAVING count(*) <= 3 )
SELECT T1.artistID, T1.fname, T1.lname, MIN(T2.year) FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.artistID HAVING COUNT(*) < 4
SELECT T1.deathYear FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1
SELECT title FROM Sculptures ORDER BY (height_mm * width_mm) DESC LIMIT 1
SELECT paintingID, height_mm FROM Paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1
SELECT /* Answer the following: What is the name of the sculpture with the smallest dimensions? */
SELECT paintingID FROM Paintings WHERE year < (SELECT MAX(year) FROM Paintings WHERE location = "Gallery 240")
SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = "Gallery 240") /* Answer the following: What is the id of every sculpture created after the oldest sculpture in gallery 240? */ SELECT sculptureID FROM Sculptures WHERE year > (SELECT MAX(year) FROM Sculptures WHERE location = "Gallery 240") /* Answer the following: What is the id of every painting created after the oldest painting in gallery 240? */ SELECT paintingID FROM Paintings WHERE year > (SELECT MAX(year) FROM Paintings WHERE location = "Gallery 240") /* Answer the following: What is the id of every sculpture created before the oldest sculpture in gallery 240? */ SELECT sculptureID FROM Sculptures WHERE year < (SELECT MIN(year) FROM Sculptures WHERE location = "Gallery 240")
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900) /* Answer the following: What are the ids of the sculptures whose year is the same as the year of the painting with the id 1000? */ SELECT sculptureID FROM Sculptures WHERE year = (SELECT year FROM Paintings WHERE paintingID = 1000) /* Answer the following: What are the ids of the paintings whose width is the same as the width of the painting with the id 1000? */ SELECT paintingID FROM Paintings WHERE width_mm = (SELECT width_mm FROM Paintings WHERE paintingID = 1000) /* Answer the following: What are the ids of the sculptures whose sculptor was born after the year 1900? */ SELECT sculptureID FROM Sculptures WHERE sculpt
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT max(height_mm) FROM Paintings WHERE year > 1900) /* Answer the following: List the ids of all sculptures that are made of lead. */ SELECT sculptureID FROM Sculptures WHERE medium = "lead" /* Answer the following: List the ids of all sculptures that are made of lead and are located in the museum. */ SELECT sculptureID FROM Sculptures WHERE medium = "lead" AND location = "museum" /* Answer the following: List the ids of all paintings that are painted by painters who are also sculptors. */ SELECT paintingID FROM Paintings WHERE painterID IN (SELECT sculptorID FROM Sculptures) /* Answer the following: List the ids of all paintings that are painted by painters who are also sculptors and are located
SELECT /* Answer the following: Find the top 3 artists who have the biggest number of sculpture works whose medium is metal? */
SELECT /* Answer the following: Which artists have the most sculptures in oil? */
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year
SELECT paintingID, location, title FROM Paintings WHERE medium = "oil" ORDER BY year
SELECT T1.year, T1.location, T1.title FROM Paintings AS T1 WHERE T1.height_mm > 1000 ORDER BY T1.title /* Answer the following: List the year, location and title of sculptures whose width is shorter than 1000 ordered by title. */ SELECT T1.year, T1.location, T1.title FROM Sculptures AS T1 WHERE T1.width_mm < 1000 ORDER BY T1.title /* Answer the following: List the year, location and title of paintings whose medium is oil on canvas ordered by title. */ SELECT T1.year, T1.location, T1.title FROM Paintings AS T1 WHERE T1.medium = "oil on canvas" ORDER BY T1.title /* Answer the following: List the year, location and title of sculptures whose medium is wood ordered by title. */ SELECT
SELECT T1.year, T1.location, T1.title FROM Paintings AS T1 WHERE T1.height_mm > 1000 ORDER BY T1.title /* Answer the following: List the year, location, and name of all sculptures that are taller than 1000 in alphabetical order. */ SELECT T1.year, T1.location, T1.title FROM Sculptures AS T1 WHERE T1.height_mm > 1000 ORDER BY T1.title /* Answer the following: List the year, location, and name of all paintings that are painted on ivory in alphabetical order. */ SELECT T1.year, T1.location, T1.title FROM Paintings AS T1 WHERE T1.mediumOn = 'ivory' ORDER BY T1.title /* Answer the following: List the year, location, and name of all sculptures
SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID LEFT JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID WHERE T3.sculptureID IS NULL
SELECT lname, fname FROM Artists AS T1 WHERE NOT EXISTS (SELECT * FROM Sculptures AS T2 WHERE T1.artistID = T2.sculptorID) INTERSECT SELECT lname, fname FROM Artists AS T1 WHERE EXISTS (SELECT * FROM Paintings AS T2 WHERE T1.artistID = T2.painterID)
SELECT location FROM Paintings WHERE year < 1885 EXCEPT SELECT location FROM Paintings WHERE mediumOn = "canvas"
SELECT /* Answer the following: What is the average height of all paintings in the database? */
SELECT count(*) FROM race
SELECT count(*) FROM race
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC
SELECT T1.Driver_Name, T1.Entrant, T1.Constructor, T1.Chassis, T1.Engine, T1.Age, T2.Winning_driver, T2.Winning_team, T2.Report FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID ORDER BY T2.Winning_team
SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position <> "Junior Strous"
SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Winning_driver WHERE T2.Pole_Position!= "Junior Strous"
SELECT Constructor FROM driver ORDER BY Age ASC
SELECT Constructor FROM driver ORDER BY Age ASC
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20
SELECT Entrant, COUNT(*) FROM driver WHERE Age > 20 GROUP BY Entrant
SELECT max(Age), min(Age) FROM driver
SELECT max(Age), min(Age) FROM driver
SELECT count(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20
SELECT count(distinct T1.Engine) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age > 30 OR T1.Age < 20
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
SELECT T1.Driver_Name, T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID
SELECT T1.Driver_Name, T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID
SELECT T1.Driver_Name, COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_Name
SELECT T1.Driver_Name, count(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID
SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY count(*) DESC LIMIT 1
SELECT T1.Driver_Name, T1.Age FROM driver AS T1 WHERE T1.Driver_ID IN ( SELECT T2.Driver_ID FROM race AS T2 GROUP BY T2.Driver_ID HAVING COUNT(*) >= 2 )
SELECT T1.Driver_Name, T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_Name HAVING COUNT(*) >= 2
SELECT T1.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Age >= 26
SELECT T1.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Age >= 26
SELECT Driver_Name FROM driver WHERE Constructor!= "Bugatti"
SELECT T1.Driver_Name FROM driver AS T1 WHERE T1.Constructor <> "Bugatti"
SELECT Constructor, COUNT(*) FROM driver GROUP BY Constructor
SELECT Constructor, COUNT(*) FROM driver GROUP BY Constructor
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= 2
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= 2
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
SELECT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30
SELECT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30
SELECT /* Given the following database schema: */ CREATE TABLE "driver" ( "Driver_ID" int, "Driver_Name" text, "Entrant" text, "Constructor" text, "Chassis" text, "Engine" text, "Age" int, PRIMARY KEY ("Driver_ID") ) CREATE TABLE "race" ( "Road" int, "Driver_ID" int, "Race_Name" text, "Pole_Position" text, "Fastest_Lap" text, "Winning_driver" text, "Winning_team" text, "Report" text, PRIMARY KEY ("Road"), FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`) ) Question: /* Answer the following: Find the teams that won more than once. */ SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1
SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1
SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = "James Hinchcliffe" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = "Carl Skerlong"
SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = "James Hinchcliffe" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = "Carl Skerlong"
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = "James Hinchcliffe")
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')
SELECT Answer: /* Answer the following: What is the average score of countries? */ SELECT AVG(overall_score) FROM countries /* Answer the following: What is the average score of countries in justice? */ SELECT AVG(justice_score) FROM countries /* Answer the following: What is the average score of countries in health? */ SELECT AVG(health_score) FROM countries /* Answer the following: What is the average score of countries in education? */ SELECT AVG(education_score) FROM countries /* Answer the following: What is the average score of countries in economics? */ SELECT AVG(economics_score) FROM countries /* Answer the following: What is the average score of countries in politics? */ SELECT AVG(politics_score) FROM countries /* Answer the following: How many countries are there in each language? */ SELECT COUNT(*), language_id FROM official_languages GROUP BY language_id /* Answer the following: What is the most widely spoken language in each country? */ SELECT language_id, country
SELECT count(*) FROM languages
SELECT name FROM languages ORDER BY name ASC
SELECT name FROM languages ORDER BY name
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id JOIN countries AS T3 ON T2.country_id = T3.id WHERE T1.name LIKE '%ish%'
SELECT name FROM languages WHERE name LIKE "%ish%"
SELECT name FROM countries ORDER BY overall_score DESC
SELECT name FROM countries ORDER BY overall_score DESC
SELECT avg(justice_score) FROM countries
SELECT avg(justice_score) FROM countries
SELECT max(health_score), min(health_score) FROM countries WHERE name!= "Norway"
SELECT max(health_score), min(health_score) FROM countries WHERE name!= "Norway"
SELECT count(DISTINCT language_id) FROM official_languages
SELECT COUNT(DISTINCT T1.name) FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id
SELECT name FROM countries ORDER BY education_score DESC
SELECT name FROM countries ORDER BY education_score DESC
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
SELECT T1.name, T2.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id JOIN languages AS T3 ON T2.language_id = T3.id
SELECT T1.name, T2.name FROM countries AS T1 JOIN languages AS T2 ON T1.id = T2.id
SELECT T1.name, COUNT(*) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id JOIN languages AS T3 ON T2.language_id = T3.id GROUP BY T3.id
SELECT T1.name, count(*) FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T2.language_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T2.language_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.name, COUNT(*) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id JOIN languages AS T3 ON T2.language_id = T3.id GROUP BY T3.name HAVING COUNT(*) >= 2
SELECT T1.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id = T2.id GROUP BY T1.language_id HAVING COUNT(*) >= 2
SELECT avg(overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id JOIN languages AS T3 ON T2.language_id = T3.id WHERE T3.name = "English"
SELECT avg(overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id JOIN languages AS T3 ON T2.language_id = T3.id WHERE T3.name = 'English'
SELECT t1.name, COUNT(*) AS num_speakers FROM languages AS t1 JOIN official_languages AS t2 ON t1.id = t2.language_id GROUP BY t1.name ORDER BY num_speakers DESC LIMIT 3
SELECT t1.name, COUNT ( t3.country_id ) FROM languages AS t1 JOIN official_languages AS t2 ON t1.id = t2.language_id JOIN countries AS t3 ON t2.country_id = t3.id GROUP BY t1.name ORDER BY COUNT ( t3.country_id ) DESC LIMIT 3
SELECT T1.name, AVG(T2.overall_score) FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name ORDER BY AVG(T2.overall_score) DESC
SELECT T1.name, avg(T2.overall_score) FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.id ORDER BY avg(T2.overall_score) DESC
SELECT T1.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id GROUP BY T2.country_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.name, COUNT(*) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score > 95 INTERSECT SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score < 90
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score > 95 INTERSECT SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score < 90
SELECT country, town_city FROM Addresses
SELECT T1.address_id, T1.town_city, T1.country, T1.county_state_province FROM Addresses AS T1 /* Answer the following: List the property name, address, and price for each property. */ SELECT T1.property_name, T2.line_1_number_building, T2.town_city, T2.country, T1.vendor_requested_price FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id = T2.address_id /* Answer the following: List the property name, address, and price for each property. */ SELECT T1.property_name, T2.line_1_number_building, T2.town_city, T2.country, T1.vendor_requested_price FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id = T2.address_id /* Answer the following: List the property name, address, and price for each property. */ SELECT T
SELECT T1.property_id, T1.property_address_id, T2.state_name FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id = T2.address_id
SELECT t1.town_city, t2.state_province_county FROM addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id
SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.user_id = 1
SELECT feature_description FROM Features WHERE feature_name = "rooftop"
SELECT T1.feature_name, T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id GROUP BY T1.feature_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T2.feature_name, T2.feature_description FROM Properties AS T1 JOIN Property_Features AS T2 ON T1.property_id = T2.property_id GROUP BY T2.feature_name, T2.feature_description ORDER BY COUNT(*) DESC LIMIT 1
SELECT min(room_count) FROM Properties
SELECT min(room_count) FROM Properties
SELECT count(*) FROM Properties WHERE garage_yn = "Y" OR parking_lots = 1
SELECT count(*) FROM Properties WHERE garage_yn = "Y" OR parking_lots = 1
SELECT T1.age_category_code, T1.age_category_description FROM Ref_Age_Categories AS T1 JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.other_user_details LIKE '%Mother%'
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_description LIKE "%Mother%"
SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 1
SELECT first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T1.user_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT avg(room_count) FROM Properties AS T1 JOIN Property_Features AS T2 ON T1.property_id = T2.property_id WHERE T2.feature_id = 1 /* Answer the following: List the average room count of the properties with gardens. */ SELECT avg(room_count) FROM Properties AS T1 JOIN Property_Features AS T2 ON T1.property_id = T2.property_id WHERE T2.feature_id = 1 /* Answer the following: List the average room count of the properties with gardens. */ SELECT avg(room_count) FROM Properties AS T1 JOIN Property_Features AS T2 ON T1.property_id = T2.property_id WHERE T2.feature_id = 1
SELECT avg(T1.room_count) FROM Properties AS T1 JOIN Property_Features AS T2 ON T1.property_id = T2.property_id WHERE T2.feature_id = 1
SELECT DISTINCT t1.town_city FROM Addresses AS t1 JOIN Properties AS t2 ON t1.address_id = t2.property_address_id JOIN Property_Features AS t3 ON t2.property_id = t3.property_id WHERE t3.feature_id = (SELECT feature_id FROM Features WHERE feature_name = "Swimming pool")
SELECT DISTINCT city_name FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id = T2.address_id WHERE EXISTS (SELECT * FROM Property_Features AS T3 WHERE T3.property_id = T1.property_id AND T3.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'Swimming Pool'))
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1
SELECT T1.property_id, T1.vendor_requested_price FROM Properties AS T1 ORDER BY T1.vendor_requested_price LIMIT 1
SELECT avg(room_count) FROM Properties
SELECT avg(room_count) FROM Properties
SELECT count(DISTINCT room_size) FROM Rooms
SELECT count(DISTINCT room_size) FROM rooms
SELECT T1.user_id, T1.search_string FROM User_Searches AS T1 GROUP BY T1.user_id HAVING COUNT(*) >= 2
SELECT T1.user_id, T1.search_seq FROM User_Searches AS T1 GROUP BY T1.user_id HAVING count(*) >= 2
SELECT AVG(age) FROM STUDENT
SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC LIMIT 1
SELECT search_datetime, search_string FROM user_searches ORDER BY search_string DESC
SELECT T1.search_string, T1.search_datetime FROM User_Searches AS T1 ORDER BY T1.search_string DESC
SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T2.property_id NOT IN (SELECT T3.property_id FROM User_Property_History AS T3 JOIN Users AS T4 ON T3.user_id = T4.user_id GROUP BY T3.user_id HAVING count(*) <= 2)
SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T2.property_id NOT IN (SELECT T3.property_id FROM User_Property_History AS T3 JOIN Users AS T4 ON T3.user_id = T4.user_id GROUP BY T3.user_id HAVING COUNT(*) <= 2)
SELECT T1.user_category_code, T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING COUNT(*) = 1
SELECT T1.user_id, T1.user_category_code FROM Users AS T1 WHERE T1.user_id NOT IN (SELECT T2.user_id FROM User_Searches AS T2 GROUP BY T2.user_id HAVING count(*) > 1)
SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code JOIN User_Searches AS T3 ON T2.user_id = T3.user_id ORDER BY T3.search_datetime ASC LIMIT 1
SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code JOIN User_Searches AS T3 ON T2.user_id = T3.user_id ORDER BY T3.search_datetime LIMIT 1
SELECT login_name FROM Users WHERE age_category_code = "Senior Citizen" ORDER BY first_name
SELECT login_name FROM Users WHERE age_category_code = 'Senior Citizen' ORDER BY first_name
SELECT count(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = 1)
SELECT count(*) FROM user_searches AS t1 JOIN users AS t2 ON t1.user_id = t2.user_id WHERE t2.is_buyer = '1'
SELECT T1.line_1_number_building, T1.line_2_number_street, T1.line_3_area_locality, T1.town_city, T1.zip_postcode, T1.county_state_province, T1.country, T1.other_address_details FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T2.property_id = 10000001
SELECT date_registered FROM Users WHERE login_name = 'ratione'
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.login_name FROM Users AS T1 WHERE T1.is_seller = 1
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 'Y'
SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE age_category_code = "Senior Citizen"
SELECT T1.line_1_number_building, T1.line_2_number_street, T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.age_category_code = "senior citizen"
SELECT count(*) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING count(*) >= 2)
SELECT COUNT(*) FROM Properties AS T1 JOIN Property_Features AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id HAVING COUNT(*) >= 2
SELECT property_id, COUNT(*) FROM Property_Photos GROUP BY property_id
SELECT property_id, COUNT(*) FROM Property_Photos GROUP BY property_id
SELECT T1.owner_user_id, count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id = T2.property_id GROUP BY T1.owner_user_id
SELECT T1.owner_user_id, count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id = T2.property_id GROUP BY T1.owner_user_id
SELECT sum(vendor_requested_price) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id = T2.user_id WHERE T2.user_category_code = 'Single Mother' OR T2.user_category_code = 'Student'
SELECT sum(vendor_requested_price) as total_max_price FROM Properties WHERE owner_user_id IN ( SELECT user_id FROM Users WHERE user_category_code ='single mother' UNION SELECT user_id FROM Users WHERE user_category_code ='student' )
SELECT datestamp, property_name FROM User_Property_History ORDER BY datestamp
SELECT datestamp, property_name FROM User_Property_History ORDER BY datestamp
SELECT T1.property_type_code, T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1
SELECT Ref_Property_Types.property_type_code, Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code GROUP BY Ref_Property_Types.property_type_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = "Over 60"
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = "Over 60"
SELECT room_size, count(*) FROM Rooms GROUP BY room_size
SELECT Room_Size, COUNT(*) FROM Rooms GROUP BY Room_Size
SELECT country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.first_name = "Robbie"
SELECT T1.country FROM addresses AS T1 JOIN users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.first_name = "Robbie"
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id JOIN Addresses AS T3 ON T2.property_address_id = T3.address_id JOIN User_Property_History AS T4 ON T2.property_id = T4.property_id JOIN Rooms AS T5 ON T2.property_id = T5.property_id JOIN User_Searches AS T6 ON T1.user_id = T6.user_id WHERE T3.city = 'Damianfort' AND T5.room_type_code = 'Studio' AND T6.search_string = 'Studio apartment in Damianfort'
SELECT T1.first_name, T1.last_name FROM Users AS T1 JOIN Addresses AS T2 ON T1.user_address_id = T2.address_id JOIN Properties AS T3 ON T1.user_id = T3.owner_user_id
SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT user_id FROM User_Property_History)
SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT user_id FROM User_Property_History)
SELECT T1.last_name, T1.user_id FROM Users AS T1 JOIN User_Property_History AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING count(*) >= 2 INTERSECT SELECT T1.last_name, T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING count(*) <= 2
SELECT T1.last_name, T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING count(*) <= 2 INTERSECT SELECT T1.last_name, T1.user_id FROM Users AS T1 JOIN User_Property_History AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING count(*) >= 2
SELECT count(*) FROM bike WHERE weight > 780
SELECT Answer: /* Answer the following: List the names of the cyclists who own a bike and the year they bought it. */ SELECT
SELECT heat, name, nation FROM cyclist
SELECT max(weight), min(weight) FROM bike
SELECT avg(price) FROM bike WHERE material = 'Carbon CC'
SELECT name, result FROM cyclist WHERE nation!= 'Russia'
SELECT DISTINCT T1.id, T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id WHERE T2.purchase_year > 2015
SELECT T1.id, T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id WHERE T1.material = 'racing' GROUP BY T1.id HAVING count(*) >= 4
SELECT T1.id, T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.nation = 'Russia' OR T3.nation = 'Great Britain'
SELECT count(DISTINCT heat) FROM cyclist
SELECT count(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)
SELECT T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.result > "4:21.558" AND T1.material = "racing"
SELECT T1.product_name, T1.price FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.name = 'Bradley Wiggins' INTERSECT SELECT T1.product_name, T1.price FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.name = 'Antonio Tauler'
SELECT T1.name, T1.nation, T1.result FROM cyclist AS T1 LEFT JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id WHERE T2.cyclist_id IS NULL
SELECT product_name FROM bike WHERE material LIKE "%fiber%"
SELECT T1.id, T1.name, count(*) FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id GROUP BY T1.id ORDER BY T1.id
SELECT /* Answer the following: What is the most expensive cake and its flavor? */ SELECT
SELECT T1.Id, T1.Flavor FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Price = (SELECT max(Price) FROM goods)
SELECT T1.Id, T1.Flavor FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item JOIN receipts AS T3 ON T3.ReceiptNumber = T2.Receipt WHERE T1.Food = 'cookie' ORDER BY T1.Price LIMIT 1
SELECT T1.id, T1.flavor FROM goods AS T1 JOIN items AS T2 ON T1.id = T2.item WHERE T1.food = 'cookie' ORDER BY T1.price LIMIT 1
SELECT Id FROM goods WHERE Flavor = "apple"
SELECT Id FROM goods WHERE Flavor = "apple"
SELECT T1.Id FROM goods AS T1 WHERE T1.Price < 3
SELECT T1.Id FROM goods AS T1 WHERE T1.Price < 3
SELECT /* Answer the following: List the distinct ids of all customers who bought a cake with lemon flavor? */ SELECT
SELECT /* Answer the following: What are the distinct ids of customers who bought lemon flavored cake? */ SELECT
SELECT SELECT
SELECT /* Answer the following: What is the average price of each food? */ SELECT /* Answer the following: What is the total amount spent by each customer? */ SELECT /* Answer the following: What is the total amount spent by each customer, including tax? */ SELECT /* Answer the following: What is the total amount spent on food by each customer, including tax? */ SELECT /* Answer the following: What is the total amount spent on non-food items by each customer, including tax? */ SELECT /* Answer the following: What is the most popular food? */ SELECT /* Answer the following: What is the most popular non-food item? */ SELECT /* Answer the following: What is the most expensive food? */ SELECT /* Answer the following: What is the most expensive non-food item? */ SELECT /* Answer the following: What is the average price of each food? */ SELECT /* Answer the following: What is the average price of each non-food item? */ SELECT /* Answer the following: What is
SELECT T1.Id FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt WHERE T3.Item = 'Bread' GROUP BY T1.Id HAVING count(*) >= 15
SELECT T1.CustomerId FROM receipts AS T1 GROUP BY T1.CustomerId HAVING COUNT(*) >= 15
SELECT T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt GROUP BY T1.Id HAVING count(*) > 10
SELECT T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt WHERE T3.Item = 'Bread' GROUP BY T1.Id HAVING count(*) > 10
SELECT COUNT(DISTINCT "Flavor") FROM "goods" WHERE "Food" = "Cake"
SELECT COUNT(DISTINCT "Flavor") FROM "goods"
SELECT DISTINCT t1.Flavor FROM goods AS t1 JOIN items AS t2 ON t1.Id = t2.Item WHERE t2.Item = "Croissant"
SELECT T2.Flavor FROM items AS T1 JOIN goods AS T2 ON T1.Item = T2.Id WHERE T1.Item = "croissant"
SELECT DISTINCT T3.Item FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T3.Id = T2.Item WHERE T1.CustomerId = 15
SELECT DISTINCT T3.Item FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T1.CustomerId = 15
SELECT Flavor, avg(Price), max(Price), min(Price) FROM goods GROUP BY Flavor
SELECT Food, avg(Price), min(Price), max(Price) FROM goods GROUP BY Food
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = 'Cake' INTERSECT SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = 'Cookie'
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = 'Cake' INTERSECT SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = 'Cookie'
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN customers AS T3 ON T1.CustomerId = T3.Id WHERE T3.LastName = "LOGAN" AND T2.Item = "Croissant"
SELECT AVG(Price) FROM goods WHERE Flavor = "Grape" /* Answer the following: What is the flavor of the item with the highest price in the database? */ SELECT Flavor FROM goods ORDER BY Price DESC LIMIT 1 /* Answer the following: What is the total cost of the receipt with the highest number in the database? */ SELECT SUM(T1.Price) FROM items AS T1 JOIN receipts AS T2 ON T1.Receipt = T2.ReceiptNumber WHERE T2.ReceiptNumber = (SELECT MAX(ReceiptNumber) FROM receipts) /* Answer the following: What is the last name of the customer who made the purchase on the 1st of May? */ SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId = T2.Id WHERE T1.Date = "1st of May" /* Answer the following: What is the name of the item purchased by the customer with the last name Logan? */ SELECT T3.Item FROM receipts AS T1 JOIN customers AS T2
SELECT T1.ReceiptNumber, T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = (SELECT Item FROM goods ORDER BY Price DESC LIMIT 1)
SELECT T1.ReceiptNumber, T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = (SELECT goods.Id FROM goods ORDER BY Price DESC LIMIT 1)
SELECT T3.Item FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id GROUP BY T3.Item ORDER BY count(*) LIMIT 1
SELECT Answer: /* Answer the following: What is the average price of each food? */ SELECT Answer: /* Answer the following: What is the average price of each flavor? */ SELECT Answer: /* Answer the following: What is the total amount spent on food? */ SELECT Answer: /* Answer the following: What is the total amount spent on flavors? */ SELECT Answer: /* Answer the following: What is the total amount spent on each food? */ SELECT Answer: /* Answer the following: What is the total amount spent on each flavor? */ SELECT Answer: /* Answer the following: What is the most popular food? */ SELECT Answer: /* Answer the following: What is the most popular flavor? */ SELECT Answer:
SELECT Food, COUNT(*) FROM Goods GROUP BY Food
SELECT Food, COUNT(*) FROM goods GROUP BY Food
SELECT avg(Price), Food FROM goods GROUP BY Food
SELECT
SELECT T1.Id FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item JOIN receipts AS T3 ON T3.ReceiptNumber = T2.Receipt WHERE T1.Flavor = 'Apricot' AND T1.Price < 5
SELECT /* Answer the following: What is the average price of goods that have chocolate flavor? */ SELECT AVG(Price) FROM goods WHERE Flavor = "Chocolate" /* Answer the following: What is the average price of goods that have chocolate or strawberry flavor? */ SELECT AVG(Price) FROM goods WHERE Flavor = "Chocolate" OR Flavor = "Strawberry" /* Answer the following: What is the average price of goods that have chocolate or strawberry flavor and are also food? */ SELECT AVG(Price) FROM goods WHERE Flavor = "Chocolate" OR Flavor = "Strawberry" AND Food = 1 /* Answer the following: What is the average price of goods that have chocolate or strawberry flavor and are also food? */ SELECT AVG(Price) FROM goods WHERE Flavor = "Chocolate" OR Flavor = "Strawberry" AND Food = 1 /* Answer the following: What is the average price of goods that have cho
SELECT T1.Flavor FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item JOIN receipts AS T3 ON T2.Receipt = T3.ReceiptNumber WHERE T1.Price > 10 AND T1.Food = "Cake"
SELECT T1.Flavor FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item JOIN receipts AS T3 ON T3.ReceiptNumber = T2.Receipt WHERE T1.Price > 10 AND T1.Food = "cake"
SELECT distinct Id, Price from goods WHERE Price <= (SELECT avg(Price) from goods)
SELECT /* Answer the following: What are the distinct ids and prices for goods that cost less than the average good? */ SELECT
SELECT DISTINCT Name FROM WINE WHERE Price > (SELECT min(Price) FROM wine WHERE Winery = "John Anthony")
SELECT /* Answer the following: What is the average price of all goods? */ SELECT AVG(Price) FROM goods /* Answer the following: What is the average price of all goods? */ SELECT AVG(Price) FROM goods /* Answer the following: What is the average price of all goods? */ SELECT AVG(Price) FROM goods /* Answer the following: What is the average price of all goods? */ SELECT AVG(Price) FROM goods /* Answer the following: What is the average price of all goods? */ SELECT AVG(Price) FROM goods /* Answer the following: What is the average price of all goods? */ SELECT AVG(Price) FROM goods /* Answer the following: What is the average price of all goods? */ SELECT AVG(Price) FROM goods /* Answer the following: What is the average price of all goods? */ SELECT AVG(Price) FROM goods /* Answer the following: What is the average price of all goods? */ SELECT AVG(Price) FROM goods
SELECT /* Answer the following: List the names of customers who have bought at least one good that is not cheap. */ SELECT /* Answer the following: List the names of customers who have bought at least one good that is not cheap. */ SELECT /* Answer the following: List the names of customers who have bought at least one good that is not cheap. */ SELECT /* Answer the following: List the names of customers who have bought at least one good that is not cheap. */ SELECT /* Answer the following: List the names of customers who have bought at least one good that is not cheap. */ SELECT /* Answer the following: List the names of customers who have bought at least one good that is not cheap. */ SELECT /* Answer the following: List the names of customers who have bought at least one good that is not cheap. */ SELECT /* Answer the following: List the names of customers who have bought at least one good that is not che
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Price > 13
SELECT T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Price > 15
SELECT T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item IN (SELECT T3.Id FROM goods AS T3 WHERE T3.Price > 15)
SELECT /* Answer the following: List all the Store_Name of drama workshop groups. */ SELECT Store_Name FROM Drama_Workshop_Groups /* Answer the following: Give me a list of all the service names sorted alphabetically. */ SELECT service_name FROM services ORDER BY service_name /* Answer the following: List all the log ids and their descriptions from the problem logs. */ SELECT problem_log_id, log_entry_description FROM problem_log /* Answer the following: What are the entry names of catalog with the attribute possessed by most entries. */ SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1) /* Answer the following: Give me a list of all the last names
SELECT Id FROM goods WHERE Id LIKE "%APP%"
SELECT T2.Price FROM items AS T1 JOIN goods AS T2 ON T1.Item = T2.Id WHERE T1.Item = "70"
SELECT Id, Price FROM goods WHERE Id LIKE "%70%"
SELECT LastName FROM customers ORDER BY LastName
SELECT LastName FROM customers ORDER BY LastName
SELECT Id FROM goods ORDER BY Id
SELECT DISTINCT Id FROM goods /* Answer the following: Order the distinct customer ids. */ SELECT DISTINCT Id FROM customers /* Answer the following: Order the distinct receipt numbers. */ SELECT DISTINCT ReceiptNumber FROM receipts /* Answer the following: Order the distinct item names. */ SELECT DISTINCT Item FROM items /* Answer the following: Order the distinct last names. */ SELECT DISTINCT LastName FROM customers /* Answer the following: Order the distinct first names. */ SELECT DISTINCT FirstName FROM customers /* Answer the following: Order the distinct flavors. */ SELECT DISTINCT Flavor FROM goods /* Answer the following: Order the distinct foods. */ SELECT DISTINCT Food FROM goods /* Answer the following: Order the distinct prices. */ SELECT DISTINCT Price FROM goods /* Answer the following: Order the distinct receipt numbers. */ SELECT DISTINCT ReceiptNumber FROM receipts /* Answer the following: Order the distinct dates. */ SELECT DISTINCT Date FROM receipts /* Answer the following: Order the distinct customer ids. */ SELECT DISTINCT CustomerId FROM receipts /* Answer the following: Order
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = "apple flavor pie" UNION SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T1.CustomerId = 12
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = (SELECT Id FROM goods WHERE Flavor = "apple" AND Food = "pie") OR T1.CustomerId = 12
SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1
SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts)
SELECT /* Given the following database schema: */ CREATE TABLE "customers" ( "Id" INTEGER PRIMARY KEY, "LastName" TEXT, "FirstName" TEXT ) CREATE TABLE "goods" ( "Id" TEXT PRIMARY KEY, "Flavor" TEXT, "Food" TEXT, "Price" REAL ) CREATE TABLE "items" ( "Receipt" INTEGER, "Ordinal" INTEGER, "Item" TEXT, PRIMARY KEY(Receipt, Ordinal), FOREIGN KEY (Item) REFERENCES goods(Id) ) CREATE TABLE "receipts" ( "ReceiptNumber" INTEGER PRIMARY KEY, "Date" TEXT, "CustomerId" INTEGER, FOREIGN KEY(CustomerId) REFERENCES customers(Id) ) Question: /* Answer the following: Find all receipts which either has the earliest date or has a good with price above 10. */ SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) UNION SELECT t1.ReceiptNumber FROM receipts AS t1 JOIN items AS t2 ON t1.
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item IN (SELECT Id FROM goods WHERE Price > 10) OR T1.Date = (SELECT Date FROM receipts ORDER BY Date LIMIT 1)
SELECT T1.Id FROM goods AS T1 WHERE T1.Price BETWEEN 3 AND 7 AND T1.Food = 'Cookie' INTERSECT SELECT T1.Id FROM goods AS T1 WHERE T1.Price BETWEEN 3 AND 7 AND T1.Food = 'Cake'
SELECT /* Answer the following: What is the total cost of all the items in the receipt with id 1? */ SELECT /* Answer the following: What is the total cost of all the items in the receipt with id 1? */ SELECT /* Answer the following: What is the total cost of all the items in the receipt with id 1? */ SELECT /* Answer the following: What is the total cost of all the items in the receipt with id 1? */ SELECT /* Answer the following: What is the total cost of all the items in the receipt with id 1? */ SELECT /* Answer the following: What is the total cost of all the items in the receipt with id 1? */ SELECT /* Answer the following: What is the total cost of all the items in the receipt with id 1? */ SELECT /* Answer the following: What is the total cost of all the items in the receipt with id 1? */ SELECT /* Answer the following: What is the total cost of
SELECT T1.FirstName, T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId ORDER BY T2.Date ASC LIMIT 1
SELECT T1.FirstName, T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId ORDER BY T2.Date ASC LIMIT 1
SELECT AVG(Price) FROM goods WHERE Flavor = "Blackberry" OR Flavor = "Blueberry"
SELECT AVG(Price) FROM goods WHERE Flavor = "Blackberry" OR Flavor = "Blueberry"
SELECT MIN(T1.Price) FROM goods AS T1 WHERE T1.Flavor = "Cheese"
SELECT T1.Id, T1.Price FROM goods AS T1 WHERE T1.Flavor = 'Cheese' ORDER BY T1.Price ASC LIMIT 1
SELECT /* Answer the following: What are the names of customers who bought at least one item with the flavor "Chocolate"? */ SELECT T1.LastName, T1.FirstName FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt WHERE T3.Item IN (SELECT Id FROM goods WHERE Flavor = "Chocolate") /* Answer the following: What is the name of the customer who bought the most items? */ SELECT T1.LastName, T1.FirstName FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt GROUP BY T1.Id ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the customer who bought the most expensive item? */ SELECT T1.LastName, T1.FirstName FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2
SELECT Flavor, MAX(Price), MIN(Price), AVG(Price) FROM goods GROUP BY Flavor ORDER BY Flavor
SELECT min(Price), max(Price), Food FROM goods GROUP BY Food ORDER BY Food
SELECT min(Price), max(Price), Food FROM goods WHERE Food IS NOT NULL GROUP BY Food ORDER BY Food
SELECT Date, COUNT(*) FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3
SELECT T2.Flavor FROM items AS T1 JOIN goods AS T2 ON T1.Item = T2.Id GROUP BY T2.Flavor ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.LastName, T1.FirstName, COUNT(*) FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.customer_id, COUNT(*) FROM customers AS T1 JOIN receipts AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date
SELECT Date, COUNT(*) FROM receipts GROUP BY Date
SELECT T1.FirstName, T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt JOIN goods AS T4 ON T3.Item = T4.Id WHERE T4.Flavor = "apple" AND T4.Food = "Tart"
SELECT T1.FirstName, T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt WHERE T3.Item IN (SELECT T4.Id FROM goods AS T4 WHERE T4.Flavor = 'apple' AND T4.Food = 'Tarts')
SELECT T1.Id FROM goods AS T1 WHERE T1.Price < (SELECT T2.Price FROM goods AS T2 WHERE T2.Id = "Croissant")
SELECT /* Answer the following: What are the codes and names of the cheapest products in each category? */ SELECT code, name, min(price) FROM products GROUP BY name /* Answer the following: What are the first and last names of the customers with the 10 cheapest invoices? */ SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10
SELECT T1."Id" FROM "goods" AS T1 WHERE T1."Food" = 'Cake' AND T1."Price" >= ( SELECT AVG("Price") FROM "goods" WHERE "Food" = 'Tart' )
SELECT /* Answer the following: What is the average price of each flavor of cake? */ SELECT /* Answer the following: What is the average price of each food of cake? */ SELECT /* Answer the following: What is the average price of each flavor of cake? */ SELECT /* Answer the following: What is the average price of each food of cake? */ SELECT /* Answer the following: What is the average price of each flavor of cake? */ SELECT /* Answer the following: What is the average price of each food of cake? */ SELECT /* Answer the following: What is the average price of each flavor of cake? */ SELECT /* Answer the following: What is the average price of each food of cake? */ SELECT /* Answer the following: What is the average price of each flavor of cake? */ SELECT /* Answer the following: What is the average price of each food of cake? */ SELECT /* Answer the following: What is
SELECT Id FROM goods WHERE Price > 2 * (SELECT avg(Price) FROM goods)
SELECT /* Answer the following: List the names of customers who have bought goods that are more expensive than the average price of all goods. */ SELECT /* Answer the following: List the names of customers who have bought goods that are more expensive than the average price of all goods. */ SELECT /* Answer the following: List the names of customers who have bought goods that are more expensive than the average price of all goods. */ SELECT
SELECT Id, Flavor, Food FROM goods ORDER BY Price
SELECT Id, Flavor, Food FROM goods ORDER BY Price
SELECT T1.Id, T1.Flavor FROM goods AS T1 WHERE T1.Food = "Cakes" ORDER BY T1.Flavor
SELECT T1.Id, T1.Flavor FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item WHERE T2.Receipt = 1 AND T2.Ordinal = 1 ORDER BY T1.Flavor
SELECT T1.Id, T1.Flavor, T1.Food, T1.Price FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Flavor = "Chocolate" GROUP BY T2.Item HAVING count(*) <= 10
SELECT T3.Item FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Flavor = "Chocolate" GROUP BY T3.Item HAVING count(*) <= 10
SELECT T1.Flavor FROM Goods AS T1 JOIN Items AS T2 ON T1.Id = T2.Item WHERE T2.Receipt = (SELECT ReceiptNumber FROM Receipts WHERE Date = '2010-01-01') INTERSECT SELECT T1.Flavor FROM Goods AS T1 JOIN Items AS T2 ON T1.Id = T2.Item WHERE T2.Receipt = (SELECT ReceiptNumber FROM Receipts WHERE Date = '2010-01-02')
SELECT T1.Flavor FROM goods AS T1 WHERE T1.Food = "Cake" EXCEPT SELECT T2.Flavor FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = "Tart"
SELECT T3.Item, T3.Receipt, T3.Ordinal, T2.Price FROM receipts AS T1 JOIN items AS T3 ON T1.ReceiptNumber = T3.Receipt JOIN goods AS T2 ON T3.Item = T2.Id GROUP BY T3.Item ORDER BY COUNT(*) DESC LIMIT 3
SELECT t3.Item, sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t3.Item ORDER BY sum(t3.order_quantity) DESC LIMIT 3
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt GROUP BY T1.ReceiptNumber HAVING sum(T2.Price) > 150
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt GROUP BY T1.ReceiptNumber HAVING sum(T2.Price) > 150
SELECT T1.Id FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt GROUP BY T1.Id, T3.Item HAVING avg(T3.Price) > 5
SELECT T1.Id, T1.LastName, T1.FirstName, T2.Item, T2.Price, T3.ReceiptNumber, T3.Date, T3.CustomerId FROM customers AS T1 JOIN items AS T2 ON T1.Id = T3.CustomerId JOIN receipts AS T3 ON T3.ReceiptNumber = T2.Receipt WHERE T2.Price > 5 GROUP BY T2.Item, T1.Id
SELECT t4.day FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t1.city = "Los Angeles" AND t2.category_name = "Moroccan" AND t3.category_name = "restaurant" GROUP BY t4.day HAVING SUM(t4.count) > 100
SELECT T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = (SELECT T3.Id FROM goods AS T3 WHERE T3.Price = (SELECT max(T4.Price) FROM goods AS T4)) GROUP BY T1.Date HAVING sum(T2.Price) > 100
SELECT count(*) FROM driver
SELECT count(*) FROM driver
SELECT count(*), make FROM driver WHERE points > 150 GROUP BY make
SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make
SELECT Make, avg(Age) FROM driver GROUP BY Make
SELECT avg(Age), Make FROM driver GROUP BY Make
SELECT AVG(Laps) FROM driver WHERE Age < 20
SELECT avg(Laps) FROM driver WHERE Age < 20
SELECT T1.Manager, T1.Sponsor, T1.Car_Owner FROM team AS T1 ORDER BY T1.Car_Owner
SELECT T1.Manager, T1.Sponsor, T1.Car_Owner FROM team AS T1 ORDER BY T1.Car_Owner
SELECT T1.Make FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Make HAVING COUNT(*) > 1
SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1
SELECT T1.Make FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T3.Car_Owner = "Buddy Arrington"
SELECT T1.Make FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T3.Car_Owner = "Buddy Arrington"
SELECT max(Points), min(Points) FROM driver
SELECT max(Points), min(Points) FROM driver
SELECT count(*) FROM driver WHERE Points < 150
SELECT count(*) FROM driver WHERE Points < 150
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Points DESC
SELECT Driver FROM driver ORDER BY Points DESC
SELECT T1.Driver, T2.Country FROM Driver AS T1 JOIN Country AS T2 ON T1.Country = T2.Country_Id
SELECT T1.Driver, T2.Country FROM driver AS T1 JOIN country AS T2 ON T1.Country = T2.Country_Id
SELECT max(T1.Points) FROM driver AS T1 JOIN country AS T2 ON T1.Country = T2.Country_Id WHERE T2.Capital = "Dublin"
SELECT max(T1.Points) FROM driver AS T1 JOIN country AS T2 ON T1.Country = T2.Country_Id WHERE T2.Capital = "Dublin"
SELECT avg(T1.Age) FROM driver AS T1 JOIN country AS T2 ON T1.Country = T2.Country_Id WHERE T2.Official_native_language = "English"
SELECT avg(T1.Age) FROM Driver AS T1 JOIN Country AS T2 ON T1.Country = T2.Country_Id WHERE T2.Official_native_language = "English"
SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points > 150
SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points > 150
SELECT T3.Capital FROM driver AS T1 JOIN team_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN country AS T3 ON T1.Country = T3.Country_ID ORDER BY T1.Points DESC LIMIT 1
SELECT T1.Country, T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country ORDER BY T2.Points DESC LIMIT 1
SELECT Make, COUNT(*) FROM driver GROUP BY Make
SELECT Make, COUNT(*) FROM driver GROUP BY Make
SELECT T1.Make, COUNT(*) AS Driver_Count FROM driver AS T1 JOIN team_driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Make ORDER BY Driver_Count DESC LIMIT 1
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1
SELECT T3.Make FROM driver AS T1 JOIN team_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN team AS T3 ON T2.Team_ID = T3.Team_ID GROUP BY T3.Make HAVING COUNT(*) >= 3
SELECT Make FROM driver GROUP BY Make HAVING count(*) >= 3
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = "Dodge" INTERSECT SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = "Chevrolet"
SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Dodge' INTERSECT SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Chevrolet'
SELECT sum(Points), avg(Points) FROM driver
SELECT sum(T1.Points), avg(T1.Points) FROM driver AS T1
SELECT "Country" FROM "country" WHERE "Country_Id" NOT IN (SELECT "Country" FROM "driver")
SELECT /* Answer the following: Which countries do not have any drivers? */ SELECT /* Answer the following: Which countries do not have any drivers? */ SELECT
SELECT T1.Manager, T1.Sponsor FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Manager, T1.Sponsor FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID ORDER BY count(*) DESC LIMIT 1
SELECT T1.Manager, T1.Car_Owner FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID HAVING count(*) >= 2
SELECT T1.Team, T1.Manager, T1.Car_Owner FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID HAVING COUNT(*) >= 2
SELECT count(*) FROM institution
SELECT count(*) FROM institution
SELECT Name FROM institution ORDER BY Name ASC
SELECT DISTINCT Name FROM WINE ORDER BY Name
SELECT Name FROM institution ORDER BY Founded
SELECT Name FROM institution ORDER BY Founded
SELECT City, Province FROM institution
SELECT City, Province FROM institution
SELECT max(Enrollment), min(Enrollment) FROM institution
SELECT max(Enrollment), min(Enrollment) FROM institution
SELECT Affiliation FROM institution WHERE City!= 'Vancouver'
SELECT Name, Team, Founded, Endowment, Stadium, Capacity FROM institution WHERE City!= "Vancouver"
SELECT T1.Stadium FROM institution AS T1 ORDER BY T1.Capacity DESC
SELECT Stadium FROM institution ORDER BY Capacity DESC
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1
SELECT Name, Nickname FROM institution
SELECT T1.Name, T2.Nickname FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID
SELECT Nickname FROM Championship AS t1 JOIN institution AS t2 ON t1.Institution_ID = t2.Institution_ID WHERE Enrollment = (SELECT MIN(Enrollment) FROM institution)
SELECT Nickname FROM Championship ORDER BY Joined ASC LIMIT 1
SELECT T1.Name FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Number_of_Championships DESC
SELECT T1.Name FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Number_of_Championships DESC
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship)
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship GROUP BY Institution_ID HAVING COUNT(*) >= 1)
SELECT sum(Number_of_Championships) FROM Championship AS T1 JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Affiliation = 'Public'
SELECT COUNT(*) FROM Championship AS T1 JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Affiliation = "Public"
SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation
SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1
SELECT Founded, COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*) > 1
SELECT Nickname FROM Championship ORDER BY Capacity DESC
SELECT Nickname FROM Championship ORDER BY Number_of_Championships DESC
SELECT sum(Enrollment) FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'
SELECT Enrollment FROM institution WHERE City = "Vancouver" OR City = "Calgary"
SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950
SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950
SELECT COUNT(DISTINCT Province) FROM institution
SELECT COUNT(DISTINCT Province) FROM institution
SELECT * FROM Warehouses
SELECT /* Answer the following: What is all the information about the boxes? */
SELECT DISTINCT Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'New York'
SELECT DISTINCT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = "New York"
SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Value > 150
SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Value > 150
SELECT T1.Code, avg(T2.Value) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT T1.Code, T1.Location, T1.Capacity, avg(T2.Value) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT avg(Value), sum(Value) FROM Boxes
SELECT avg(Value), sum(Value) FROM Boxes
SELECT avg(Capacity), sum(Capacity) FROM Warehouses
SELECT avg(Capacity), sum(Capacity) FROM Warehouses
SELECT Contents, avg(Value), max(Value) FROM Boxes GROUP BY Contents
SELECT T1.Contents, avg(T1.Value), max(T1.Value) FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T1.Contents
SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T1.Contents ORDER BY SUM(T1.Value) DESC LIMIT 1
SELECT T1.Contents, T1.Value, T2.Location, T2.Capacity FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T1.Contents ORDER BY T1.Value DESC LIMIT 1
SELECT avg(Value) FROM Boxes
SELECT avg(Value) FROM Boxes
SELECT DISTINCT Contents FROM Boxes
SELECT DISTINCT Contents FROM Boxes
SELECT COUNT(DISTINCT Contents) FROM Boxes
SELECT COUNT(DISTINCT Contents) FROM Boxes
SELECT DISTINCT Location FROM Warehouses
SELECT /* Answer the following: What is the average value of boxes in each warehouse? */
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')
SELECT sum(T1.Value) FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'Chicago' OR T2.Location = 'New York'
SELECT sum(Value) FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'Chicago' OR T2.Location = 'New York'
SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'Chicago' INTERSECT SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'New York'
SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'Chicago' INTERSECT SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'New York'
SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = "New York"
SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'New York' EXCEPT SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'New York'
SELECT Location FROM Warehouses AS t1 JOIN Boxes AS t2 ON t1.Code = t2.Warehouse WHERE t2.Contents = 'Rocks' INTERSECT SELECT Location FROM Warehouses AS t1 JOIN Boxes AS t2 ON t1.Code = t2.Warehouse WHERE t2.Contents = 'Scissors'
SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks' INTERSECT SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Scissors'
SELECT T1.Code, T1.Location, T1.Capacity FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = "Rocks" OR T2.Contents = "Scissors"
SELECT DISTINCT T1.Code FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = "Rocks" OR T2.Contents = "Scissors"
SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks' INTERSECT SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Scissors'
SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = "Rocks and Scissors"
SELECT Code, Contents FROM Boxes ORDER BY Value
SELECT Code, Contents FROM Boxes ORDER BY Value
SELECT Code, Contents FROM Boxes ORDER BY Value LIMIT 1
SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT avg(Value) FROM Boxes)
SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Value > (SELECT avg(Value) FROM Boxes)
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC
SELECT Code FROM Boxes WHERE Value > (SELECT min(Value) FROM Boxes WHERE Contents = 'Rocks')
SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')
SELECT Code, Contents FROM Boxes WHERE Value > (SELECT max(Value) FROM Boxes WHERE Contents = 'Scissors')
SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors')
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1)
SELECT sum(Value) FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code ORDER BY T2.Capacity DESC LIMIT 1
SELECT T1.Code, AVG (T1.Value) FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T1.Code HAVING AVG (T1.Value) > 150
SELECT T1.Code, T1.Contents, T1.Value, T1.Warehouse FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T1.Warehouse HAVING avg(T1.Value) > 150
SELECT Contents, sum(Value), count(*) FROM Boxes GROUP BY Contents
SELECT T1.Contents, sum(T1.Value), count(*) FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T1.Contents
SELECT Location, sum(Capacity), avg(Capacity), max(Capacity) FROM Warehouses GROUP BY Location
SELECT Location, sum(Capacity), avg(Capacity), max(Capacity) FROM Warehouses GROUP BY Location
SELECT sum(Capacity) FROM Warehouses
SELECT sum(Capacity) FROM Warehouses
SELECT T1.Location, max(T1.Value) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location
SELECT T1.Location, max(T1.Value) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location
SELECT T1.Code, count(*) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT T1.Code, T1.Location, T1.Capacity, count(*) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT COUNT(DISTINCT Location) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = "Rocks"
SELECT count(DISTINCT T1.Code) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks'
SELECT T1.Code, T2.Location FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code
SELECT T1.Code, T2.Location FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code
SELECT Code FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'Chicago'
SELECT Code FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = "Chicago"
SELECT T1.Code, T1.Location, count(*) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT count(*), T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location
SELECT T1.Location, COUNT(DISTINCT T1.Contents) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location
SELECT T1.Location, count(DISTINCT T2.Contents) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location
SELECT Code FROM Warehouses WHERE Capacity < (SELECT SUM(Value) FROM Boxes WHERE Warehouse = Code)
SELECT Code FROM Warehouses WHERE Capacity < (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Code)
SELECT sum(T1.Value) FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location != "Chicago"
SELECT sum(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = "Chicago")
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC
SELECT University_Name, City, State FROM university ORDER BY University_Name
SELECT COUNT(*) FROM university WHERE State = "Illinois" OR State = "Ohio"
SELECT count(*) FROM university WHERE State IN ('Illinois', 'Ohio')
SELECT max(Enrollment), avg(Enrollment), min(Enrollment) FROM university
SELECT max(Enrollment), avg(Enrollment), min(Enrollment) FROM university
SELECT T1.Team_Name FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Enrollment > ( SELECT avg(Enrollment) FROM overall_ranking )
SELECT T1.Team_Name FROM University AS T1 JOIN Overall_Ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Enrollment > (SELECT avg(Enrollment) FROM University)
SELECT DISTINCT Home_Conference FROM university
SELECT DISTINCT Home_Conference FROM university
SELECT Home_Conference, COUNT(*) FROM university GROUP BY Home_Conference
SELECT T1.Home_Conference, COUNT(*) FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID GROUP BY T1.Home_Conference
SELECT State FROM university GROUP BY State ORDER BY count(*) DESC LIMIT 1
SELECT State, COUNT(*) FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Home_Conference FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID GROUP BY T1.Home_Conference HAVING avg(T2.Enrollment) > 2000
SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING avg(Enrollment) > 2000
SELECT Answer: /* Answer the following: Which university has the highest total research point? */ SELECT Answer: /* Answer the following: Which university has the highest total citation point? */ SELECT Answer: /* Answer the following: Which university has the highest total point? */ SELECT Answer: /* Answer the following: Which university has the highest total home conference point? */ SELECT Answer: /* Answer the following: Which university has the highest total home conference point? */ SELECT Answer: /* Answer the following: Which university has the highest total home conference point? */ SELECT Answer: /* Answer the following: Which university has the highest total home conference point? */ SELECT Answer: /* Answer the following: Which university has the highest total home conference point? */ SELECT Answer: /* Answer the following: Which university has the highest total home conference point? */ SELECT Answer: /* Answer the following: Which university has the highest total home conference point? */ SELECT
SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY COUNT(*) ASC LIMIT 1
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code
SELECT T3.Major_Name, T2.Rank FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T1.University_Name = "Augustana College"
SELECT T1.Rank, T2.Major_Name FROM major_ranking AS T1 JOIN major AS T2 ON T1.Major_ID = T2.Major_ID WHERE T1.University_ID = (SELECT University_ID FROM university WHERE University_Name = 'Augustana College')
SELECT T1.University_Name, T1.City, T1.State FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T2.Rank = 1 AND T3.Major_Name = "Accounting"
SELECT T1.University_Name, T1.City, T1.State FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T2.Rank = 1 AND T3.Major_Name = "Accounting"
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 GROUP BY T1.University_ID ORDER BY count(*) DESC LIMIT 1
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 GROUP BY T1.University_ID ORDER BY count(*) DESC LIMIT 1
SELECT T1.University_Name FROM university AS T1 LEFT JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 AND T2.Major_ID IS NULL
SELECT T1.University_Name FROM university AS T1 LEFT JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank IS NULL
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = "Accounting") INTERSECT SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = "Urban Education")
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' INTERSECT SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Urban Education'
SELECT T1.University_Name, T2.Rank FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State = "Wisconsin"
SELECT University_Name, Rank FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State = "Wisconsin"
SELECT Answer: /* Answer the following: What is the university name with highest total point? */ SELECT Answer: /* Answer the following: What is the major name with highest research point? */ SELECT Answer: /* Answer the following: What is the major name with highest citation point? */ SELECT Answer: /* Answer the following: What is the major name with highest total point? */ SELECT Answer: /* Answer the following: What is the university name with highest reputation point? */ SELECT Answer: /* Answer the following: What is the university name with highest enrollment? */ SELECT Answer: /* Answer the following: What is the university name with the most home conference? */ SELECT Answer:
SELECT Answer: /* Answer the following: What is the name of the university with the most reputation points? */ SELECT Answer: /* Answer the following: What is the name of the university with the most enrollment? */ SELECT Answer: /* Answer the following: What is the name of the university with the most home conference? */ SELECT
SELECT University_Name FROM university ORDER BY Reputation_point
SELECT University_Name FROM university ORDER BY Reputation_point ASC
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = "Accounting" AND T2.Rank >= 3
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = "Accounting" AND T2.Rank >= 3
SELECT sum(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)
SELECT sum(T1.Enrollment) FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank <= 5
SELECT T1.University_Name, T2.Citation_point FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Reputation_point >= 3 /* Answer the following: Find the name and total points of the universities whose reputation points are top 3 and above. */ SELECT T1.University_Name, T2.Total FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Reputation_point >= 3 /* Answer the following: Find the name and total points of the universities whose reputation points are top 3 and above. */ SELECT T1.University_Name, T2.Total FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Reputation_point >= 3 /* Answer the following: Find the name and total points of the univers
SELECT T1.University_Name, T2.Citation_point FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_point DESC LIMIT 3
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2
SELECT /* Given the following database schema: */ CREATE TABLE Movies ( Code INTEGER PRIMARY KEY, Title VARCHAR(255) NOT NULL, Rating VARCHAR(255) ) CREATE TABLE MovieTheaters ( Code INTEGER PRIMARY KEY, Name VARCHAR(255) NOT NULL, Movie INTEGER, FOREIGN KEY (Movie) REFERENCES Movies(Code) ) Question: /* Answer the following: Find the titles of movies that don’t have any rating. */ SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)
SELECT Title FROM Movies WHERE Rating = 'G'
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G'
SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = 'Odeon'
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = "Odeon"
SELECT T1.Title, T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie
SELECT T1.Name, T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code
SELECT count(*) FROM Movies WHERE Rating = "G"
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'
SELECT COUNT(DISTINCT Title) FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie
SELECT COUNT(*) FROM MovieTheaters
SELECT COUNT(DISTINCT T2.Title) FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code
SELECT COUNT(DISTINCT Title) FROM Movies
SELECT COUNT(DISTINCT Name) FROM MovieTheaters
SELECT count(DISTINCT Name) FROM MovieTheaters
SELECT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Title LIKE '%Star%'
SELECT T1.Rating FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Title LIKE '%Citizen%'
SELECT T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = "G" OR T1.Rating = "PG"
SELECT T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G' OR T1.Rating = 'PG'
SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = "Cinema Odeon" OR T1.Name = "Imperial"
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = "Odeon" OR T2.Name = "Imperial"
SELECT /* Given the following database schema: */ CREATE TABLE Movies ( Code INTEGER PRIMARY KEY, Title VARCHAR(255) NOT NULL, Rating VARCHAR(255) ) CREATE TABLE MovieTheaters ( Code INTEGER PRIMARY KEY, Name VARCHAR(255) NOT NULL, Movie INTEGER, FOREIGN KEY (Movie) REFERENCES Movies(Code) ) Question: /* Answer the following: Find the name of the movie that is on in both Odeon and Imperial theaters. */ SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = 'Odeon' INTERSECT SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = 'Imperial'
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = "Odeon" INTERSECT SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = "Imperial"
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')
SELECT Title FROM Movies ORDER BY Title
SELECT Title FROM Movies ORDER BY Title
SELECT Title FROM Movies ORDER BY Rating
SELECT Title FROM Movies ORDER BY Rating
SELECT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T1.Movie ORDER BY count(*) DESC LIMIT 1
SELECT Name, COUNT(*) FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T1.Movie ORDER BY count(*) DESC LIMIT 1
SELECT T2.title FROM movie_theaters AS T1 JOIN movies AS T2 ON T1.movie = T2.code GROUP BY T1.movie ORDER BY count(*) DESC LIMIT 1
SELECT count(*), rating FROM movies GROUP BY rating
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating
SELECT count(*) FROM Movies WHERE Rating IS NOT NULL
SELECT count(*) FROM Movies WHERE Rating IS NOT NULL
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL
SELECT T2.Name FROM MovieTheaters AS T1 JOIN MovieTheaters AS T2 ON T1.Movie = T2.Movie GROUP BY T2.Name
SELECT /* Given the following database schema: */ CREATE TABLE Movies ( Code INTEGER PRIMARY KEY, Title VARCHAR(255) NOT NULL, Rating VARCHAR(255) ) CREATE TABLE MovieTheaters ( Code INTEGER PRIMARY KEY, Name VARCHAR(255) NOT NULL, Movie INTEGER, FOREIGN KEY (Movie) REFERENCES Movies(Code) ) Question: /* Answer the following: Select the name of all movie theaters that are not currently showing a movie. */ SELECT Name FROM MovieTheaters WHERE Movie IS NULL
SELECT Name FROM MovieTheaters EXCEPT SELECT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code
SELECT T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G'
SELECT T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G'
SELECT Title FROM Movies
SELECT Name FROM MovieTheaters
SELECT DISTINCT Rating FROM Movies
SELECT DISTINCT Rating FROM Movies
SELECT * FROM Movies WHERE Rating = "null"
SELECT * FROM Movies WHERE Rating = "unrated"
SELECT Title FROM Movies EXCEPT SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code
SELECT Title FROM Movies EXCEPT SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code
SELECT /* Answer the following: Who sent the heaviest package? */
SELECT T3.Name FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.Shipment JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber ORDER BY T1.Weight DESC LIMIT 1
SELECT sum(t1.weight) FROM package AS t1 JOIN shipment AS t2 ON t1.shipment = t2.shipment JOIN client AS t3 ON t1.sender = t3.accountnumber WHERE t3.name = "Leo Wong"
SELECT sum(T1.weight) FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = "Leo Wong"
SELECT Position FROM Employee WHERE Name = "Amy Wong"
SELECT Position FROM Employee WHERE Name = "Amy Wong"
SELECT T1.Name, T1.Salary, T1.Position FROM Employee AS T1 WHERE T1.Name = "Turanga Leela"
SELECT T1.Name, T1.Salary, T1.Position FROM Employee AS T1 WHERE T1.Name = "Turanga Leela"
SELECT avg(Salary) FROM Employee WHERE Position = 'Intern'
SELECT avg(Salary) FROM Employee WHERE Position = 'Intern'
SELECT Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.Position = "Physician"
SELECT min(T1.Level) FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.Position = "Physician"
SELECT T3.PackageNumber FROM Package AS T3 JOIN Client AS T4 ON T3.Sender = T4.AccountNumber WHERE T4.Name = "Leo Wong"
SELECT count(*) FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = "Leo Wong"
SELECT T3.PackageNumber FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient JOIN Shipment AS T3 ON T2.Shipment = T3.Shipment WHERE T1.Name = "Leo Wong"
SELECT T1.PackageNumber FROM Package AS T1 JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber WHERE T2.Name = 'Leo Wong'
SELECT T1.ShipmentID, T1.Date, T1.Manager, T1.Planet, T2.PackageNumber, T2.Contents, T2.Weight, T2.Sender, T2.Recipient FROM Shipment AS T1 JOIN Package AS T2 ON T1.ShipmentID = T2.Shipment WHERE T2.Sender = (SELECT AccountNumber FROM Client WHERE Name = "Leo Wong") OR T2.Recipient = (SELECT AccountNumber FROM Client WHERE Name = "Leo Wong")
SELECT T1.PackageNumber FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'Leo Wong' INTERSECT SELECT T1.PackageNumber FROM Package AS T1 JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber WHERE T2.Name = 'Leo Wong'
SELECT count(*) FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = "Ogden Wernstrom" JOIN Client AS T3 ON T2.Recipient = T3.AccountNumber WHERE T3.Name = "Leo Wong"
SELECT count(*) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment = T2.shipment_id JOIN client AS T3 ON T1.sender = T3.account_number JOIN client AS T4 ON T1.recipient = T4.account_number WHERE T3.name = "Ogden Wernstrom" AND T4.name = "Leo Wong"
SELECT T3.Contents FROM client AS T1 JOIN package AS T2 ON T1.AccountNumber = T2.Sender JOIN shipment AS T3 ON T3.ShipmentID = T2.Shipment WHERE T1.Name = "John Zoidfarb"
SELECT T3.Contents FROM Shipment AS T1 JOIN Package AS T2 ON T1.ShipmentID = T2.Shipment JOIN Client AS T3 ON T2.Sender = T3.AccountNumber WHERE T3.Name = "John Zoidfarb"
SELECT T3.PackageNumber, T3.Weight FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender JOIN Package AS T3 ON T2.Shipment = T3.Shipment WHERE T1.Name LIKE "%John%"
SELECT T1.PackageNumber, T1.Weight FROM package AS T1 JOIN client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name LIKE 'John%' ORDER BY T1.Weight DESC LIMIT 1
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3
SELECT T1.PackageNumber, T1.Weight FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.Shipment WHERE T2.Date = ( SELECT MAX ( Date ) FROM Shipment ) ORDER BY T1.Weight ASC LIMIT 3
SELECT T3.Name, count(*) FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.Shipment JOIN Client AS T3 ON T1.Sender = T3.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1
SELECT T4.Name, count(*) FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.Shipment JOIN Employee AS T3 ON T2.Manager = T3.Employee JOIN Client AS T4 ON T1.Sender = T4.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1
SELECT T3.Name, count(*) FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.Shipment JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber GROUP BY T1.Recipient ORDER BY count(*) ASC LIMIT 1
SELECT T1.Recipient, count(*) FROM Package AS T1 JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber GROUP BY T1.Recipient ORDER BY count(*) ASC LIMIT 1
SELECT T3.Name FROM Shipment AS T1 JOIN Package AS T2 ON T1.ShipmentID = T2.Shipment JOIN Client AS T3 ON T2.Sender = T3.AccountNumber GROUP BY T2.Sender HAVING COUNT(*) > 1
SELECT T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T2.Sender HAVING COUNT(*) > 1
SELECT Coordinates FROM Planet WHERE Name = "Mars"
SELECT Name FROM Employee WHERE Salary > 100000
SELECT Name, Coordinates FROM Planet ORDER BY Name
SELECT Name, Coordinates FROM Planet ORDER BY Name
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = "Phillip J. Fry")
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J Fry')
SELECT Answer: /* Answer the following: List the names of all employees who are not managers. */ SELECT Answer: /* Answer the following: List the names of all employees who are not managers and have a salary greater than 10000. */ SELECT Answer: /* Answer the following: List the names of all employees who are managers and have a salary greater than 10000. */ SELECT Answer: /* Answer the following: List the names of all employees who are managers and have a salary greater than 10000. */ SELECT Answer: /* Answer the following: List the names of all employees who are managers and have a salary greater than 10000. */ SELECT Answer: /* Answer the following: List the names of all employees who are managers and have a salary greater than 10000. */ SELECT Answer: /* Answer the following: List the names of all employees who are managers and have a salary greater than 10000. */ SELECT Answer
SELECT Name FROM Employee ORDER BY Salary DESC LIMIT 1 /* Answer the following: What is the name of the planet with the most shipments? */ SELECT T1.Name FROM Planet AS T1 JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.PlanetID ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the employee who has the highest salary in the planet with the most shipments? */ SELECT T1.Name FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee JOIN Planet AS T3 ON T2.Planet = T3.PlanetID JOIN Shipment AS T4 ON T3.PlanetID = T4.Planet GROUP BY T1.EmployeeID ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the client who sent the heaviest package? */ SELECT T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.Account
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela')
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = "Turanga Leela") AND Planet = (SELECT PlanetID FROM Planet WHERE Name = "Mars")
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = "Mars") OR Manager = (SELECT EmployeeID FROM Employee WHERE Name = "Turanga Leela")
SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID JOIN Has_Clearance AS T3 ON T2.EmployeeID = T3.Employee JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T4.Name = "Mars" AND T2.Name = "Turanga Leela"
SELECT T1.Name, COUNT(*) FROM Planet AS T1 JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.PlanetID
SELECT T1.Name, count(*) FROM Planet AS T1 JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.PlanetID
SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T2.Name ORDER BY count(*) DESC LIMIT 1
SELECT T1.Name, COUNT(*) FROM Employee AS T1 JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager GROUP BY T1.Name
SELECT T1.Manager, count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager
SELECT sum(T4.Weight) FROM Employee AS T1 JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager JOIN Has_Clearance AS T3 ON T2.Planet = T3.Planet JOIN Package AS T4 ON T2.ShipmentID = T4.Shipment WHERE T1.Name = "Joseph C. Kent" AND T3.Level = 2 AND T2.Planet = (SELECT PlanetID FROM Planet WHERE Name = "Mars")
SELECT sum(T1.Weight) FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.Shipment JOIN Planet AS T3 ON T2.Planet = T3.Planet WHERE T3.Name = "Mars"
SELECT T1.Name, sum(T2.Weight) FROM Planet AS T1 JOIN Package AS T2 ON T1.PlanetID = T2.Shipment GROUP BY T1.Name
SELECT T1.Name, sum(T2.Weight) FROM Planet AS T1 JOIN Package AS T2 ON T1.PlanetID = T2.Shipment GROUP BY T1.Name
SELECT T2.Name FROM Package AS T1 JOIN Planet AS T2 ON T1.Shipment = T2.Shipment GROUP BY T2.Name HAVING sum(T1.Weight) > 30
SELECT T2.Name FROM Package AS T1 JOIN Planet AS T2 ON T1.Shipment = T3.Shipment JOIN Shipment AS T3 ON T1.Shipment = T3.Shipment GROUP BY T2.Name HAVING sum(T1.Weight) > 30
SELECT PackageNumber FROM Package WHERE Shipment IN ( SELECT ShipmentID FROM Shipment WHERE Planet = ( SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8' ) ) AND Sender = ( SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan' )
SELECT count(*) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment = T2.shipment_id JOIN employee AS T3 ON T2.manager = T3.employee_id WHERE T3.name = "Zapp Brannigan" AND T2.planet = (SELECT planet_id FROM planet WHERE name = "Omicron Persei 8")
SELECT T3.PackageNumber FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID JOIN Package AS T3 ON T1.ShipmentID = T3.Shipment WHERE T2.Name = "Zapp Brannigan" OR (T1.Planet = (SELECT PlanetID FROM Planet WHERE Name = "Omicron Persei 8") AND T3.Sender = (SELECT AccountNumber FROM Client WHERE Name = "Zapp Brannigan"))
SELECT count(*) FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T4.Name = 'Omicron Persei 8' OR T2.Name = 'Zapp Brannigan'
SELECT T1.PackageNumber, T1.Weight FROM Package AS T1 WHERE T1.Weight > 10 AND T1.Weight < 30
SELECT T1.PackageNumber, T1.Weight FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID WHERE T1.Weight BETWEEN 10 AND 30
SELECT T1.Name FROM Employee AS T1 LEFT JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T2.Planet IS NULL
SELECT Name FROM Employee WHERE NOT EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))
SELECT T1.Name FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T2.Planet = "Omega" AND T2.Level = 3
SELECT T1.Name FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T2.Planet = 3 AND T2.Level = 3
SELECT T2.Name FROM Has_Clearance AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet HAVING COUNT(*) = 1
SELECT T1.Name FROM Planet AS T1 JOIN Has_Clearance AS T2 ON T1.PlanetID = T2.Planet GROUP BY T2.Planet HAVING COUNT(*) = 1
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000
SELECT name FROM Employee WHERE salary > (SELECT avg(salary) FROM Employee) OR salary > 5000
SELECT count(*) FROM Employee WHERE NOT EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = "Mars"))
SELECT count(*) FROM Employee WHERE NOT EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))
SELECT count(*) FROM game
SELECT count(*) FROM game
SELECT T1.Title, T1.Developers FROM game AS T1 ORDER BY T1.Units_sold_Millions DESC
SELECT T1.Title, T1.Developers FROM game AS T1 ORDER BY T1.Units_sold_Millions DESC
SELECT avg(T1.Units_sold_Millions) FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T2.Platform_name != "Nintendo"
SELECT avg(T1.Units_sold_Millions) FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T2.Platform_name != "Nintendo"
SELECT Platform_name, Market_district FROM platform
SELECT platform.Platform_name, platform.Market_district FROM platform
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1
SELECT max(Rank_of_the_year), min(Rank_of_the_year) FROM player
SELECT min(bathroom_count), max(bathroom_count) FROM Apartments /* Answer the following: What is the maximum and minimum height of all players? */ SELECT max(weight), min(weight) FROM Player /* Answer the following: Return the maximum and minimum customer codes. */ SELECT max(customer_code), min(customer_code) FROM Customers /* Answer the following: What are the maximum and minimum week on top of all volumes? */ SELECT max(Weeks_on_Top), min(Weeks_on_Top) FROM volume /* Answer the following: What is the maximum and minimum market value of companies? */ SELECT max(Market_Value_in_Billion), min(Market_Value_in_Billion) FROM company /* Answer the following: What are the maximum and minumum grade points? */ SELECT max(gradepoint), min(gradepoint) FROM GRADECONVERSION /* Answer the following: What are the maximum and
SELECT count(*) FROM player WHERE Rank_of_the_year < 3
SELECT COUNT(*) FROM player WHERE Rank_of_the_year > 3
SELECT name FROM club ORDER BY name DESC /* Answer the following: List all region names in alphabetical order. */ SELECT region_name FROM region ORDER BY region_name /* Answer the following: List all program origins in the alphabetical order. */ SELECT origin FROM program ORDER BY origin /* Answer the following: Please list all album titles in alphabetical order. */ SELECT Title FROM ALBUM ORDER BY Title /* Answer the following: List all the services in the alphabetical order. */ SELECT service_name FROM services ORDER BY service_name /* Answer the following: List all club names in ascending order of start year. */ SELECT name FROM club ORDER BY Start_year ASC /* Answer the following: Show all school names in alphabetical order. */ SELECT school_name FROM school ORDER BY school_name /* Answer the following: List all countries of markets in ascending alphabetical order. */ SELECT Country FROM market ORDER BY Country ASC
SELECT player_name FROM player ORDER BY player_name
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC
SELECT player_name, college FROM player ORDER BY rank_of_the_year DESC
SELECT T1.Player_name, T1.Rank_of_the_year FROM player AS T1 JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID JOIN game AS T3 ON T2.Game_ID = T3.Game_ID WHERE T3.Title = "Super Mario World"
SELECT T1.Player_name, T1.Rank_of_the_year FROM player AS T1 JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID JOIN game AS T3 ON T2.Game_ID = T3.Game_ID WHERE T3.Title = "Super Mario World"
SELECT DISTINCT T4.Developers FROM game_player AS T1 JOIN player AS T2 ON T1.Player_ID = T2.Player_ID JOIN game AS T3 ON T1.Game_ID = T3.Game_ID JOIN platform AS T4 ON T3.Platform_ID = T4.Platform_ID WHERE T2.College = "Auburn"
SELECT DISTINCT T3.Developers FROM game_player AS T1 JOIN player AS T2 ON T1.Player_ID = T2.Player_ID JOIN game AS T3 ON T1.Game_ID = T3.Game_ID WHERE T2.College = "Auburn"
SELECT avg(T1.Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.Position = "Guard"
SELECT avg(T1.Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.Position = "Guard"
SELECT T1.Title, T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID
SELECT T1.Title, T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID
SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T2.Market_district = "Asia" OR T2.Market_district = "USA"
SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T2.Market_district = "Asia" OR T2.Market_district = "USA"
SELECT T2.Franchise, COUNT(*) FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID GROUP BY T2.Franchise
SELECT T1.Franchise, COUNT(*) FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID GROUP BY T1.Franchise
SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1
SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*) >= 2 /* Answer the following: Show the names of counties that have at least two delegates. */ SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT(*) >= 2 /* Answer the following: Show names of pilots that have more than one record. */ SELECT T2.Pilot_name, COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*) > 1 /* Answer the following: Return the names of parties that have two or more events. */ SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id H
SELECT t3.Franchise FROM game AS t1 JOIN game_player AS t2 ON t1.Game_ID = t2.Game_ID JOIN player AS t3 ON t2.Player_ID = t3.Player_ID GROUP BY t3.Franchise HAVING count(*) >= 2
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
SELECT Player_name FROM player EXCEPT SELECT T2.Player_name FROM game_player AS T1 JOIN player AS T2 ON T1.Player_ID = T2.Player_ID
SELECT T3.Title FROM game_player AS T1 JOIN player AS T2 ON T1.Player_ID = T2.Player_ID JOIN game AS T3 ON T1.Game_ID = T3.Game_ID WHERE T2.College = "Oklahoma" INTERSECT SELECT T3.Title FROM game_player AS T1 JOIN player AS T2 ON T1.Player_ID = T2.Player_ID JOIN game AS T3 ON T1.Game_ID = T3.Game_ID WHERE T2.College = "Auburn"
SELECT T3.Title FROM game_player AS T1 JOIN player AS T2 ON T1.Player_ID = T2.Player_ID JOIN game AS T3 ON T1.Game_ID = T3.Game_ID WHERE T2.College = "Oklahoma" OR T2.College = "Auburn"
SELECT DISTINCT Franchise FROM game
SELECT DISTINCT Franchise FROM game
SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))
SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Position = 'Guard')
SELECT T1.Name FROM press AS T1 JOIN book AS T2 ON T1.Press_ID = T2.Press_ID ORDER BY T1.Year_Profits_billion DESC
SELECT Name FROM press ORDER BY Year_Profits_billion DESC
SELECT T1.Name FROM press AS T1 WHERE T1.Year_Profits_billion > 15 OR T1.Month_Profits_billion > 1
SELECT T1.Name FROM press AS T1 WHERE T1.Year_Profits_billion > 15 OR T1.Month_Profits_billion > 1
SELECT avg(Year_Profits_billion), max(Year_Profits_billion) FROM press
SELECT avg(Year_Profits_billion), max(Year_Profits_billion) FROM press
SELECT T1.Name FROM press AS T1 JOIN book AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Name ORDER BY T1.Month_Profits_billion DESC LIMIT 1
SELECT Answer: /* Answer the following: What is the average profit of books released in 2015? */ SELECT Answer: /* Answer the following: Which book series has the highest average profit? Give me the book series name. */ SELECT
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) /* Answer the following: Find the name of the author who has written the most books. */ SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1) /* Answer the following: Find the name of the book series with the highest profit. */ SELECT Book_Series FROM book GROUP BY Book_Series ORDER BY SUM(Sale_Amount) DESC LIMIT 1 /* Answer the following: Find the name of the book series with the lowest profit. */ SELECT Book_Series FROM book GROUP BY Book_Series ORDER BY SUM(Sale_Amount) LIMIT 1 /* Answer the following: Find the name of the author who has written the most books in a specific book series. */ SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = (SELECT
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1 /* Answer the following: What is the title of the book with the highest sale amount? */ SELECT Title FROM book ORDER BY Sale_Amount DESC LIMIT 1 /* Answer the following: What is the title of the book with the lowest sale amount? */ SELECT Title FROM book ORDER BY Sale_Amount LIMIT 1 /* Answer the following: What is the average age of the authors who published a book in the series "The Hunger Games" */ SELECT AVG(Age) FROM author JOIN book ON author.Author_ID = book.Author_ID WHERE Book_Series = "The Hunger Games" /* Answer the following: What is the average monthly profit of the press that publishes the book with the highest sale amount? */ SELECT AVG(Month_Profits_billion) FROM press JOIN book ON press.Press_ID = book.Press_ID ORDER BY Sale_Amount DESC LIMIT 1 /* Answer the following: What is the average monthly profit
SELECT count(*) FROM author WHERE Age < 30
SELECT count(*) FROM author WHERE Age < 30
SELECT Gender, AVG(Age) FROM author GROUP BY Gender
SELECT Gender, AVG(Age) FROM author GROUP BY Gender
SELECT count(*), gender FROM author WHERE age > 30 GROUP BY gender
SELECT Gender, COUNT(*) FROM author WHERE Age > 30 GROUP BY Gender
SELECT Title FROM book ORDER BY Release_date DESC
SELECT Title FROM book ORDER BY Release_date DESC
SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series
SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series
SELECT t1.Title, t1.Release_date FROM book AS t1 WHERE t1.Sale_Amount = (SELECT MAX(t2.Sale_Amount) FROM book AS t2) UNION SELECT t1.Title, t1.Release_date FROM book AS t1 WHERE t1.Sale_Amount = (SELECT MAX(t2.Sale_Amount) FROM book AS t2) UNION SELECT t1.Title, t1.Release_date FROM book AS t1 WHERE t1.Sale_Amount = (SELECT MAX(t2.Sale_Amount) FROM book AS t2) UNION SELECT t1.Title, t1.Release_date FROM book AS t1 WHERE t1.Sale_Amount = (SELECT MAX(t2.Sale_Amount) FROM book AS t2) UNION SELECT t1.Title, t1.Release_date FROM book AS t1 WHERE t1.Sale_Amount = (SELECT MAX(t2.Sale_Amount) FROM book AS t2)
SELECT T1.Title, T1.Release_date FROM Book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.Author_ID JOIN press AS T3 ON T1.Press_ID = T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 5
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount < 500
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount < 500
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = "MM" INTERSECT SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = "LT"
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = "MM" INTERSECT SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = "LT"
SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T2.Author_ID HAVING COUNT(*) > 1
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Author_ID HAVING count(*) > 1
SELECT T3.Title, T2.Name, T4.Name FROM Book AS T3 JOIN author AS T2 ON T3.Author_ID = T2.Author_ID JOIN press AS T4 ON T3.Press_ID = T4.Press_ID ORDER BY T3.Sale_Amount DESC LIMIT 3
SELECT
SELECT T1.Name, SUM(T3.Sale_Amount) FROM press AS T1 JOIN book AS T2 ON T1.Press_ID = T2.Press_ID JOIN book_club AS T3 ON T2.Book_ID = T3.Book_ID GROUP BY T1.Name
SELECT T1.Name, SUM(T3.Sale_Amount) FROM press AS T1 JOIN book AS T2 ON T1.Press_ID = T2.Press_ID JOIN sale AS T3 ON T2.Book_ID = T3.Book_ID GROUP BY T1.Name
SELECT T2.Name, COUNT(*) FROM book AS T1 JOIN press AS T2 ON T1.Press_ID = T2.Press_ID WHERE T1.Sale_Amount > 1000 GROUP BY T1.Press_ID
SELECT T2.Name, COUNT(*) FROM book AS T1 JOIN press AS T2 ON T1.Press_ID = T2.Press_ID WHERE T1.Sale_Amount > 1000 GROUP BY T2.Name
SELECT t1.Name FROM author AS t1 JOIN book AS t2 ON t1.Author_ID = t2.Author_ID GROUP BY t1.Name ORDER BY count(*) DESC LIMIT 1
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T2.Sale_Amount DESC LIMIT 1
SELECT t1.Name, t1.Gender FROM author AS t1 JOIN book AS t2 ON t1.Author_ID = t2.Author_ID GROUP BY t1.Name, t1.Gender ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Name, T1.Gender FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Author_ID ORDER BY count(*) DESC LIMIT 1
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID = (SELECT Press_ID FROM press WHERE Name = "Accor"))
SELECT T1.Name FROM author AS T1 LEFT JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Author_ID IS NULL
SELECT T1.Name, T1.Year_Profits_billion FROM press AS T1 JOIN book AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Press_ID HAVING COUNT(*) > 2
SELECT T1.Name, T1.Year_Profits_billion FROM press AS T1 JOIN book AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Press_ID HAVING COUNT(*) > 2
SELECT count(*) FROM Authors
SELECT author_name FROM Authors
SELECT author_name, other_details FROM Authors
SELECT other_details FROM Authors WHERE author_name = "Addison Denesik"
SELECT Answer: /* Answer the following: Show the number of customers. */ SELECT Answer: /* Answer the following: Show the number of locations. */ SELECT Answer: /* Answer the following: Show the number of projects. */ SELECT Answer: /* Answer the following: Show the number of customer cards. */ SELECT Answer: /* Answer the following: Show the number of card types. */ SELECT Answer: /* Answer the following: Show the number of transaction types. */ SELECT Answer: /* Answer the following: Show the number of document types. */ SELECT
SELECT T1.author_name FROM Documents AS T1 JOIN Documents_Processes AS T2 ON T1.document_id = T2.document_id WHERE T2.document_id = 4
SELECT T1.author_name FROM Documents AS T1 WHERE T1.document_name = "Travel to Brazil"
SELECT count(*) FROM Documents WHERE author_name = "Era Kerluke"
SELECT document_name, document_description FROM Documents
SELECT T1.document_id, T1.document_name FROM Documents AS T1 WHERE T1.author_name = "Bianka Cummings"
SELECT T1.author_name, T1.other_details FROM Documents AS T1 WHERE T1.document_name = "Travel to China"
SELECT T1.author_name, COUNT(*) FROM Documents AS T1 JOIN Documents_Processes AS T2 ON T1.document_id = T2.document_id GROUP BY T1.author_name
SELECT T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name = T2.author_name GROUP BY T1.author_name ORDER BY count(*) DESC LIMIT 1
SELECT T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name = T2.author_name GROUP BY T1.author_name HAVING COUNT(*) >= 2
SELECT count(*) FROM Business_Processes
SELECT T1.next_process_id, T1.process_name, T1.process_description FROM Business_Processes AS T1 WHERE T1.process_id = 9
SELECT T1.process_name FROM Business_Processes AS T1 JOIN Business_Processes AS T2 ON T1.next_process_id = T2.process_id WHERE T2.process_id = 9
SELECT count(*) FROM Process_Outcomes
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes
SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = "working"
SELECT count(*) FROM Process_Status
SELECT process_status_code, process_status_description FROM Process_Status
SELECT process_status_description FROM Process_Status WHERE process_status_code = "ct"
SELECT count(*) FROM Staff
SELECT staff_id, staff_details FROM Staff
SELECT staff_details FROM Staff WHERE staff_id = 100
SELECT count(*) FROM Ref_Staff_Roles
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles
SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = "HR"
SELECT count(DISTINCT document_id) FROM Documents_Processes
SELECT document_id, process_id FROM Documents_Processes
SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_Processes
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes)
SELECT T4.process_outcome_description, T5.process_status_description FROM Documents AS T1 JOIN Documents_Processes AS T2 ON T1.document_id = T2.document_id JOIN Business_Processes AS T3 ON T2.process_id = T3.process_id JOIN Process_Outcomes AS T4 ON T2.process_outcome_code = T4.process_outcome_code JOIN Process_Status AS T5 ON T2.process_status_code = T5.process_status_code WHERE T1.document_id = 0
SELECT T3.process_name FROM Documents AS T1 JOIN Documents_Processes AS T2 ON T1.document_id = T2.document_id JOIN Business_Processes AS T3 ON T2.process_id = T3.process_id WHERE T1.document_name = "Travel to Brazil"
SELECT process_id, count(*) FROM Documents_Processes GROUP BY process_id
SELECT count(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9
SELECT staff_id, count(*) FROM Staff_in_Processes GROUP BY staff_id
SELECT T1.staff_role_code, COUNT(*) FROM Ref_Staff_Roles AS T1 JOIN Staff_in_Processes AS T2 ON T1.staff_role_code = T2.staff_role_code GROUP BY T1.staff_role_code
SELECT T3.process_name FROM Documents AS T1 JOIN Documents_Processes AS T2 ON T1.document_id = T2.document_id JOIN Business_Processes AS T3 ON T2.process_id = T3.process_id WHERE T1.document_id = 1000000
SELECT count(*) FROM Agencies
SELECT count(*) FROM Agencies
SELECT agency_id, agency_details FROM Agencies
SELECT agency_id, agency_details FROM Agencies
SELECT count(*) FROM Clients
SELECT count(*) FROM Clients
SELECT client_id, client_details FROM Clients
SELECT client_id, client_details FROM Clients
SELECT agency_id, count(*) FROM Clients GROUP BY agency_id
SELECT agency_id, COUNT(*) FROM Clients GROUP BY agency_id
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id HAVING count(*) >= 2
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id HAVING count(*) >= 2
SELECT T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.client_details = "Mac"
SELECT T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.client_details = "Mac"
SELECT T1.client_id, T1.client_details, T2.agency_id, T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id
SELECT T1.client_details, T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id
SELECT sic_code, count(*) FROM Clients GROUP BY sic_code
SELECT count(*), sic_code FROM Clients GROUP BY sic_code
SELECT
SELECT T1.client_id, T1.client_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id WHERE T1.sic_code = "Bad"
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id
SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients
SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients
SELECT count(*) FROM Invoices
SELECT count(*) FROM Invoices
SELECT invoice_id, invoice_status, invoice_details FROM Invoices
SELECT invoice_id, invoice_status, invoice_details FROM Invoices
SELECT client_id, count(*) FROM Invoices GROUP BY client_id
SELECT client_id, count(*) FROM Invoices GROUP BY client_id
SELECT T1.client_id, T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.client_id, T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.client_id FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id HAVING COUNT(*) >= 2
SELECT T1.client_id FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id HAVING count(*) >= 2
SELECT invoice_status, count(*) FROM Invoices GROUP BY invoice_status
SELECT invoice_status, count(*) FROM Invoices GROUP BY invoice_status
SELECT invoice_status_code FROM GROUP BY ORDER BY LIMIT 1
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.invoice_status, T1.invoice_details, T2.client_id, T2.client_details, T3.agency_id, T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id JOIN Agencies AS T3 ON T2.agency_id = T3.agency_id
SELECT T1.invoice_status, T1.invoice_details, T2.client_id, T2.client_details, T2.agency_id, T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id JOIN Agencies AS T3 ON T2.agency_id = T3.agency_id
SELECT meeting_type, meeting_type_description FROM Ref_Meeting_Types
SELECT DISTINCT payment_method FROM customers
SELECT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working' )
SELECT payment_id, payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.invoice_status = "Working"
SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN ( SELECT invoice_id FROM Payments )
SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments)
SELECT count(*) FROM Payments
SELECT count(*) FROM Payments
SELECT payment_id, invoice_id, payment_details FROM Payments
SELECT payment_id, invoice_id, payment_details FROM Payments
SELECT DISTINCT invoice_id, payment_status FROM Payments
SELECT DISTINCT invoice_id, invoice_status FROM Payments
SELECT invoice_id, count(*) FROM Payments GROUP BY invoice_id
SELECT invoice_id, COUNT(*) FROM Payments GROUP BY invoice_id
SELECT invoice_id, invoice_status, invoice_details FROM Invoices GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT count(*) FROM Staff
SELECT count(*) FROM staff
SELECT T1.agency_id, COUNT(*) FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id
SELECT agency_id, COUNT(*) FROM Staff GROUP BY agency_id
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT meeting_outcome, count(*) FROM Meetings GROUP BY meeting_outcome
SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome
SELECT client_id, count(*) FROM Meetings GROUP BY client_id
SELECT client_id, count(*) FROM Meetings GROUP BY client_id
SELECT meeting_type, count(*) FROM Meetings GROUP BY meeting_type
SELECT meeting_type, count(*) FROM Meetings GROUP BY meeting_type
SELECT T1.meeting_id, T1.meeting_outcome, T1.meeting_type, T2.client_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id
SELECT T1.meeting_id, T1.meeting_outcome, T1.meeting_type, T2.client_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id
SELECT meeting_id, count(*) FROM Staff_in_Meetings GROUP BY meeting_id
SELECT count(*), meeting_id FROM Staff_in_Meetings GROUP BY meeting_id
SELECT T1.staff_id, COUNT(*) FROM Staff_in_Meetings AS T1 JOIN Meetings AS T2 ON T1.meeting_id = T2.meeting_id GROUP BY T1.staff_id ORDER BY COUNT(*) ASC LIMIT 1
SELECT T1.staff_id FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY COUNT(*) ASC LIMIT 1
SELECT count(DISTINCT staff_id) FROM Staff_in_Meetings
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings
SELECT count(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)
SELECT count(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)
SELECT c.client_id, c.client_details FROM Clients c WHERE c.client_id IN ( SELECT DISTINCT client_id FROM Invoices UNION SELECT DISTINCT client_id FROM Meetings )
SELECT T1.client_id, T1.client_details FROM Clients AS T1 WHERE T1.client_id IN (SELECT T2.client_id FROM Invoices AS T2 UNION SELECT T3.client_id FROM Meetings AS T3)
SELECT T1.staff_id, T1.staff_details FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id WHERE T2.meeting_id IN (SELECT meeting_id FROM Meetings WHERE purpose_of_meeting LIKE "%s%") GROUP BY T1.staff_id
SELECT T1.staff_id, T1.staff_details FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id HAVING count(*) >= 1 AND T1.staff_details LIKE "%s%"
SELECT T1.client_id, T1.sic_code, T2.agency_id FROM Clients AS T1 JOIN Invoices AS T3 ON T1.client_id = T3.client_id JOIN Meetings AS T4 ON T1.client_id = T4.client_id JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.client_id HAVING COUNT(*) >= 1
SELECT T1.client_id, T1.sic_code, T1.agency_id FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id = T2.client_id JOIN Meetings AS T3 ON T1.client_id = T3.client_id GROUP BY T1.client_id HAVING COUNT(*) = 1
SELECT T1.start_date_time, T1.end_date_time, T2.client_details, T3.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id JOIN Staff AS T3 ON T1.meeting_id = T3.meeting_id JOIN Staff_in_Meetings AS T4 ON T3.staff_id = T4.staff_id WHERE T4.meeting_id = T1.meeting_id
SELECT T1.start_date_time, T1.end_date_time, T2.client_details, T3.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id JOIN Staff AS T3 ON T3.staff_id = T4.staff_id
