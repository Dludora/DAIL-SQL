SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS Highest_Eligible_Free_Rate FROM frpm WHERE `County Name` = 'Alameda';
SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS Eligible_Free_Rate, School FROM frpm JOIN schools USING (CDSCode) WHERE `School Type` = 'Continuation' ORDER BY Eligible_Free_Rate ASC LIMIT 3;
SELECT s.Zip FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND s.County = 'Fresno County Office of Education';
SELECT s.* FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode;
SELECT schools.Phone FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 AND schools.OpenDate > '2000-01-01';
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE AvgScrMath > 400 AND Virtual = 'F';
SELECT DISTINCT sch.CDSCode, sch.School AS sname, sch.District AS dname, sch.County AS cname, sch.Magnet FROM schools sch JOIN satscores sat ON sch.CDSCode = sat.cds WHERE sat.NumTstTakr > 500 AND sch.Magnet = 1;
SELECT schools.Phone AS PhoneNumber FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumGE1500 IS NOT NULL ORDER BY satscores.NumGE1500 DESC LIMIT 1;
SELECT s.NumTstTakr FROM frpm AS f JOIN satscores AS s ON f.CDSCode = s.cds WHERE f.`FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm );
SELECT COUNT(*) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.FundingType = 'Charter' GROUP BY T2.School;
SELECT MAX(AvgScrRead) AS MaxReadingScore FROM satscores;
SELECT DISTINCT frpm.CDSCode, schools.School FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE (frpm.`Enrollment (K-12)` + frpm.`Enrollment (Ages 5-17)`) > 500 ORDER BY schools.School;
SELECT MAX(`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS highest_eligible_free_rate FROM frpm JOIN satscores USING (cds) WHERE (NumGE1500 / NumTstTakr) > 0.3;
SELECT schools.Phone AS PhoneNumber FROM satscores JOIN schools ON satscores.CDSCode = schools.CDSCode WHERE satscores.NumTstTakr > 0 ORDER BY (satscores.NumGE1500 / satscores.NumTstTakr) DESC LIMIT 3;
SELECT DISTINCT schools.NCESDist AS `NCES school identification number` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY frpm.`Enrollment (Ages 5-17)` DESC LIMIT 5;
SELECT schools.District AS DistrictName, AVG(satscores.AvgScrRead) AS HighestAverageReadingScore FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.StatusType = 'Active' GROUP BY schools.District ORDER BY HighestAverageReadingScore DESC;
SELECT COUNT(DISTINCT sname) AS NumberOfSchools FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE cname = 'Alameda' AND NumTstTakr < 100;
SELECT sname, CharterNum FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE AvgScrWrite > 499 AND CharterNum IS NOT NULL ORDER BY AvgScrWrite DESC;
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Fresno' AND frpm.`Charter School (Y/N)` = 0 AND satscores.NumTstTakr <= 250 AND satscores.NumTstTakr IS NOT NULL;
SELECT schools.Phone FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY AvgScrMath DESC LIMIT 1;
SELECT COUNT(*) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Amador' AND frpm.Low Grade = '9' AND frpm.High Grade = '12';
SELECT COUNT(DISTINCT T1.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Los Angeles' AND T1.`Free Meal Count (K-12)` > 500 AND T1.`FRPM Count (K-12)` < 700;
SELECT sname AS SchoolName, NumTstTakr AS NumberOfTestTakers FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Contra Costa' ORDER BY NumTstTakr DESC LIMIT 1;
SELECT schools.School AS SchoolName, schools.Street AS StreetAddress FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE ABS(frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) > 30 AND frpm.`Enrollment (K-12)` IS NOT NULL AND frpm.`Enrollment (Ages 5-17)` IS NOT NULL;
SELECT schools.School AS SchoolName FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE (COALESCE(frpm.`Free Meal Count (K-12)`, 0) / COALESCE(frpm.`Enrollment (K-12)`, 0)) > 0.1 AND satscores.NumGE1500 > 0;
SELECT schools.School AS SchoolName, schools.FundingType FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Riverside' AND satscores.AvgScrMath > 400;
SELECT schools.School AS SchoolName, schools.Street AS Street, schools.City AS City, schools.State AS State, schools.Zip AS ZipCode FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Monterey' AND schools.School LIKE '%High School%' AND `Percent (%) Eligible Free (Ages 5-17)` > 800 GROUP BY schools.School;
SELECT s.School AS SchoolName, AVG(scs.AvgScrWrite) AS AverageWritingScore, sch.Phone AS CommunicationNumber FROM frpm f JOIN satscores scs ON f.CDSCode = scs.cds JOIN schools sch ON f.CDSCode = sch.CDSCode WHERE (sch.OpenDate > '1991-01-01' OR sch.ClosedDate < '2000-01-01') GROUP BY s.School;
WITH LocalSchools AS ( SELECT f.cds, s.School AS SchoolName, s.DOCType, (f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) AS EnrollmentDifference FROM frpm f JOIN schools s ON f.cds = s.CDSCode WHERE s.FundingType IS NOT NULL AND s.FundingType = 'Local' -- Assuming FundingType='Local' indicates local funding ) SELECT SchoolName, DOCType FROM LocalSchools WHERE EnrollmentDifference > ( SELECT AVG(EnrollmentDifference) FROM LocalSchools );
SELECT s.OpenDate AS FirstThroughTwelfthGradeSchoolOpeningDate FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY f.enroll12 DESC LIMIT 1;
SELECT City, SUM(`Enrollment (K-12)`) AS Total_Enrollment FROM frpm JOIN schools USING(CDSCode) WHERE `Enrollment (K-12)` IS NOT NULL GROUP BY City ORDER BY Total_Enrollment ASC LIMIT 5;
WITH RankedSchools AS ( SELECT s.CDSCode, sc.School_Name, frpm.[Free Meal Count (K-12)] AS FreeMealCount, frpm.[Enrollment (K-12)] AS Enrollment FROM FRPM frpm JOIN Schools sc ON frpm.CDSCode = sc.CDSCode WHERE frpm.[Enrollment (K-12)] > 0 ORDER BY frpm.[Enrollment (K-12)] DESC ) SELECT ROW_NUMBER() OVER (ORDER BY [Enrollment] DESC) AS Rank, CDSCode, School_Name, FreeMealCount, Enrollment, CASE WHEN Enrollment = 0 THEN NULL ELSE ROUND((FreeMealCount * 100.0 / Enrollment), 2) END AS Eligible_Free_Rate FROM RankedSchools ORDER BY Rank;
SELECT frpm.CDSCode, schools.School AS SchoolName, "FRPM Count (K-12)" AS FreeMealCount, "Enrollment (K-12)" AS Enrollment, ("FRPM Count (K-12)" / "Enrollment (K-12)")::DECIMAL(10, 4) AS FRPMRate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.Charter = '66' ORDER BY FRPMRate DESC LIMIT 5;
SELECT DISTINCT schools.School, schools.Website FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE `Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND `Free Meal Count (Ages 5-17)` IS NOT NULL
SELECT (frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)`) AS Free_Rate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson';
SELECT schools.AdminEmail1 AS Administrator_Email_Address FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 ORDER BY frpm.`Enrollment (K-12)` LIMIT 1;
WITH MaxSAT AS ( SELECT MAX(NumGE1500) as MaxNum FROM satscores ) SELECT schools.AdmFName1, schools.AdmLName1, schools.AdmFName2, schools.AdmLName2, schools.AdmFName3, schools.AdmLName3 FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumGE1500 = MaxSAT.MaxNum;
SELECT s.Street, s.City, s.Zip, s.State FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.NumTstTakr != 0 ORDER BY (ss.NumGE1500 / ss.NumTstTakr) ASC LIMIT 1;
SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T1.NumTstTakr BETWEEN 2000 AND 3000;
SELECT AVG(s.NumTstTakr) AS AverageTestTakers FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.County = 'Fresno' AND sc.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';
SELECT schools.Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.dname = 'Fresno Unified' ORDER BY satscores.AvgScrRead ASC LIMIT 1;
WITH VirtualSchools AS ( SELECT s.CDSCode, sc.AvgScrRead, sch.Virtual, sch.County, RANK() OVER (PARTITION BY sch.County ORDER BY sc.AvgScrRead DESC) AS ReadingRank FROM satscores sc JOIN schools sch ON sc.cds = sch.CDSCode WHERE sch.Virtual = 'F' ) SELECT sch.School AS VirtualSchoolName FROM VirtualSchools vs JOIN schools sch ON vs.CDSCode = sch.CDSCode WHERE vs.ReadingRank <= 5;
SELECT schools.CDSCode, satscores.AvgScrMath, schools.EdOpsName FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrMath = ( SELECT MAX(AvgScrMath) FROM satscores )
SELECT satscores.AvgScrMath AS Average_Math_Score, schools.County AS County FROM satscores JOIN schools ON satscores.cds = schools.CDSCode ORDER BY (satscores.AvgScrMath + satscores.AvgScrRead + satscores.AvgScrWrite) ASC LIMIT 1;
WITH MaxHighScorers AS ( SELECT MAX(NumGE1500) AS MaxNum FROM satscores WHERE rtype = 'S' ) SELECT AVG(s.AvgScrWrite) AS AverageWritingScore, sch.City FROM satscores s JOIN schools sch ON s.cds = sch.CDSCode WHERE s.rtype = 'S' AND s.NumGE1500 = (SELECT MaxNum FROM MaxHighScorers) GROUP BY sch.City;
SELECT s.School AS SchoolName, sat.AvgScrWrite AS AverageWritingScore FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds WHERE s.AdmFName1 = 'Ricci' AND s.AdmLName1 = 'Ulrich';
SELECT s.School, f."Enrollment (K-12)" FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.DOC = '31' ORDER BY f."Enrollment (K-12)" DESC LIMIT 1;
SELECT (COUNT(*)::float / 12) AS monthly_average FROM schools WHERE YEAR(OpenDate) = 1980 AND County = 'Alameda' AND DOC = 52;
SELECT COUNT(DISTINCT CASE WHEN s.DOC = 54 THEN f.`District Code` END) AS UnifiedCount, COUNT(DISTINCT CASE WHEN s.DOC = 52 THEN f.`District Code` END) AS ElementaryCount FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`County Name` = 'Orange';
SELECT s.County, s.School, s.ClosedDate FROM schools s WHERE StatusType = 'Closed' AND County IN ( SELECT COUNTY FROM schools WHERE StatusType = 'Closed' GROUP BY COUNTY HAVING COUNT(*) = ( SELECT MAX(CountClosed) FROM (SELECT COUNTY, COUNT(*) as CountClosed FROM schools WHERE StatusType = 'Closed' GROUP BY COUNTY) ) );
SELECT schools.Street AS Postal_Street_Address, schools.MailStreet AS Mailing_Street_Address, schools.School AS School_Name FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrMath IS NOT NULL ORDER BY satscores.AvgScrMath DESC LIMIT 1 OFFSET 6;
SELECT schools.MailStreet, schools.School FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrRead IS NOT NULL ORDER BY satscores.AvgScrRead ASC LIMIT 1;
SELECT COUNT(*) AS TotalSchools FROM satscores JOIN schools ON satscores.CDSCode = schools.CDSCode WHERE (AvgScrRead + AvgScrMath + AvgScrWrite) >= 1500 AND schools.MailCity = 'Lakeport';
SELECT SUM(enroll12) AS total_test_takers FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Fresno' GROUP BY satscores.cds;
SELECT School, MailZip FROM schools WHERE AdmEmail1 = 'Avetik Atoian';
SELECT COUNT(CASE WHEN County = 'Colusa' THEN 1 END) AS colusa_count, COUNT(CASE WHEN County = 'Humboldt' THEN 1 END) AS humboldt_count, (COUNT(CASE WHEN County = 'Colusa' THEN 1 END) / COUNT(CASE WHEN County = 'Humboldt' THEN 1 END)) AS ratio FROM schools WHERE MailState = 'CA';
SELECT COUNT(*) FROM schools WHERE State = 'CA' AND City = 'San Joaquin' AND StatusType = 'Active';
SELECT schools.Phone, schools.Ext FROM schools JOIN ( SELECT cdsschool FROM satscores WHERE AvgScrWrite IS NOT NULL ORDER BY AvgScrWrite DESC LIMIT 1 OFFSET 332 ) AS top_school ON schools.CDSCode = top_school.cdsschool;
SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704';
SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez');
SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin';
SELECT COUNT(*) FROM schools WHERE City = 'Hickman' AND Charter = 1 AND DOC = 52;
SELECT COUNT(*) AS NumberOfSchools FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Los Angeles' AND frpm.`Charter School (Y/N)` = 0 AND (`Free Meal Count (K-12)` / `Enrollment (K-12)`) * 100 < 0.18;
SELECT AdmFName1 AS FirstName, AdmLName1 AS LastName, School, City FROM schools WHERE CharterNum = '00D2';
SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4';
SELECT (COUNT(CASE WHEN FundingType = 'Local' THEN 1 END) / COUNT(*)) * 100 AS LocalFundedPercentage FROM schools WHERE County = 'Santa Clara';
SELECT COUNT(*) AS NumberOfSchools FROM schools WHERE FundingType = 'Directly Funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus';
SELECT COUNT(*) FROM schools WHERE City = 'San Francisco' AND YEAR(ClosedDate) = 1989;
SELECT County, COUNT(*) AS ClosureCount FROM schools WHERE SOC = 11 -- Filters for Youth Authority Facilities (CEA) AND ClosedDate >= '1980-01-01' AND ClosedDate <= '1989-12-31' AND ClosedDate IS NOT NULL -- Ensures only closed schools are counted GROUP BY County ORDER BY ClosureCount DESC;
SELECT NCESDist FROM schools WHERE SOC = '31'
SELECT COUNT(*) AS Total_district_community_day_schools FROM schools AS s LEFT JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE s.County = 'Alpine' AND f.`School Type` = 'District Community Day School';
SELECT `District Code` FROM schools WHERE Magnet = 0 AND City = 'Fresno';
SELECT SUM(enroll12) AS StudentCount FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.EDOPScode = 'SSS' AND schools.City = 'Fremont';
SELECT SUM(`Free Meal Count (Ages 5-17)`) AS FreeMealCount FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.StatusType = 'Youth Authority School' AND ( schools.MailStreet LIKE '%PO Box 1040%' OR schools.MailStrAbr LIKE '%PO Box 1040%' );
SELECT `Low Grade` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.EdOpsCode = 'SPECON' AND frpm.CDSCode = '0613360';
SELECT School FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`County Code` = 37 AND frpm.`NSLP Provision Status` = 'Breakfast Provision 2';
SELECT schools.City FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.EILCode = 'HS' AND frpm.`Low Grade` = '09' AND frpm.`High Grade` = '12' AND frpm.`NSLP Provision Status` = 2 AND schools.County = 'Merced';
SELECT s.School AS SchoolName, s.County AS CountyName, s.Street AS StreetAddress, (CASE WHEN frpm.[Enrollment (Ages 5-17)] = 0 THEN NULL ELSE (frpm.[FRPM Count (Ages 5-17)] / frpm.[Enrollment (Ages 5-17)]) * 100 END) AS [Percent (%) Eligible FRPM] FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Los Angeles' AND f.[Low Grade] = 'K' AND f.[High Grade] = '9';
SELECT CONCAT(schools.`High Grade`, '-', schools.`Low Grade`) AS grade_span, COUNT(*) AS count FROM schools WHERE schools.City = 'Adelanto' GROUP BY grade_span ORDER BY count DESC LIMIT 1;
SELECT County, COUNT(*) AS NumberOfVirtualSchools FROM schools WHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F' -- Assuming 'F' indicates a school without a physical building GROUP BY County;
SELECT School, `School Type`, Latitude FROM schools WHERE Latitude = (SELECT MAX(Latitude) FROM schools);
SELECT City, LowGrade FROM schools WHERE State = 'CA' ORDER BY Latitude ASC LIMIT 1;
SELECT GSoffered AS grade_span FROM schools WHERE Longitude = (SELECT MAX(ABS(Longitude)) FROM schools) LIMIT 1;
SELECT COUNT(*) AS NumberOfSchools, City, `NSLP Provision Status` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE Magnet = 1 AND `Low Grade` = 'K' AND `High Grade` = '8' GROUP BY City, `NSLP Provision Status`;
SELECT AdmFName1 AS FirstName, District, COUNT(*) AS Frequency FROM schools WHERE AdmFName1 IS NOT NULL GROUP BY AdmFName1 ORDER BY Frequency DESC, AdmFName1 ASC LIMIT 2;
SELECT schools.`District Code`, (frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) * 100 AS `Percent (%) Eligible Free (K-12)` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Alusine' OR schools.AdmFName2 = 'Alusine' OR schools.AdmFName3 = 'Alusine' AND frpm.`Enrollment (K-12)` > 0;
SELECT schools.AdmLName1 AS Administrator_Last_Name, schools.School AS School_Name, schools.District AS District, schools.County AS County FROM frpm INNER JOIN satscores ON frpm.CDSCode = satscores.cds INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.Charter_School_Number = 40;
SELECT schools.CDSCode, schools.AdmEmail1, schools.AdmEmail2, schools.AdmEmail3 FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'San Bernardino' AND schools.District = 'San Bernardino City Unified' AND (frpm.SOC = 62 OR frpm.DOC = 54) AND schools.OpenDate BETWEEN '2009-01-01' AND '2010-12-31';
SELECT schools.CDSCode, sname AS SchoolName, AdmEmail1 AS AdministratorEmail FROM satscores JOIN schools ON satscores.cds = schools.CDSCode ORDER BY NumGE1500 DESC LIMIT 1;
SELECT COUNT(DISTINCT a.account_id) AS account_count FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'POPLATEK PO OBRATU' AND d.A3 = 'East Bohemia';
SELECT COUNT(a.account_id) AS eligible_accounts_count FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'Prague' AND EXISTS ( SELECT 1 FROM loan l WHERE l.account_id = a.account_id AND l.status = 'active' -- 假设贷款状态为有效的条件是status='active' );
SELECT AVG(A12) AS avg_unemployment_1995, AVG(A13) AS avg_unemployment_1996 FROM district;
SELECT COUNT(*) AS district_count FROM ( SELECT d.district_id, AVG(CASE WHEN c.gender = 'F' THEN d.A11 ELSE NULL END) AS female_avg_salary FROM district d JOIN client c ON d.district_id = c.district_id JOIN disp di ON c.client_id = di.client_id JOIN account ac ON di.account_id = ac.account_id GROUP BY d.district_id ) subquery WHERE subquery.female_avg_salary > 6000 AND subquery.female_avg_salary < 10000;
SELECT AVG(district.A11) AS average_salary FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.A3 = 'North Bohemia';
WITH -- 步骤 1: 找到最年长的女性客户的client_id及其A11值 Oldest_Female AS ( SELECT c.client_id, d.A11 FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' ORDER BY c.birth_date ASC LIMIT 1 ), -- 步骤 2: 计算整个数据集的max_A11和min_A11 Salary_Stats AS ( SELECT MAX(d.A11) as max_A11, MIN(d.A11) as min_A11 FROM district d ) -- 步骤 3: 返回结果，包括client_id和Gap SELECT of.client_id, (ss.max_A11 - ss.min_A11) AS Gap FROM Oldest_Female of JOIN Salary_Stats ss;
WITH client_rank AS ( SELECT c.client_id, c.birth_date, d.A11, RANK() OVER (ORDER BY c.birth_date DESC) AS birth_date_rank, RANK() OVER (ORDER BY d.A11 DESC) AS a11_rank FROM client c JOIN district d ON c.district_id = d.district_id ) SELECT c.account_id FROM client_rank cr WHERE cr.birth_date_rank = 1 AND cr.a11_rank = 1;
SELECT COUNT(DISTINCT T2.client_id) FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T3.type = 'Owner';
SELECT client_id FROM disp JOIN account ON disp.account_id = account.account_id WHERE type = 'POPLATEK PO OBRATU';
WITH AccountLowest AS ( SELECT l.account_id, MIN(l.amount) as lowest_amount FROM loan l WHERE l.date >= '1997-01-01' AND l.date <= '1997-12-31' AND EXISTS ( SELECT 1 FROM trans t WHERE t.account_id = l.account_id AND t.type = 'POPLATEK TYDNE' ) GROUP BY l.account_id ) SELECT account_id, lowest_amount FROM AccountLowest WHERE lowest_amount = (SELECT MIN(lowest_amount) FROM AccountLowest);
SELECT loan.account_id AS account_id, MAX(loan.amount) AS highest_approved_amount FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 12 AND YEAR(account.date) = 1993 GROUP BY loan.account_id ORDER BY highest_approved_amount DESC;
SELECT COUNT(*) AS count_of_female_customers FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date < '1950-01-01' AND d.A2 = 'Sokolov';
SELECT account.account_id, district_id, frequency, MIN(trans.date) AS earliest_trade_date FROM account JOIN trans ON account.account_id = trans.account_id WHERE year(trans.date) = 1995 GROUP BY account.account_id;
SELECT DISTINCT account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date < '1997-01-01' AND loan.amount > 3000;
SELECT DISTINCT d.client_id FROM disp AS d INNER JOIN card AS c ON d.disp_id = c.disp_id WHERE c.issued = '1994-03-03';
SELECT disp.issued AS account_opened_date FROM trans INNER JOIN disp ON trans.account_id = disp.account_id WHERE trans.amount = 840 AND trans.date = '1998-10-14';
SELECT loan.account_id, account.district_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.date = '1994-08-25';
SELECT MAX(t.amount) AS biggest_amount FROM trans AS t INNER JOIN account AS a ON t.account_id = a.account_id INNER JOIN disp AS d ON a.account_id = d.account_id INNER JOIN client AS c ON d.client_id = c.client_id WHERE d.issued = '1996-10-21' ORDER BY biggest_amount DESC;
SELECT c.gender, c.birth_date, a.account_id, d.A11 AS average_salary FROM client c JOIN disp dp ON c.client_id = dp.client_id JOIN account ac ON dp.account_id = ac.account_id JOIN district d ON ac.district_id = d.district_id WHERE c.gender = 'F' AND d.A11 = ( SELECT MAX(A11) FROM district ) ORDER BY c.birth_date ASC LIMIT 1;
SELECT t.amount AS first_transaction_amount FROM trans t WHERE t.account_id = ( SELECT l.account_id FROM loan l WHERE l.amount = (SELECT MAX(l2.amount) FROM loan l2) ) ORDER BY t.date ASC LIMIT 1;
SELECT COUNT(*) FROM client LEFT JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.A2 = 'Jesenik';
SELECT disp.disp_id FROM trans JOIN disp ON trans.account_id = disp.account_id WHERE trans.date = '1998-09-02' AND trans.amount = 5100;
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Litomerice' AND T1.date >= '1996-01-01' AND T1.date <= '1996-12-31';
SELECT T3.A2 AS district_name FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T4 ON T2.account_id = T4.account_id INNER JOIN district AS T3 ON T4.district_id = T3.district_id WHERE T1.birth_date = '1976-01-29' AND T1.gender = 'F';
SELECT c.birth_date AS bdate FROM loan l INNER JOIN account a ON l.account_id = a.account_id INNER JOIN client c ON a.district_id = c.district_id WHERE l.amount = 98832 AND l.date = '1996-01-03';
SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1;
WITH -- Step 1: Find the district with the maximum inhabitants in south Bohemia MaxInhabitants AS ( SELECT district_id, A4 as inhabitants FROM district WHERE A3 = 'south Bohemia' ORDER BY A4 DESC LIMIT 1 ), -- Step 2: Count male clients in the identified district MaleClients AS ( SELECT COUNT(*) as count_male FROM client JOIN MaxInhabitants mi ON client.district_id = mi.district_id WHERE gender = 'M' ), -- Step 3: Count total clients in the identified district TotalClients AS ( SELECT COUNT(*) as count_total FROM client JOIN MaxInhabitants mi ON client.district_id = mi.district_id ) -- Step 4: Calculate the percentage of male clients SELECT (count_male / count_total * 100) AS percentage_male_clients FROM MaleClients, TotalClients;
WITH loan_info AS ( SELECT l.account_id, l.approval_date FROM loans l WHERE l.approval_date = '1993-07-05' ORDER BY l.loan_id ASC LIMIT 1 ), start_balance AS ( SELECT t.balance as initial_balance FROM trans t WHERE t.account_id = (SELECT account_id FROM loan_info) AND t.trans_date <= (SELECT approval_date FROM loan_info) ORDER BY t.trans_id DESC LIMIT 1 ), end_balance AS ( SELECT t.balance as final_balance FROM trans t WHERE t.account_id = (SELECT account_id FROM loan_info) AND t.trans_date <= '1998-12-27' ORDER BY t.trans_id DESC LIMIT 1 ) SELECT (final_balance - initial_balance) AS interest FROM start_balance, end_balance;
SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) / SUM(amount)) * 100 AS paid_percentage FROM loan;
WITH -- Calculate the total number of distinct accounts with loans less than $100,000 TotalAccounts AS ( SELECT COUNT(DISTINCT account_id) AS total FROM loan WHERE amount < 100000 ), -- Calculate the number of active accounts (status 'C') with loans less than $100,000 ActiveAccounts AS ( SELECT COUNT(DISTINCT account_id) AS active FROM loan WHERE amount < 100000 AND status = 'C' ) -- Calculate the percentage of active accounts SELECT (ActiveAccounts.active / TotalAccounts.total * 100) AS PercentageOfActiveAccounts FROM ActiveAccounts, TotalAccounts;
SELECT account.account_id, district.A2 AS region_name, district.A3 AS region_area FROM account JOIN district ON account.district_id = district.district_id LEFT JOIN trans ON account.account_id = trans.account_id WHERE year(account.date) = 1993 AND trans.type = 'POPLATEK PO OBRATU';
SELECT account.account_id, account.frequency FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN client ON account.district_id = client.district_id WHERE account.date >= '1995-01-01' AND account.date <= '2000-12-31' AND district.A3 = 'east Bohemia';
SELECT account.account_id, account.date FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice'
SELECT T3.A2, T3.A3 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.loan_id = '4990'
SELECT loan.account_id, district.A2 AS district, district.A3 AS region FROM loan JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE loan.amount > 300000;
SELECT T1.loan_id, T3.A3 AS region, T3.A11 AS average_salary FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.duration = 60;
SELECT DISTINCT d.district_id, ((d.A13 - d.A12) / NULLIF(d.A12, 0) * 100) AS unemployment_increment FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'D';
SELECT (COUNT(*) * 100.0) / ( SELECT COUNT(*) FROM account WHERE strftime('%Y', date) = '1993' ) AS percentage FROM account JOIN district ON account.district_id = district.district_id WHERE strftime('%Y', account.date) = '1993' AND district.A2 = 'Decin';
SELECT DISTINCT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';
SELECT district.district_id, district.A2 AS district_name, COUNT(client.client_id) AS female_account_holders_count FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' GROUP BY district.district_id ORDER BY female_account_holders_count DESC LIMIT 9;
SELECT d.A2 AS DistrictName, SUM(t.amount) AS TotalWithdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01-%' GROUP BY d.A2 ORDER BY TotalWithdrawals DESC LIMIT 10;
SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'South Bohemia' AND NOT EXISTS ( SELECT 1 FROM card AS T3 INNER JOIN disp AS T4 ON T3.disp_id = T4.disp_id WHERE T4.account_id = T1.account_id );
SELECT district.district_id AS 区编号, district.A3 AS 区名, COUNT(loan.loan_id) AS 活跃贷款数量 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status IN ('C', 'D') GROUP BY district.district_id, district.A3 ORDER BY 活跃贷款数量 DESC;
SELECT AVG(amount) AS average_loan_amount FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id INNER JOIN disp AS D ON A.account_id = D.account_id INNER JOIN client AS C ON D.client_id = C.client_id WHERE C.gender = 'M';
SELECT district_id, A2 AS district_name, A13 AS unemployment_rate FROM district WHERE A13 IS NOT NULL ORDER BY A13 DESC LIMIT 5;
SELECT COUNT(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district WHERE A16 = (SELECT MAX(A16) FROM district) );
SELECT COUNT(DISTINCT t.account_id) FROM trans t JOIN account a ON t.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id AND d.type = 'POPLATEK MESICNE' WHERE t.operation = 'VYBER KARTOU' AND t.balance < 0;
SELECT COUNT(*) AS total_loans FROM loan JOIN account USING (account_id) WHERE loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.amount >= 250000 AND account.frequency = 'POPLATEK MESICNE' AND loan.status = 'approved';
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.district_id = 1;
SELECT district_id FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1;
SELECT COUNT(*) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'Gold' AND disp.type = 'OWNER'
SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Pisek'
SELECT DISTINCT d.district_id, [district_name_field] -- 假设 district 表中有表示名称的字段，如 name 或 region FROM trans t INNER JOIN account a ON t.account_id = a.account_id INNER JOIN district d ON a.district_id = d.district_id WHERE YEAR(t.date) = 1997 AND t.amount > 10000;
SELECT account_id FROM `order` WHERE k_symbol = 'SIPO' AND bank_to = 'Pisek'
SELECT DISTINCT T3.account_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T1.type = 'Gold';
SELECT AVG(amount) AS average_credit_card_amount FROM trans WHERE operation = 'VYBER KARTOU' AND YEAR(date) = 2021;
WITH avg_amount AS ( SELECT AVG(amount) as average FROM trans WHERE operation = 'VYBER KARTOU' AND date LIKE '1998-%' ) SELECT account_id FROM trans WHERE operation = 'VYBER KARTOU' AND date LIKE '1998-%' AND amount < (SELECT average FROM avg_amount);
SELECT DISTINCT c.client_id, c.gender FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card cr ON d.disp_id = cr.disp_id JOIN account acc ON c.district_id = acc.account_id JOIN loan l ON acc.account_id = l.account_id WHERE c.gender = 'F';
SELECT COUNT(*) FROM account AS T1 WHERE EXISTS ( SELECT 1 FROM client AS T2 INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T2.client_id = T1.account_id AND T2.gender = 'F' AND T3.A3 = 'south Bohemia' );
SELECT account.account_id FROM district JOIN account ON account.district_id = district.district_id WHERE district.A2 = 'Tabor' AND account.type = 'OWNER';
SELECT disp.type AS account_type, COUNT(*) AS count FROM district JOIN account ON account.district_id = district.district_id JOIN disp ON disp.account_id = account.account_id WHERE district.A11 > 8000 AND district.A11 <= 9000 AND disp.type != 'OWNER' GROUP BY disp.type;
SELECT COUNT(*) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A3 = 'North Bohemia' AND T1.bank = 'AB';
SELECT DISTINCT T3.A2 FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type = 'VYDAJ'
SELECT district.district_id AS region_id, district.A3 AS region_name, district.A15 AS avg_1995 FROM district JOIN account ON account.district_id = district.district_id WHERE account.date >= '1997-01-01' GROUP BY district.district_id, district.A3, district.A15 HAVING district.A15 > 4000 ORDER BY district.district_id;
SELECT COUNT(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id WHERE card.type = 'classic' AND account.type = 'OWNER';
SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'
SELECT (COUNT(*) * 100) / (SELECT COUNT(*) FROM card) AS percent_gold_issued_before_1998 FROM card WHERE type = 'Gold' AND YEAR(issued) < 1998;
SELECT cl.client_id, cl.gender, cl.birth_date, cl.district_id FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client cl ON d.client_id = cl.client_id WHERE l.amount = (SELECT MAX(amount) FROM loan) LIMIT 1;
SELECT d.A15 FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.account_id = 532;
SELECT T2.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.order_id = 33333
SELECT t.trans_id AS transaction_id, t.date AS transaction_date, t.amount AS withdrawal_amount FROM trans t JOIN account a ON t.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.client_id = 3356 AND t.operation = 'VYBER';
SELECT COUNT(DISTINCT loan.account_id) FROM loan JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;
SELECT card.type FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE client.client_id = 13539;
SELECT district.A3 FROM client JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541;
SELECT d.district_id, COUNT(a.account_id) AS count_accounts FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY count_accounts DESC LIMIT 1;
SELECT client.client_id, disp.account_id FROM order JOIN account ON order.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id AND disp.type = 'CLIENT' JOIN client ON disp.client_id = client.client_id WHERE order.order_id = 32423;
SELECT T1.* FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.district_id = 5
SELECT COUNT(account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Jesenik';
SELECT DISTINCT c.client_id FROM card AS ca JOIN disp AS d ON ca.disp_id = d.disp_id JOIN client AS c ON d.client_id = c.client_id WHERE ca.type = 'junior' AND caissued >= '1997-01-01';
SELECT (COUNT(CASE WHEN gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 > 10000;
SELECT ((amount_1997 - amount_1996) / NULLIF(amount_1996, 0)) * 100 AS growth_rate FROM ( SELECT SUM(CASE WHEN YEAR(l.date) = 1997 THEN l.amount ELSE 0 END) as amount_1997, SUM(CASE WHEN YEAR(l.date) = 1996 THEN l.amount ELSE 0 END) as amount_1996 FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.gender = 'M' ) AS sums;
SELECT COUNT(trans_id) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-01-01';
SELECT (SUM(A16) AS NorthCrimes, SUM(A16) AS EastCrimes) FROM district WHERE A3 IN ('North Bohemia', 'East Bohemia');
SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND (type = 'owner' OR type = 'disponent');
SELECT COUNT(DISTINCT frequency) AS release_frequency, SUM(CASE WHEN amount = -3539 THEN amount ELSE 0 END) AS total_debit_aim FROM account JOIN trans ON trans.account_id = account.account_id WHERE account.account_id = 3;
SELECT YEAR(client.birth_date) AS birth_year FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE account.account_id = 130;
SELECT COUNT(DISTINCT account.account_id) FROM account JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK PO OBRATU';
SELECT c.client_id, l.account_id AS loan_account_id, t.account_id AS trans_account_id, SUM(CASE WHEN l.status = '未偿还' THEN l.amount ELSE 0 END) AS debt_amount, SUM(t.amount) AS total_payment, MAX(t.date) AS last_payment_date FROM client c INNER JOIN disp d ON c.client_id = d.client_id INNER JOIN account a ON d.account_id = a.account_id LEFT JOIN loan l ON a.account_id = l.account_id LEFT JOIN trans t ON a.account_id = t.account_id WHERE c.client_id = 992 GROUP BY c.client_id;
SELECT SUM(t.amount) AS total_amount, c.gender FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE c.client_id = 4 AND t.trans_id > 851;
SELECT c.type FROM client AS cl INNER JOIN disp AS d ON cl.client_id = d.client_id INNER JOIN card AS c ON d.disp_id = c.disp_id WHERE cl.client_id = 9;
SELECT SUM(amount) AS total_payment FROM trans AS T1 INNER JOIN disp AS T2 ON T2.account_id = T1.account_id WHERE T2.client_id = 617 AND YEAR(T1.date) = 1998;
SELECT client.client_id, client.birth_date FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.district_id IN ( SELECT district_id FROM district WHERE A2 = 'East Bohemia' ) AND client.birth_date BETWEEN '1983-01-01' AND '1987-12-31';
SELECT T1.client_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' GROUP BY T1.client_id ORDER BY MAX(T3.amount) DESC LIMIT 3;
SELECT COUNT(DISTINCT c.client_id) AS male_customers_count FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE c.gender = 'M' AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND t.type = 'SIPO' AND t.amount > 4000;
SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Beroun' AND T1.date > '1996-01-01'
SELECT COUNT(DISTINCT c.client_id) AS female_junior_credit_cardholders FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card cr ON d.disp_id = cr.disp_id WHERE c.gender = 'F' AND d.type = 'Junior';
SELECT (COUNT(DISTINCT c.client_id) / (SELECT COUNT(DISTINCT client_id) FROM client cl JOIN disp d ON cl.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE a.A3 = 'Prague')) * 100 AS female_proportion FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE c.gender = 'F' AND a.A3 = 'Prague';
SELECT (COUNT(CASE WHEN c.gender = 'M' THEN 1 END) * 100.0 / COUNT(DISTINCT t.account_id)) AS percentage FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE t.type = 'POPLATEK TYDNE';
SELECT COUNT(DISTINCT T1.client_id) AS ClientCount FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'Owner';
SELECT a.account_id, l.amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE DATEDIFF(MONTH, l.date, GETDATE()) >= 24 AND a.date < '1997-01-01' ORDER BY l.amount ASC LIMIT 1;
SELECT c.account_id FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND (c.birth_date = ( SELECT MIN(c2.birth_date) FROM client c2 WHERE c2.gender = 'F' AND c2.district_id = c.district_id )) GROUP BY c.account_id, d.A11 HAVING d.A11 = ( SELECT MIN(d2.A11) FROM district d2 JOIN client c3 ON d2.district_id = c3.district_id WHERE c3.gender = 'F' AND c3.birth_date = ( SELECT MIN(c4.birth_date) FROM client c4 WHERE c4.gender = 'F' AND c4.district_id = d2.district_id ) );
SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE strftime('%Y', T1.birth_date) = '1920' AND T2.A3 = 'East Bohemia'
SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.duration = 24 AND account.frequency = 'POPLATEK TYDNE';
SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN trans ON loan.account_id = trans.account_id WHERE loan.status IN ('C', 'D') AND trans.type = 'POPLATEK PO OBRATU' GROUP BY loan.account_id HAVING COUNT(*) > 0;
SELECT c.client_id, c.district_id FROM client AS c INNER JOIN disp AS d ON c.client_id = d.client_id WHERE d.type = 'OWNER';
SELECT T3.client_id, (YEAR(CURDATE()) - YEAR(T3.birth_date)) AS age FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1
SELECT COUNT(*) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.element = 'cl';
SELECT AVG(CASE WHEN T1.element = 'o' THEN 1 ELSE 0 END) AS average_oxygen_atoms FROM bond AS T2 INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id INNER JOIN atom AS T1 ON T3.atom_id = T1.atom_id WHERE T2.bond_type = '-' GROUP BY T2.molecule_id;
WITH carcinogenic_molecules AS ( SELECT molecule_id FROM molecule WHERE label = '+' ) SELECT (COUNT(bond.bond_id) FILTER (WHERE bond_type = '-')) / COUNT(atom.atom_id) AS average_single_bonds FROM bond, atom WHERE bond.molecule_id IN (SELECT molecule_id FROM carcinogenic_molecules) AND atom.molecule_id IN (SELECT molecule_id FROM carcinogenic_molecules);
SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'
SELECT molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond_type = '#' AND label = '+'
SELECT CAST(SUM(IIF(T1.element = 'c', 1, 0)) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 WHERE T1.molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = '=' )
SELECT COUNT(*) FROM bond WHERE bond_type = '#'
SELECT COUNT(*) FROM atom WHERE element != 'br'
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+' LIMIT 100;
SELECT DISTINCT T1.molecule_id FROM atom AS T1 WHERE T1.element = 'c'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'
SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '='
SELECT label FROM atom WHERE element = 'h' GROUP BY label ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT bond_type FROM bond WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'cl' )
SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '-';
SELECT T1.atom_id, T2.atom_id AS connected_atom FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN atom AS T2 ON T3.atom_id2 = T2.atom_id INNER JOIN bond AS T4 ON T3.bond_id = T4.bond_id INNER JOIN molecule AS T5 ON T4.molecule_id = T5.molecule_id WHERE T5.label = '-' ORDER BY T1.atom_id, connected_atom;
SELECT T1.element FROM molecule AS T2 JOIN atom AS T1 ON T2.molecule_id = T1.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(*) ASC LIMIT 1;
SELECT DISTINCT T1.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE (T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20') OR (T1.atom_id = 'TR004_20' AND T1.atom_id2 = 'TR004_8')
SELECT label FROM molecule WHERE molecule_id NOT IN (SELECT DISTINCT molecule_id FROM atom WHERE element = 'sn');
SELECT COUNT(DISTINCT a.atom_id) AS total_atoms FROM atom a WHERE a.element IN ('i', 's') AND a.molecule_id IN ( SELECT b.molecule_id FROM bond b WHERE b.bond_type = '-' AND NOT EXISTS ( SELECT 1 FROM bond b2 WHERE b2.molecule_id = b.molecule_id AND b2.bond_type != '-' ) );
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'
SELECT DISTINCT a2.atom_id, a2.element FROM connected AS c JOIN atom AS a ON c.atom_id = a.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id WHERE a.molecule_id = 'TR181';
WITH carcinogenic_molecules AS ( SELECT DISTINCT molecule_id FROM molecule WHERE label = '+' ) SELECT (COUNT(*) * 100.0 / total_carcinogenic) AS percentage_without_fluorine FROM ( SELECT m.molecule_id FROM carcinogenic_molecules m WHERE NOT EXISTS ( SELECT 1 FROM atom a WHERE a.molecule_id = m.molecule_id AND a.element = 'F' ) ) AS without_fluorine, ( SELECT COUNT(*) FROM carcinogenic_molecules ) AS total_carcinogenic;
SELECT (SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) / COUNT(bond.bond_id)) * 100 AS percentage_carcinogenic FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';
SELECT element FROM atom WHERE molecule_id = 'TR000' AND EXISTS ( SELECT 1 FROM connected WHERE atom_id = atom.atom_id AND molecule_id = 'TR000' ) ORDER BY LOWER(element) LIMIT 3;
SELECT DISTINCT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR001' AND T1.bond_id = 'TR001_2_6'
SELECT (COUNT(CASE WHEN label = '+' THEN 1 END) - COUNT(CASE WHEN label = '-' THEN 1 END)) AS DIFFERENCE FROM molecule;
SELECT atom_id FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_5';
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'
SELECT DISTINCT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = ' = ' ORDER BY T2.label ASC LIMIT 5;
SELECT ROUND((COUNT(bond_type = '=') / COUNT(bond_id)) * 100, 5) AS double_bond_percentage FROM bond WHERE molecule_id = 'TR008';
SELECT ROUND((COUNT(CASE WHEN label = '+' THEN molecule_id END) / COUNT(molecule_id)) * 100, 3) AS percentage_carcinogenic FROM molecule;
SELECT ROUND( (SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR206' AND element = 'h') / (SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR206') * 100, 4 ) AS hydrogen_percentage;
SELECT bond_type FROM bond WHERE molecule_id = 'TR000'
SELECT T1.label, GROUP_CONCAT(T2.element) AS elements FROM molecule AS T1 LEFT JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR060' GROUP BY T1.molecule_id;
SELECT bond_type AS majority_bond_type, COUNT(*) AS count_bond, (CASE WHEN molecule.label = 'carcinogenic' THEN 1 ELSE 0 END) AS is_carcinogenic FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR010' GROUP BY bond_type HAVING COUNT(*) = ( SELECT MAX(count_bond) FROM ( SELECT COUNT(*) AS count_bond, bond_type FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR010' GROUP BY bond_type ) AS subquery );
SELECT T2.molecule_id FROM connected AS T1 INNER JOIN atom AS T3 ON T1.atom_id = T3.atom_id INNER JOIN atom AS T4 ON T1.atom_id2 = T4.atom_id INNER JOIN bond AS T5 ON T1.bond_id = T5.bond_id INNER JOIN molecule AS T2 ON T5.molecule_id = T2.molecule_id WHERE T5.bond_type = '-' AND T2.label = '-' GROUP BY T2.molecule_id HAVING COUNT(*) >= 1 ORDER BY T2.molecule_id ASC LIMIT 3;
SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2
SELECT COUNT(DISTINCT bond_id) FROM bond WHERE molecule_id = 'TR009' AND bond_id IN ( SELECT bond_id FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12' );
SELECT COUNT(DISTINCT m.molecule_id) FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE a.element = 'br' AND m.label = '+'
SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9'
SELECT T2.molecule_id, T2.label FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'
SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#'
SELECT COUNT(*) FROM connected WHERE atom_id LIKE 'TR%_19' OR atom_id2 LIKE 'TR%_19'
SELECT element FROM atom WHERE molecule_id = 'TR004'
SELECT COUNT(*) FROM molecule WHERE label = '-';
SELECT DISTINCT T1.molecule_id, T1.label FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T2.atom_id, 7, 2) BETWEEN '21' AND '25' AND T1.label = '+';
SELECT bond_id FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'p') INTERSECT SELECT bond_id FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'n')
SELECT CASE WHEN MAX(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) > 0 AND label = '+' THEN 'Yes' ELSE 'No' END AS IsCarcinogenic FROM ( SELECT T2.molecule_id, COUNT(*) AS DoubleBondCount FROM bond AS T1 INNER JOIN connected AS T3 ON T1.bond_id = T3.bond_id INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id AND T3.atom_id2 = T4.atom_id INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = ' = ' GROUP BY T2.molecule_id ) AS SubQuery INNER JOIN molecule AS T5 ON SubQuery.molecule_id = T5.molecule_id WHERE DoubleBondCount = ( SELECT MAX(DoubleBondCount) FROM ( SELECT COUNT(*) AS DoubleBondCount, molecule_id FROM bond WHERE bond_type = ' = ' GROUP BY molecule_id ) AS MaxSubQuery );
SELECT AVG(bond_count) AS average_bonds FROM ( SELECT COUNT(*) AS bond_count FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'i') GROUP BY atom_id ) AS subquery;
SELECT DISTINCT T1.bond_id, T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = '45' OR T1.atom_id2 = '45';
SELECT element FROM atom WHERE atom_id NOT IN ( SELECT atom_id FROM connected UNION SELECT atom_id2 FROM connected )
SELECT atom_id, atom_id2 FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE molecule_id = 'TR041' AND bond_type = '#' ) AND (atom_id IS NOT NULL OR atom_id2 IS NOT NULL);
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR144_8_19';
WITH double_bond_count AS ( SELECT molecule_id, COUNT(*) as count FROM bond WHERE bond_type = '=' GROUP BY molecule_id ) SELECT m.label FROM molecule m INNER JOIN double_bond_count dbc ON m.molecule_id = dbc.molecule_id WHERE m.label = '+' ORDER BY dbc.count DESC LIMIT 1;
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1
SELECT DISTINCT CASE WHEN c.atom_id = p_atom THEN c.atom_id2 ELSE c.atom_id END AS bonded_atom FROM connected c JOIN (SELECT atom_id AS p_atom FROM atom WHERE element = 'pb') p ON c.atom_id = p.p_atom OR c.atom_id2 = p.p_atom;
SELECT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'
WITH bond_element_count AS ( SELECT T1.bond_id, CASE WHEN atom1.element < atom2.element THEN CONCAT(atom1.element, '-', atom2.element) ELSE CONCAT(atom2.element, '-', atom1.element) END AS element_pair, COUNT(*) AS count FROM connected T0 LEFT JOIN atom atom1 ON T0.atom_id = atom1.atom_id LEFT JOIN atom atom2 ON T0.atom_id2 = atom2.atom_id GROUP BY T0.bond_id, CASE WHEN atom1.element < atom2.element THEN CONCAT(atom1.element, '-', atom2.element) ELSE CONCAT(atom2.element, '-', atom1.element) END ) SELECT (COUNT(*) / (SELECT COUNT(bond_id) FROM bond)) * 100 AS percentage, element_pair FROM bond_element_count WHERE count = ( SELECT MAX(count) FROM bond_element_count ) GROUP BY element_pair;
SELECT ROUND( (SELECT COUNT(*) FROM bond WHERE bond_type = '-' AND molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' )) / (SELECT COUNT(*) FROM bond WHERE bond_type = '-') * 100, 5 ) AS proportion
SELECT COUNT(atom_id) FROM atom WHERE element IN('C', 'H')
SELECT T2.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 's';
SELECT DISTINCT bond.bond_type FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'sn'
SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-';
SELECT COUNT(DISTINCT atom_id) FROM ( SELECT T3a.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id AND T2.bond_type = '#' INNER JOIN atom AS T3a ON T1.atom_id = T3a.atom_id WHERE T3a.element IN ('p', 'br') UNION ALL SELECT T3b.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id AND T2.bond_type = '#' INNER JOIN atom AS T3b ON T1.atom_id2 = T3b.atom_id WHERE T3b.element IN ('p', 'br') ) AS subquery;
SELECT DISTINCT b.bond_id FROM bond AS b INNER JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE m.label = '+'
SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id WHERE T2.bond_type = '-' AND T1.label = '-'
SELECT (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) / COUNT(DISTINCT c.atom_id)) * 100 AS chlorine_percentage FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_type = '-';
SELECT DISTINCT T1.label FROM molecule AS T1 WHERE T1.molecule_id IN ('TR000', 'TR001', 'TR002') ORDER BY T1.molecule_id;
SELECT molecule_id FROM molecule WHERE label = '-';
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+'
SELECT bond.bond_type, molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050' ORDER BY molecule.molecule_id;
SELECT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_id = 'TR001_10_11'
SELECT COUNT(DISTINCT c.bond_id) FROM connected AS c INNER JOIN atom AS a ON c.atom_id = a.atom_id WHERE a.element = 'i';
SELECT ROUND( (COUNT(CASE WHEN label = '+' THEN 1 END) * 100.0 / COUNT(*)) AS total_percentage ) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'ca';
SELECT EXISTS( SELECT 1 FROM connected WHERE bond_id = 'TR001_1_8' AND atom_id IN ( SELECT atom_id FROM atom WHERE element = 'cl' ) ) AS has_chlorine, EXISTS( SELECT 1 FROM connected WHERE bond_id = 'TR001_1_8' AND atom_id IN ( SELECT atom_id FROM atom WHERE element = 'c' ) ) AS has_carbon;
SELECT DISTINCT T1.molecule_id FROM bond AS T INNER JOIN molecule AS T1 ON T.molecule_id = T1.molecule_id INNER JOIN connected AS CT ON T.bond_id = CT.bond_id INNER JOIN atom AS AT1 ON CT.atom_id = AT1.atom_id INNER JOIN atom AS AT2 ON CT.atom_id2 = AT2.atom_id WHERE T.bond_type = '#' AND T1.label = '-' AND AT1.element = 'c' AND AT2.element = 'c' LIMIT 2;
SELECT (COUNT(DISTINCT a.atom_id) / SUM(c.total_atoms)) * 100 AS chlorine_percentage FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN ( SELECT COUNT(*) as total_atoms, a2.molecule_id FROM atom a2 GROUP BY a2.molecule_id ) c USING (molecule_id) WHERE m.label = '+' AND a.element = 'cl';
SELECT DISTINCT T1.element FROM atom AS T1 WHERE T1.molecule_id = 'TR001'
SELECT molecule_id FROM bond WHERE bond_type = ' = ';
SELECT DISTINCT T1.atom_id, T1.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#' ORDER BY T1.molecule_id;
SELECT T3.element AS Toxicology_Element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_id = 'TR000_1_2';
SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'
SELECT T1.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'
SELECT T1.bond_id, COALESCE(T2.label, 'Unknown') AS carcinogenic FROM bond AS T1 LEFT JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'
WITH CarcinogenicMolecules AS ( SELECT molecule_id FROM molecule WHERE label = '+' ) SELECT element, COUNT(*) AS count FROM atom WHERE molecule_id IN (SELECT molecule_id FROM CarcinogenicMolecules) AND SUBSTRING(atom_id, 7, 1) = '4' GROUP BY element;
SELECT CAST(COUNT(CASE WHEN a.element = 'h' THEN 1 END) / COUNT(*) AS REAL) AS ratio, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.molecule_id = 'TR006';
SELECT m.label FROM molecule m WHERE EXISTS ( SELECT 1 FROM atom a WHERE a.molecule_id = m.molecule_id AND a.element = 'ca' );
SELECT DISTINCT bond_type FROM bond WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'c');
SELECT DISTINCT T.element FROM atom AS T WHERE T.atom_id IN ( SELECT a1.atom_id FROM connected AS c1 WHERE c1.bond_id = 'TR001_10_11' AND a1.atom_id = c1.atom_id AND a1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') ) OR T.atom_id IN ( SELECT a2.atom_id FROM connected AS c2 WHERE c2.bond_id = 'TR001_10_11' AND a2.atom_id = c2.atom_id2 AND a2.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') );
SELECT CAST(COUNT(DISTINCT bond_id) AS REAL) * 100 / COUNT(DISTINCT molecule_id) AS percentage FROM bond WHERE bond_type = '#';
SELECT (CAST(COUNT(*) AS FLOAT) / COUNT(bond_id)) * 100 AS percentage_of_double_bonds FROM bond WHERE molecule_id = 'TR047' AND bond_type = ' = ';
SELECT EXISTS( SELECT 1 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.atom_id = 'TR001_1' AND T3.label = '+' )
SELECT label FROM molecule WHERE molecule_id = 'TR151';
SELECT T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = 'TR151' AND T2.element IN ('pb', 'hg');
SELECT COUNT(*) FROM carcinogenic_molecules AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT atom_id, molecule_id FROM atom WHERE element = 'c' AND CAST(SUBSTR(molecule_id, 3, 3) AS INTEGER) BETWEEN 10 AND 50;
SELECT COUNT(a.atom_id) FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '+'
SELECT bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = ' = ';
SELECT COUNT(a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND a.element = 'H';
SELECT bond.molecule_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR000_1_2' AND connected.atom_id = 'TR000_1';
SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'
WITH carcinogenic_molecules AS ( SELECT m.molecule_id, COUNT(CASE WHEN a.element = 'h' THEN 1 END) AS hydrogen_count, COUNT(*) AS total_atoms FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' GROUP BY m.molecule_id ) SELECT (hydrogen_count / total_atoms * 100) AS hydrogen_percentage, molecule_id FROM carcinogenic_molecules;
SELECT T1.label FROM molecule AS T1 WHERE T1.molecule_id = 'TR124'
SELECT atom_id FROM atom WHERE molecule_id = 'TR186'
SELECT DISTINCT bond.bond_type FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR007_4_19' LIMIT 1;
SELECT element FROM atom AS a INNER JOIN connected AS c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR001_2_4' UNION SELECT element FROM atom AS a INNER JOIN connected AS c ON a.atom_id = c.atom_id2 WHERE c.bond_id = 'TR001_2_4';
SELECT (SELECT COUNT(DISTINCT bond_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.label = '+') AS double_bonds, (SELECT label FROM molecule WHERE molecule_id = 'TR006') AS is_carcinogenic
SELECT DISTINCT m.molecule_id, m.label FROM molecule AS m INNER JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.element IN ('c', 'h', 'o', 'n', 's', 'cl', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');
SELECT bond.bond_type AS single_bond_type, c1.atom_id AS atom1, a1.element AS atom1_element, c2.atom_id AS atom2, a2.element AS atom2_element FROM bond INNER JOIN connected AS c1 ON bond.bond_id = c1.bond_id INNER JOIN connected AS c2 ON bond.bond_id = c2.bond_id LEFT JOIN atom AS a1 ON c1.atom_id = a1.atom_id LEFT JOIN atom AS a2 ON c2.atom_id = a2.atom_id WHERE bond.bond_type = '-' GROUP BY bond.bond_id;
SELECT DISTINCT m.molecule_id, a.element FROM molecule AS m INNER JOIN bond AS b ON m.molecule_id = b.molecule_id INNER JOIN connected AS c ON b.bond_id = c.bond_id INNER JOIN atom AS a ON c.atom_id = a.atom_id WHERE b.bond_type = '#';
SELECT a1.element AS atom_element1, a2.element AS atom_element2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR000_2_3';
SELECT COUNT(DISTINCT c.bond_id) FROM connected AS c INNER JOIN atom AS a1 ON c.atom_id = a1.atom_id INNER JOIN atom AS a2 ON c.atom_id2 = a2.atom_id WHERE a1.element = 'cl' OR a2.element = 'cl';
SELECT (SELECT atom_id FROM atom WHERE molecule_id = 'TR346') AS atom_id, (SELECT COUNT(DISTINCT bond_type) FROM bond WHERE molecule_id = 'TR346') AS bond_types_count FROM connected WHERE molecule_id = 'TR346';
SELECT COUNT(DISTINCT b.molecule_id) AS total_molecules_with_double_bond, COUNT(CASE WHEN m.label = '+' THEN 1 ELSE NULL END) AS carcinogenic_count FROM bond AS b JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE b.bond_type = ' = ';
SELECT COUNT(molecule_id) AS molecule_count FROM molecule WHERE NOT EXISTS ( SELECT 1 FROM atom WHERE molecule_id = molecule.molecule_id AND element = 's' ) AND NOT EXISTS ( SELECT 1 FROM bond WHERE molecule_id = molecule.molecule_id AND bond_type = '=' );
SELECT m.label FROM bond AS b INNER JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_2_4';
SELECT COUNT(DISTINCT atom.atom_id) FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR001';
SELECT COUNT(*) FROM bond WHERE bond_type = '-'
SELECT COUNT(DISTINCT T1.molecule_id) AS CarcinogenicMolecules FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+' ORDER BY T2.label DESC;
SELECT DISTINCT T1.molecule_id, T4.label FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T1.element = 'c' AND T4.label != '-';
SELECT (SUM(IIF(a.element = 'Cl', 1, 0)) * 100.0) / COUNT(DISTINCT a.atom_id) AS percentage FROM atom a INNER JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+';
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'
SELECT COUNT(DISTINCT T.element) FROM connected AS C INNER JOIN atom AS T ON C.atom_id = T.atom_id WHERE C.bond_id = 'TR001_3_4';
SELECT b.bond_type FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE (c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2') OR (c.atom_id = 'TR000_2' AND c.atom_id2 = 'TR000_1');
SELECT T1.molecule_id, T3.label FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE (T1.atom_id = 'TR000_2' OR T1.atom_id = 'TR000_4') AND (T1.atom_id2 = 'TR000_2' OR T1.atom_id2 = 'TR000_4');
SELECT element FROM atom WHERE atom_id = 'TR000_1'
SELECT label FROM molecule WHERE molecule_id = 'TR000'
SELECT (SELECT COUNT(DISTINCT c.bond_id) FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-') / (SELECT COUNT(DISTINCT c2.bond_id) FROM connected c2) * 100 AS percentage FROM connected;
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'n'
SELECT DISTINCT T3.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 's' AND T3.bond_type = ' = ';
SELECT T1.molecule_id, T1.label FROM molecule AS T1 WHERE T1.label = '-' AND (SELECT COUNT(*) FROM atom WHERE molecule_id = T1.molecule_id) > 5;
SELECT DISTINCT T1.element AS element FROM connected AS T INNER JOIN atom AS T1 ON T.atom_id = T1.atom_id INNER JOIN atom AS T2 ON T.atom_id2 = T2.atom_id WHERE T.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '=' AND molecule_id = 'TR024' ) AND T1.molecule_id = 'TR024' AND T2.molecule_id = 'TR024';
SELECT m.molecule_id, COUNT(a.molecule_id) AS atom_count FROM molecule m INNER JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' GROUP BY m.molecule_id ORDER BY atom_count DESC LIMIT 1;
WITH TotalCancerMolecules AS ( SELECT COUNT(*) as total FROM molecule WHERE label = '+' ), QualifiedMolecules AS ( SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '#' AND a1.element = 'h' AND a2.element = 'h' ) SELECT (COUNT(*) * 100.0) / TotalCancerMolecules.total AS percentage FROM QualifiedMolecules, TotalCancerMolecules;
SELECT COUNT(*) FROM molecule WHERE label = '+'
SELECT COUNT(*) FROM bond WHERE molecule_id BETWEEN 'TR004' AND 'TR010' AND bond_type = '-';
SELECT COUNT(atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR008' AND atom.element = 'c';
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'
SELECT COUNT(DISTINCT T3.molecule_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3a ON T1.atom_id = T3a.atom_id INNER JOIN atom AS T3b ON T1.atom_id2 = T3b.atom_id WHERE T2.bond_type = '=' AND (T3a.element = 'O' OR T3b.element = 'O');
SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T2 INNER JOIN molecule AS T1 ON T2.molecule_id = T1.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'
SELECT DISTINCT T1.element, T3.bond_type FROM molecule AS T LEFT JOIN atom AS T1 ON T.molecule_id = T1.molecule_id LEFT JOIN bond AS T3 ON T.molecule_id = T3.molecule_id WHERE T.molecule_id = 'TR002';
SELECT T1.atom_id, T2.atom_id AS connected_atom_id FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T4 ON T3.bond_id = T4.bond_id INNER JOIN atom AS T2 ON T3.atom_id2 = T2.atom_id WHERE T4.molecule_id = 'TR012' AND T4.bond_type = '= ' AND T1.element = 'c' AND T2.element = 'c';
SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'
SELECT * FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT * FROM cards WHERE borderColor = 'borderless' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL);
SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards);
SELECT name FROM cards WHERE frameVersion = '2015' AND edhrec_rank < 100;
SELECT name, rarity FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'gladiator' AND legalities.status = 'Banned' AND cards.rarity = 'mythic';
SELECT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types LIKE '%Artifact%' AND c.side IS NULL AND l.format = 'vintage';
SELECT cards.id, cards.artist FROM cards WHERE (cards.power = '*' OR cards.power IS NULL) AND EXISTS ( SELECT 1 FROM legalities WHERE legalities.uuid = cards.uuid AND legalities.format = 'commander' AND legalities.status = 'Legal' );
SELECT c.id AS card_id, r.text AS ruling_text, c.hasContentWarning AS has_missing_or_degraded_properties FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniel';
SELECT r.text AS ruling_text FROM rulings AS r JOIN cards AS c ON r.uuid = c.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';
WITH RulingCounts AS ( SELECT c.uuid, c.name AS CardName, c.artist AS Artist, COUNT(r.uuid) AS RulingCount, c.isPromo FROM cards c LEFT JOIN rulings r ON c.uuid = r.uuid GROUP BY c.uuid ) SELECT CardName, Artist, RulingCount, isPromo FROM RulingCounts WHERE RulingCount = ( SELECT MAX(RulingCount) FROM RulingCounts );
SELECT foreign_data.name, foreign_data.text FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'annul' AND cards.number = '29';
SELECT cards.name FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Japanese';
SELECT (COUNT(DISTINCT fd.uuid) / (SELECT COUNT(DISTINCT uuid) FROM foreign_data)) * 100 AS percentage FROM foreign_data fd WHERE fd.language = 'Chinese Simplified';
SELECT DISTINCT s.code AS.setCode, s.totalSetSize AS totalCardCount FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE st.language = 'Italian';
SELECT COUNT(DISTINCT type) AS NumberOfTypes FROM cards WHERE artist = 'Aaron Boyd';
SELECT keywords FROM cards WHERE LOWER(name) = LOWER('Angel of Mercy')
SELECT COUNT(power) FROM cards WHERE power = '*'
SELECT promoTypes FROM cards WHERE name = 'Duress';
SELECT borderColor FROM cards WHERE name = "Ancestor's Chosen";
SELECT originalType FROM cards WHERE name = 'Ancestor's Chosen';
SELECT DISTINCT language FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Angel of Mercy';
SELECT COUNT(*) FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'restricted' AND cards.isTextless = 0;
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor\'s Chosen';
SELECT COUNT(DISTINCT cards.uuid) AS restricted_starter_cards_count FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1;
SELECT DISTINCT legal.status FROM cards LEFT JOIN legalities legal ON cards.uuid = legal.uuid WHERE cards.name = 'Cloudchaser Eagle';
SELECT type FROM cards WHERE name = 'Benalish Knight'
SELECT DISTINCT legalities.format FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.name = 'Benalish Knight'
SELECT DISTINCT c.artist AS ArtistName FROM cards c INNER JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Phyrexian';
-- Count of borderless cards SELECT COUNT(id) AS borderless_count FROM cards WHERE borderColor = 'borderless'; -- Total number of cards SELECT COUNT(id) AS total_count FROM cards;
SELECT COUNT(DISTINCT c.uuid) AS NumberOfGermanReprints FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'German' AND c.isReprint = 1;
SELECT COUNT(DISTINCT c.uuid) AS russian_borderless_count FROM cards c INNER JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'borderless' AND fd.language = 'Russian';
WITH StoryFrenchCount AS ( SELECT COUNT(*) AS FrenchCount FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French' AND cards.isStorySpotlight = 1 ), TotalStoryCount AS ( SELECT COUNT(*) AS TotalCount FROM cards WHERE isStorySpotlight = 1 ) SELECT (FrenchCount / TotalCount) * 100 AS FrenchPercentage FROM StoryFrenchCount, TotalStoryCount;
SELECT COUNT(id) FROM cards WHERE toughness = '99'
SELECT name FROM cards WHERE artist = 'Aaron Boyd';
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';
SELECT id, name FROM cards WHERE convertedManaCost = 0;
SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%flying%'
SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel';
SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT id FROM cards WHERE duelDeck = 'a';
SELECT edhrecRank FROM cards WHERE frameVersion = '2015';
SELECT cards.name AS artist_name, foreign_data.name AS card_name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified';
SELECT cards.uuid FROM cards WHERE cards.availability = 'paper' AND EXISTS ( SELECT 1 FROM foreign_data WHERE foreign_data.uuid = cards.uuid AND foreign_data.language = 'Japanese' );
SELECT COUNT(*) FROM cards WHERE status = 'Banned' AND borderColor = 'white';
SELECT c.uuid, fd.language AS foreign_language FROM cards c JOIN legalities l ON c.uuid = l.uuid LEFT JOIN foreign_data fd ON c.uuid = fd.uuid WHERE l.format = 'legacy' GROUP BY c.uuid;
SELECT rulings.text FROM rulings JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Beacon of Immortality';
SELECT COUNT(DISTINCT cards.uuid) AS card_count, legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = 'future' AND legalities.status = 'legal';
SELECT name, color FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.code = 'OGW';
SELECT c.name AS card_name, c.manaCost AS mana_cost, fd.language AS language, fd.flavorText AS flavor_text FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.setCode = '10E' AND c.convertedManaCost = 5 GROUP BY c.name, c.manaCost, fd.language, fd.flavorText;
SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'
SELECT c.colors, l.format FROM cards c LEFT JOIN legalities l ON c.uuid = l.uuid WHERE c.id BETWEEN 1 AND 20 AND l.status = 'Legal';
SELECT c.* FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.originalType = 'Artifact' AND c.colors LIKE '%B%' AND fd.language IS NOT NULL;
SELECT name FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE rarity = 'uncommon' ORDER BY date ASC LIMIT 3;
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NULL;
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = '-1';
SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;
SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability = 'mtgo,paper';
