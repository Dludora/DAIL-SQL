SELECT count(*) FROM club
SELECT count(*) FROM club
SELECT Name FROM club ORDER BY Name ASC
SELECT Name FROM club ORDER BY Name ASC
SELECT Manager, Captain FROM club
SELECT Manager, Captain FROM club
SELECT Name FROM club WHERE Manufacturer!= "Nike"
SELECT Name FROM club WHERE Manufacturer!= "Nike"
SELECT Name FROM player ORDER BY Wins_count ASC
SELECT Name FROM player GROUP BY Name ORDER BY COUNT(Wins_count) ASC
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000
SELECT Country FROM player WHERE Earnings > 1200000
SELECT T1.Country FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Wins_count > 2 ORDER BY T1.Earnings DESC LIMIT 1
SELECT T1.Country FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Wins_count > 2 GROUP BY T1.Country ORDER BY sum(T1.Earnings) DESC LIMIT 1
SELECT T1.Name, T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID
SELECT T1.Name, T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Name HAVING COUNT(*) > 2
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Name HAVING COUNT(*) > 2
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Manager = "Sam Allardyce"
SELECT T1.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Manager = "Sam Allardyce"
SELECT Name FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name ORDER BY avg(player.Earnings) DESC
SELECT T1.Name, avg(T2.Earnings) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Name ORDER BY avg(T2.Earnings) DESC
SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer
SELECT manufacturer, COUNT(*) FROM club GROUP BY manufacturer
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY count(*) DESC LIMIT 1
SELECT T1.Manufacturer FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Manufacturer HAVING COUNT(*) > 1
SELECT T1.Manufacturer FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Manufacturer HAVING count(*) > 1
SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1
SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings < 1100000
SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings < 1100000
SELECT count(DISTINCT Country) FROM player
SELECT count(DISTINCT Country) FROM player
SELECT Earnings FROM player WHERE Country = "Australia" OR Country = "Zimbabwe"
SELECT Earnings FROM player WHERE Country = "Australia" OR Country = "Zimbabwe"
SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2 INTERSECT SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING count(*) > 3
SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT(*) >= 3 AND COUNT(DISTINCT T2.order_id) > 2
SELECT T1.order_id, T1.order_status_code, count(*) FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id
SELECT COUNT(T1.order_item_id), T1.order_status_code, T1.order_id FROM Order_Items AS T1 GROUP BY T1.order_id
SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING COUNT(*) > 1 OR T1.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)
SELECT date_order_placed FROM Orders WHERE order_item_id > 1 SELECT MIN(date_order_placed) FROM Orders
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id
SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) >= 2)
SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) < 2)
SELECT T1.order_id, T1.date_order_placed FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING count(*) >= 2
SELECT T1.order_id, T1.date_order_placed FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING count(*) >= 2
SELECT t2.product_id, t2.product_name, t2.product_price FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1
SELECT product_id, product_name, product_price FROM products ORDER BY count(*) DESC
SELECT order_id, SUM(product_price) FROM Order_Items GROUP BY order_id ORDER BY SUM(product_price) ASC LIMIT 1
SELECT T1.order_id, T1.total_cost FROM invoices AS T1 JOIN shipments AS T2 ON T1.invoice_number = T2.invoice_number ORDER BY T1.total_cost LIMIT 1
SELECT /* Answer the following: What is the most popular full name of the actors? */ SELECT /* Answer the following: What is the most used instrument? */ SELECT /* Answer the following: Find the name of the most popular party form. */ SELECT /* Answer the following: What is the product ID of the most frequently ordered item on invoices? */ SELECT /* Answer the following: What is the description of the most popular role among users that have logged in? */ SELECT /* Answer the following: Show the most common country across members. */ SELECT /* Answer the following: What is the most common amenity in the dorms? */ SELECT
SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1
SELECT gender_code, COUNT(*) FROM Customers GROUP BY gender_code
SELECT gender_code, COUNT(*) FROM Customers GROUP BY gender_code
SELECT gender_code, count(*) FROM Customers GROUP BY gender_code
SELECT gender_code, count(*) FROM Customers GROUP BY gender_code
SELECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name, T2.payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id
SELECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name, T2.payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id
SELECT T1.invoice_status_code, T1.invoice_date, T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number
SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number
SELECT T2.product_name, T3.shipment_date FROM Shipment_Items AS T1 JOIN Order_Items AS T2 ON T1.order_item_id = T2.order_item_id JOIN Shipments AS T3 ON T1.shipment_id = T3.shipment_id
SELECT T1.product_name, T2.shipment_date FROM Products AS T1 JOIN Shipment_Items AS T2 ON T1.product_id = T2.order_item_id
SELECT T1.order_item_status_code, T2.shipment_tracking_number FROM Order_Items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id = T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id = T3.shipment_id
SELECT T1.order_item_status_code, T2.shipment_tracking_number FROM Order_Items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id = T2.order_item_id WHERE T1.order_item_status_code = "Ordered" AND T2.shipment_tracking_number IS NOT NULL
SELECT T1.product_name, T1.product_color FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id JOIN Shipments AS T3 ON T2.order_item_id = T3.order_item_id
SELECT T1.product_name, T1.product_color FROM Products AS T1 JOIN Shipment_Items AS T2 ON T1.product_id = T2.product_id JOIN Shipments AS T3 ON T2.shipment_id = T3.shipment_id
SELECT DISTINCT T3.product_name, T3.product_price, T3.product_description FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id JOIN customers AS T4 ON T1.customer_id = T4.customer_id WHERE T4.gender_code = 'F'
SELECT T1.product_name, T1.product_price, T1.product_description FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T2.order_id = T3.order_id JOIN Customers AS T4 ON T3.customer_id = T4.customer_id WHERE T4.gender_code = 'F'
SELECT T1.invoice_status_code FROM invoices AS T1 JOIN orders AS T2 ON T1.invoice_number = T2.invoice_number WHERE T2.order_status_code <> "Shipped"
SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM Shipments)
SELECT order_id, date_order_placed, sum(product_price) FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id
SELECT /* Answer the following: For each order, what is its id, date, and total amount paid? */ SELECT /* Answer the following: For each order, what is its id, date, and total amount paid? */ SELECT /* Answer the following: For each order, what is its id, date, and total amount paid? */ SELECT /* Answer the following: For each order, what is its id, date, and total amount paid? */ SELECT /* Answer the following: For each order, what is its id, date, and total amount paid? */ SELECT /* Answer the following: For each order, what is its id, date, and total amount paid? */ SELECT /* Answer the following: For each order, what is its id, date, and total amount paid? */ SELECT /* Answer the following: For each order, what is its id, date, and total amount paid? */ SELECT /* Answer the following: For each order, what is its id, date, and total amount paid? */ SELECT /* Answer the following: For each order, what is its id, date, and total amount
SELECT COUNT(DISTINCT customer_id) FROM Orders
SELECT count(DISTINCT customer_id) FROM orders
SELECT count(DISTINCT order_item_status_code) FROM Order_Items
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items
SELECT count(DISTINCT payment_method) FROM customers
SELECT count(DISTINCT payment_method_code) FROM Customer_Payment_Methods
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'
SELECT product_size FROM WHERE LIKE '%Dell%'
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)
SELECT product_price, product_size FROM products WHERE product_price > (SELECT AVG(product_price) FROM products)
SELECT count(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)
SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )
SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )
SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)
SELECT order_status_code, date_order_placed FROM Orders
SELECT order_status_code, date_order_placed FROM Orders
SELECT T1.address_line_1, T1.town_city, T1.county FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.country = "USA"
SELECT address_line_1, town_city, county, country FROM Customers WHERE country = 'United States'
SELECT T1.customer_first_name, T3.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id
SELECT T1.customer_first_name, T3.product_name FROM Customers AS T1 JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id JOIN Products AS T3 ON T2.product_id = T3.product_id
SELECT count(*) FROM Shipment_Items
SELECT count(*) FROM Shipment_Items
SELECT avg(product_price) FROM products
SELECT avg(product_price) FROM products
SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id
SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T2.order_id = T3.order_id JOIN Shipments AS T4 ON T3.order_id = T4.order_id JOIN Invoices AS T5 ON T4.invoice_number = T5.invoice_number WHERE T5.invoice_status_code = 'PAID'
SELECT email_address, town_city, county FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1
SELECT /* Answer the following: What are the names of all products that are not in stock? */ SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Products WHERE product_price > 0) /* Answer the following: What are the names of all products that are in stock? */ SELECT product_name FROM Products WHERE product_id IN (SELECT product_id FROM Products WHERE product_price > 0) /* Answer the following: What are the names of all products that are in stock and have a price greater than 0? */ SELECT product_name FROM Products WHERE product_id IN (SELECT product_id FROM Products WHERE product_price > 0) AND product_price > 0 /* Answer the following: What are the names of all products that are not in stock and have a price greater than 0? */ SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Products WHERE product_price > 0) AND product_price >
SELECT T1.date_order_placed FROM Orders AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2
SELECT T1.date_order_placed FROM Orders AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.order_id HAVING COUNT(*) >= 2
SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) ASC LIMIT 1
SELECT product_id, product_description FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3
SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*) > 3)
SELECT T1.invoice_date, T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number HAVING count(*) >= 2
SELECT T1.invoice_date, T1.invoice_number FROM invoices AS T1 JOIN shipments AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number HAVING COUNT(*) >= 2
SELECT shipment_tracking_number, shipment_date FROM Shipments
SELECT shipment_tracking_number, shipment_date FROM Shipments
SELECT product_color, product_description, product_size FROM products WHERE product_price < (SELECT MAX(product_price) FROM products)
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products)
SELECT Name FROM director WHERE Age > (SELECT avg(Age) FROM director)
SELECT Name FROM director ORDER BY Age DESC LIMIT 1
SELECT count(*) FROM channel WHERE Internet LIKE "%bbc%"
SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel
SELECT Title FROM program ORDER BY Start_Year DESC
SELECT T1.Name FROM director AS T1 JOIN director_admin AS T2 ON T1.Director_ID = T2.Director_ID GROUP BY T1.Director_ID ORDER BY count(*) DESC LIMIT 1
SELECT T1.Name, T1.Age FROM director AS T1 JOIN director_admin AS T2 ON T1.Director_ID = T2.Director_ID GROUP BY T1.Director_ID ORDER BY count(*) DESC LIMIT 1
SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1
SELECT T2.Name, T2.Internet FROM program AS T1 JOIN channel AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T1.Channel_ID HAVING COUNT(*) > 1
SELECT count(*), T1.Name FROM program AS T1 JOIN channel AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T2.Name
SELECT count(*) FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program)
SELECT T2.Name FROM program AS T1 JOIN director AS T2 ON T1.Director_ID = T2.Director_ID WHERE T1.Title = "Dracula"
SELECT T1.Name, T1.Internet FROM director AS T1 JOIN director_admin AS T2 ON T1.Director_ID = T2.Director_ID GROUP BY T1.Name, T1.Internet ORDER BY count(*) DESC LIMIT 1
SELECT Name FROM director WHERE Age BETWEEN 30 AND 60
SELECT T1.Name FROM channel AS T1 JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID JOIN director AS T3 ON T2.Director_ID = T3.Director_ID WHERE T3.Age < 40 INTERSECT SELECT T1.Name FROM channel AS T1 JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID JOIN director AS T3 ON T2.Director_ID = T3.Director_ID WHERE T3.Age > 60
SELECT Channel_ID, Name FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM director WHERE Name = 'Hank Baskett')
SELECT count(*) FROM radio
SELECT Transmitter FROM radio ORDER BY ERP_kW ASC
SELECT tv_show_name, Original_Airdate FROM tv_show
SELECT Station_name FROM city_channel WHERE Affiliation!= "ABC"
SELECT T1.Transmitter FROM RADIO AS T1 JOIN CITY_CHANNEL_RADIO AS T2 ON T1.Radio_ID = T2.Radio_ID WHERE T2.Is_online = 1 AND (T1.ERP_kW > 150 OR T1.ERP_kW < 30)
SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1
SELECT avg(ERP_kW) FROM radio
SELECT Affiliation, COUNT(*) FROM city_channel GROUP BY Affiliation
SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 3
SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC
SELECT T1.Transmitter, T2.City FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID
SELECT T2.Transmitter, T1.Station_name FROM city_channel AS T1 JOIN city_channel_radio AS T2 ON T1.ID = T2.City_channel_ID JOIN radio AS T3 ON T2.Radio_ID = T3.Radio_ID ORDER BY T3.ERP_kW DESC
SELECT T1.Transmitter, COUNT(*) FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID GROUP BY T1.Transmitter
SELECT DISTINCT T1.Transmitter FROM radio AS T1 LEFT JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID WHERE T2.Radio_ID IS NULL
SELECT T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.Top_Speed = (SELECT max(Top_Speed) FROM vehicle WHERE Power > 6000)
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1
SELECT Name FROM driver WHERE Citizenship = 'United States'
SELECT Name FROM driver WHERE Citizenship = "United States"
SELECT count(*), Driver_ID FROM vehicle_driver GROUP BY Driver_ID ORDER BY count(*) DESC LIMIT 1
SELECT T1.Driver_ID, count(*) FROM vehicle_driver AS T1 GROUP BY T1.Driver_ID ORDER BY count(*) DESC LIMIT 1
SELECT max(Power), avg(Power) FROM vehicle WHERE Builder = "Zhuzhou"
SELECT max(Power), avg(Power) FROM vehicle WHERE Builder = "Zhuzhou"
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY count(*) ASC LIMIT 1
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY count(*) ASC LIMIT 1
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = "1996"
SELECT Build_Year, Model, Builder FROM vehicle
SELECT Build_Year, Model, Builder FROM vehicle
SELECT count(distinct Driver_ID) FROM vehicle_driver, vehicle WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND Build_Year = 2012
SELECT COUNT(DISTINCT d.Driver_ID) FROM driver AS d JOIN vehicle_driver AS v ON d.Driver_ID = v.Driver_ID JOIN vehicle AS t ON v.Vehicle_ID = t.Vehicle_ID WHERE t.Build_Year = "2012"
SELECT count(*) FROM driver WHERE Racing_Series = 'NASCAR'
SELECT count(distinct driver_id) FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.racing_series = "NASCAR"
SELECT avg(Top_Speed) FROM vehicle
SELECT avg(Top_Speed) FROM vehicle
SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Power > 5000
SELECT T2.Name FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.Power > 5000
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150
SELECT T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.Total_Production > 100 OR T1.Top_Speed > 150
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE "%DJ%"
SELECT T1.Model, T1.Build_Year FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.Model LIKE "%DJ%"
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)
SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Vehicle_ID HAVING count(*) >= 2 UNION SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T3.Builder = 'Ziyang'
SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING count(*) = 2) OR Builder = "Ziyang"
SELECT Vehicle_ID, Model FROM vehicle_driver GROUP BY Vehicle_ID, Model HAVING count(*) > 2 UNION SELECT Vehicle_ID, Model FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Name = 'Jeff Gordon'
SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(*) > 2) OR Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID = (SELECT Driver_ID FROM driver WHERE Name = "Jeff Gordon"))
SELECT count(*) FROM vehicle WHERE Top_Speed = (SELECT max(Top_Speed) FROM vehicle)
SELECT count(*) FROM vehicle WHERE Top_Speed = (SELECT max(Top_Speed) FROM vehicle)
SELECT Name FROM driver ORDER BY Name
SELECT Name FROM driver ORDER BY Name ASC
SELECT T1.Racing_Series, count(*) FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Racing_Series
SELECT count(*), Racing_Series FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID GROUP BY Racing_Series
SELECT T1.Name, T1.Citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Model = 'DJ1'
SELECT T1.Name, T1.Citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Model = "DJ1"
SELECT count(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver)
SELECT count(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)
SELECT count(*) FROM Exams
SELECT count(*) FROM Exams
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC
SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code!= "Database"
SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code <> "Database"
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE "%data%" ORDER BY Exam_Date DESC
SELECT Type_of_Question_Code, count(*) FROM Questions GROUP BY Type_of_Question_Code
SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = "Normal"
SELECT DISTINCT T3.Student_Answer_Text FROM Student_Answers AS T1 JOIN Student_Assessments AS T2 ON T1.Student_Answer_ID = T2.Student_Answer_ID JOIN Students AS T3 ON T1.Student_ID = T3.Student_ID WHERE T2.Comments = "Normal"
SELECT count(DISTINCT Comments) FROM Student_Answers
SELECT count(DISTINCT Comments) FROM Student_Answers
SELECT Student_Answer_Text, COUNT(*) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC
SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC
SELECT First_Name, Date_of_Answer FROM Student_Answers
SELECT First_Name, Date_of_Answer FROM Student_Answers
SELECT Student_ID, Email_Adress, Date_of_Answer FROM Student_Answers ORDER BY Date_of_Answer DESC
SELECT Explanation: To answer the question, we need to retrieve the email address of the student and the date of the answer for each student answer. We can use the Student_Answers table to get the email address and the date of the answer. We can then sort the results in descending order of the dates using the ORDER BY clause.
SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1
SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY count(*) ASC LIMIT 1
SELECT First_Name FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID GROUP BY Student_Answers.Student_ID HAVING COUNT(*) >= 2
SELECT T1.First_Name FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID GROUP BY T2.Student_ID HAVING COUNT(*) >= 2
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1
SELECT Last_Name FROM Students WHERE Gender_MFU!= "M"
SELECT Last_Name FROM Students WHERE Gender_MFU <> 'M'
SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU
SELECT Gender_MFU, count(*) FROM Students GROUP BY Gender_MFU
SELECT Last_Name FROM Students WHERE Gender_MFU IN ("F", "M")
SELECT Last_Name FROM Students WHERE Gender_MFU = "F" OR Gender_MFU = "M"
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = "Normal" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = "Absent"
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = "Normal" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = "Absent"
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3
SELECT * FROM Students
SELECT * FROM Students
SELECT count(*) FROM Addresses
SELECT count(*) FROM Addresses
SELECT address_id, address_details FROM Addresses
SELECT address_id, address_details FROM Addresses
SELECT count(*) FROM Products
SELECT count(*) FROM Products
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_price FROM Products WHERE product_name = 'Monitor'
SELECT product_price FROM Products WHERE product_name = 'Monitor'
SELECT min(product_price), avg(product_price), max(product_price) FROM products
SELECT min(product_price), avg(product_price), max(product_price) FROM Products
SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes'
SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes'
SELECT count(*) FROM Products WHERE product_type_code = 'Hardware'
SELECT count(*) FROM Products WHERE product_type_code = "Hardware"
SELECT product_name FROM Products WHERE product_price > (SELECT avg(product_price) FROM Products)
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT avg(product_price) FROM Products WHERE product_type_code = 'Hardware')
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT avg(product_price) FROM Products WHERE product_type_code = 'Hardware')
SELECT product_name FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1
SELECT product_name FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price LIMIT 1
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price LIMIT 1
SELECT Product_Name FROM Products ORDER BY Product_Price DESC
SELECT product_name FROM Products ORDER BY product_price DESC
SELECT product_name, product_price FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC
SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC
SELECT product_type_code, count(*) FROM Products GROUP BY product_type_code
SELECT product_type_code, count(*) FROM Products GROUP BY product_type_code
SELECT product_type_code, avg(product_price) FROM products GROUP BY product_type_code
SELECT product_type_code, avg(product_price) FROM products GROUP BY product_type_code
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*) >= 2
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1
SELECT count(*) FROM Customers
SELECT count(*) FROM Customers
SELECT customer_id, customer_name FROM Customers
SELECT customer_id, customer_name FROM Customers
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = "Jeromy"
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = "Jeromy"
SELECT payment_method_code, count(*) FROM Customers GROUP BY payment_method_code
SELECT payment_method_code, count(*) FROM customers GROUP BY payment_method_code
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT customer_name, payment_method_code, COUNT(*) FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1
SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = "Jeromy"
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = "Jeromy"
SELECT DISTINCT payment_method_code FROM Customers
SELECT DISTINCT payment_method_code FROM Customers
SELECT product_id, product_type_code FROM Products ORDER BY product_name
SELECT product_id, product_type_code FROM Products ORDER BY product_name
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1
SELECT count(*) FROM Customer_Orders
SELECT count(*) FROM Customer_Orders
SELECT order_id, order_date, order_status_code FROM Customer_Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_name = "Jeromy"
SELECT T1.order_id, T1.order_date, T1.order_status_code FROM Customer_Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_name = "Jeromy"
SELECT T1.customer_name, T1.customer_id, COUNT(*) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT T1.customer_id, T1.customer_name, T1.customer_email, count(*) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT order_status_code, count(*) FROM Customer_Orders GROUP BY order_status_code
SELECT order_status_code, count(*) FROM Customer_Orders GROUP BY order_status_code
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1
SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)
SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)
SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)
SELECT count(*) FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Products.product_name = "Monitor"
SELECT sum(O.order_quantity) FROM Products AS P JOIN Order_Items AS O ON P.product_id = O.product_id WHERE P.product_type_code = 'Monitor'
SELECT COUNT(DISTINCT customer_id) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'
SELECT COUNT(DISTINCT t1.customer_id) FROM Customers AS t1 JOIN Customer_Orders AS t2 ON t1.customer_id = t2.customer_id JOIN Order_Items AS t3 ON t2.order_id = t3.order_id JOIN Products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_type_code = "Monitor"
SELECT count(DISTINCT customer_id) FROM Customer_Orders
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders
SELECT customer_id FROM Customers EXCEPT SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)
SELECT T1.order_date, T1.order_id FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING count(*) > 3 OR max(T2.order_quantity) > 6
SELECT T1.order_id, T1.order_date FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING COUNT(T2.order_item_id) > 3 OR SUM(T2.order_quantity) > 6
SELECT count(*) FROM building
SELECT count(*) FROM building
SELECT Name FROM building ORDER BY Number_of_Stories ASC
SELECT Name FROM building ORDER BY Number_of_Stories ASC
SELECT Address FROM building ORDER BY Completed_Year DESC
SELECT Address FROM building ORDER BY Completed_Year DESC
SELECT max(Number_of_Stories) FROM building WHERE Completed_Year!= 1980
SELECT max(Number_of_Stories) FROM building WHERE Completed_Year!= 1980
SELECT avg(Population) FROM region
SELECT avg(Population) FROM region
SELECT Name FROM region ORDER BY Name ASC
SELECT Name FROM region ORDER BY Name ASC
SELECT T1.Capital FROM region AS T1 JOIN building AS T2 ON T1.Region_ID = T2.Region_ID WHERE T1.Area > 10000
SELECT Capital FROM region WHERE Area > 10000
SELECT Capital FROM region ORDER BY Population DESC LIMIT 1
SELECT t1.Capital FROM region AS t1 JOIN building AS t2 ON t1.Region_ID = t2.Region_ID GROUP BY t1.Capital ORDER BY COUNT(*) DESC LIMIT 1
SELECT Name FROM region ORDER BY Area DESC LIMIT 5
SELECT Name FROM region ORDER BY Area DESC LIMIT 5
SELECT T1.Name, T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Name, T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Name FROM region AS T1 JOIN building AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Name HAVING COUNT(*) > 1
SELECT T1.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*) > 1
SELECT T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT r.Name, r.Capital FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name, r.Capital ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Address, T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Address, T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT Number_of_Stories FROM building WHERE Region_ID IN (SELECT Region_ID FROM region WHERE Name = "Abruzzo")
SELECT T1.Name, T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Name = "Abruzzo"
SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year
SELECT Completed_Year, count(*) FROM building GROUP BY Completed_Year
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1
SELECT max(Completed_Year) FROM building
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15
SELECT T1.Completed_Year FROM building AS T1 JOIN building AS T2 ON T1.Completed_Year = T2.Completed_Year WHERE T1.Number_of_Stories > 20 INTERSECT SELECT T1.Completed_Year FROM building AS T1 JOIN building AS T2 ON T1.Completed_Year = T2.Completed_Year WHERE T1.Number_of_Stories < 15
SELECT DISTINCT Address FROM building
SELECT DISTINCT Address FROM building
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
SELECT Channel_Details FROM Channels ORDER BY Channel_Details
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC
SELECT count(*) FROM Services
SELECT count(*) FROM Services
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY count(*) DESC LIMIT 1
SELECT * FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customer_Details = "Hardy Kutch"
SELECT Services.Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = "Hardy Kutch"
SELECT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID GROUP BY Service_ID HAVING count(*) > 3
SELECT Services.Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID GROUP BY Services.Service_ID HAVING COUNT(*) > 3
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_Details ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)
SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Services AS T3 ON T2.Service_ID = T3.Service_ID GROUP BY T1.Customer_ID ORDER BY COUNT(*) ASC LIMIT 1
SELECT DISTINCT Customer_Details FROM Customers_and_Services AS t1 JOIN Services AS t2 ON t1.Service_ID = t2.Service_ID GROUP BY Customer_Details ORDER BY count(*) ASC LIMIT 1
SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services
SELECT count(*) FROM Customers_and_Services
SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE "%Kutch%"
SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch")) OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = "good")
SELECT T1.Service_Details FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch") OR (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Status_Code = "good") IN (SELECT Customer_Interaction_ID FROM Customers_and_Services AS T1 JOIN Customer_Interactions AS T2 ON T1.Customers_and_Services_ID = T2.Customers_and_Services_ID WHERE T1.Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch"))
SELECT T1.Service_Details FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID JOIN Customer_Interactions AS T3 ON T2.Customers_and_Services_ID = T3.Customers_and_Services_ID WHERE T3.Status_Code = "Bad" AND T2.Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch") INTERSECT SELECT T1.Service_Details FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID JOIN Customer_Interactions AS T3 ON T2.Customers_and_Services_ID = T3.Customers_and_Services_ID WHERE T3.Status_Code = "Bad" AND T2.Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch")
SELECT Services.Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID JOIN Customer_Interactions ON Customers_and_Services.Customers_and_Services_ID = Customer_Interactions.Customers_and_Services_ID WHERE Customer_Interactions.Status_Code = "bad" AND Customers.Customer_Details = "Hardy Kutch"
SELECT T1.Service_Details FROM Services AS T1 JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID JOIN Integration_Platform AS T3 ON T2.Customer_Interaction_ID = T3.Customer_Interaction_ID WHERE T3.Integration_Platform_Details = "15 ij"
SELECT T1.Service_Details FROM Services AS T1 JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID JOIN Channels AS T3 ON T2.Channel_ID = T3.Channel_ID WHERE T3.Channel_Details = "15 ij"
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status_Code = "Stuck" AND T2.Services_and_Channels_Details = "bad"
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status_Code = "Stuck" AND T2.Services_and_Channels_Details = "bad"
SELECT count(*) FROM Integration_Platform WHERE Status_Code = "Successful"
SELECT count(*) FROM Integration_Platform AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_Interaction_ID = T2.Customer_Interaction_ID WHERE T1.Integration_Platform_Details LIKE "%Success%"
SELECT Customers.Customer_Details FROM Customers JOIN Customer_Interactions ON Customer_Interactions.Customer_ID = Customers.Customer_ID JOIN Integration_Platform ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Integration_Platform.Integration_Platform_Details = "Failed"
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Integration_Platform AS T3 ON T2.Customer_Interaction_ID = T3.Customer_Interaction_ID WHERE T3.Integration_Platform_Details = "Fail"
SELECT /* Answer the following: Which service ( s ) has never been used by any customer? List their details. */ SELECT Service_Details FROM Services EXCEPT SELECT T1.Service_Details FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID
SELECT Services.Service_Details FROM Services LEFT JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_ID IS NULL
SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
SELECT Analytical_Layer_Type_Code, count(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
SELECT Services.Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID JOIN Customer_Interactions ON Customers_and_Services.Customers_and_Services_ID = Customer_Interactions.Customers_and_Services_ID WHERE Customer_Interactions.Status_Code = "unsatisfied"
SELECT T1.Service_Details FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID JOIN Customer_Interactions AS T3 ON T2.Customers_and_Services_ID = T3.Customers_and_Services_ID WHERE T3.Status_Code = "unsatisfied"
SELECT count(*) FROM Vehicles
SELECT count(*) FROM Vehicles
SELECT name FROM Vehicles ORDER BY Model_year DESC
SELECT name FROM Vehicles ORDER BY Model_year DESC
SELECT DISTINCT Type_of_powertrain FROM Vehicles
SELECT DISTINCT Type_of_powertrain FROM Vehicles
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013
SELECT DISTINCT T2.Type_of_powertrain FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id WHERE T1.Model_year = 2013 INTERSECT SELECT DISTINCT T2.Type_of_powertrain FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id WHERE T1.Model_year = 2014
SELECT Type_of_powertrain, count(*) FROM Vehicles GROUP BY Type_of_powertrain
SELECT Type_of_powertrain, count(*) FROM Vehicles GROUP BY Type_of_powertrain
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY count(*) DESC LIMIT 1
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY count(*) DESC LIMIT 1
SELECT min(Annual_fuel_cost), max(Annual_fuel_cost), avg(Annual_fuel_cost) FROM Vehicles
SELECT min(Annual_fuel_cost), max(Annual_fuel_cost), avg(Annual_fuel_cost) FROM Vehicles
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate
SELECT T2.Type_of_powertrain, avg(T2.Annual_fuel_cost) FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id GROUP BY T2.Type_of_powertrain HAVING COUNT(*) >= 2
SELECT T1.Type_of_powertrain, avg(T1.Annual_fuel_cost) FROM Vehicles AS T1 GROUP BY T1.Type_of_powertrain HAVING COUNT(*) >= 2
SELECT name, age, membership_credit FROM Customers
SELECT name, age, membership_credit FROM Customers
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1
SELECT avg(age) FROM Customers WHERE membership_credit > (SELECT avg(membership_credit) FROM Customers)
SELECT avg(age) FROM Customers WHERE membership_credit > (SELECT avg(membership_credit) FROM Customers)
SELECT * FROM Discount
SELECT * FROM Discount
SELECT T2.name, SUM(T3.total_hours) FROM Renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicles_id = T2.id JOIN Discount AS T3 ON T1.discount_id = T3.id GROUP BY T2.name
SELECT T1.name, sum(T2.total_hours) FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id GROUP BY T1.name
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)
SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2)
SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2)
SELECT name, Model_year FROM Vehicles ORDER BY count(*) DESC LIMIT 1
SELECT T1.name, T1.Model_year FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id ORDER BY T2.total_hours DESC
SELECT name FROM Vehicles ORDER BY total_hours DESC
SELECT name FROM Discount WHERE id IN (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT name FROM Discount WHERE id IN (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY count(*) DESC LIMIT 1)
SELECT T1.name, T1.Type_of_powertrain FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id WHERE T2.total_hours > 30
SELECT name, Type_of_powertrain FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.id HAVING sum(total_hours) > 30
SELECT Type_of_powertrain, AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain
SELECT Type_of_powertrain, AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain
SELECT avg(amount_of_loan) FROM Student_Loans
SELECT avg(amount_of_loan) FROM Student_Loans
SELECT /* Answer the following: List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions. */ SELECT /* Answer the following: List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions. */ SELECT /* Answer the following: List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions. */ SELECT /* Answer the following: List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions. */ SELECT /* Answer the following: List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions. */ SELECT /* Answer the following: List the biographical data
SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2 UNION SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) < 2
SELECT T2.teacher_details FROM CLASS AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.class_details LIKE '%data%' EXCEPT SELECT T2.teacher_details FROM CLASS AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.class_details LIKE 'net%'
SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_details LIKE '%data%' AND T2.class_details NOT LIKE 'net%'
SELECT bio_data FROM Students EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id = T2.student_id UNION SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id
SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)
SELECT loan_amount, loan_date FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2)
SELECT T1.student_id, T1.amount_of_loan, T1.date_of_loan FROM student_loans AS T1 JOIN achievements AS T2 ON T1.student_loan_id = T2.student_loan_id GROUP BY T1.student_id HAVING COUNT(*) >= 2
SELECT T2.teacher_details, T2.teacher_id FROM Classes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id ORDER BY count(*) DESC LIMIT 1
SELECT T2.teacher_details, T2.teacher_id FROM Classes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id ORDER BY count(*) DESC LIMIT 1
SELECT DISTINCT detention_summary FROM detention
SELECT DISTINCT detention_summary FROM Detention
SELECT T1.student_id, T1.bio_data, T1.student_details, T2.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id = T2.student_id
SELECT T1.student_id, T1.bio_data, T1.student_details, T2.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id = T2.student_id
SELECT /* Answer the following: List the transcript details and the date of the transcript for each student. */ SELECT /* Answer the following: List the behaviour monitoring details and the date of the behaviour monitoring for each student. */ SELECT /* Answer the following: List the address details and the address type code for each student. */ SELECT /* Answer the following: List the event details and the date of the event for each student. */ SELECT /* Answer the following: List the loan details and the date of the loan for each student. */ SELECT /* Answer the following: List the class details and the teacher details for each student. */ SELECT /* Answer the following: List the detention details and the detention type code for each student. */ SELECT /* Answer the following: List the achievement details and the achievement type code for each student. */ SELECT
SELECT T1.address_details, T2.bio_data FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.student_id
SELECT T1.bio_data, T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id
SELECT T1.bio_data, T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id
SELECT /* Answer the following: How many students have the most common address type? Also list the address type details. */ SELECT /* Answer the following: How many students have the most common detention type? Also list the detention type details. */ SELECT /* Answer the following: How many students have the most common achievement type? Also list the achievement type details. */ SELECT /* Answer the following: How many students have the most common event type? Also list the event type details. */ SELECT /* Answer the following: How many students have the most common loan type? Also list the loan type details. */ SELECT /* Answer the following: How many students have the most common class type? Also list the class type details. */ SELECT /* Answer the following: How many students have the most common transcript type? Also list the transcript type details. */ SELECT /* Answer the following: How many students have the most common student type? Also list the student type details. */ SELECT /* Answer the following:
SELECT T1.behaviour_monitoring_details, COUNT(*) as count FROM Behaviour_Monitoring as T1 GROUP BY T1.behaviour_monitoring_details ORDER BY count DESC LIMIT 1
SELECT T1.student_details, T2.behaviour_monitoring_details FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id GROUP BY T2.behaviour_monitoring_details HAVING COUNT(*) >= 3
SELECT /* Answer the following: Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring. */ SELECT /* Answer the following: Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring. */ SELECT /* Answer the following: Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring. */ SELECT /* Answer the following: Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring. */ SELECT /* Answer the following: Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring. */ SELECT /* Answer the following
SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING count(*) = (SELECT max(count(*)) FROM Behaviour_Monitoring GROUP BY student_id)
SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.student_details, T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id = T2.student_id
SELECT T1.bio_data, T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id = T2.student_id
SELECT COUNT(*), event_type_code, event_type_description FROM Student_Events GROUP BY event_type_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.event_type_code, T1.event_type_description, count(*) FROM Student_Events AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.event_type_code ORDER BY count(*) DESC LIMIT 1
SELECT achievement_details, achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code
SELECT achievement_details, achievement_type_description FROM Achievements
SELECT COUNT(DISTINCT T1.teacher_id) FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id = T2.student_id JOIN Classes AS T3 ON T1.student_id = T3.student_id JOIN Teachers AS T4 ON T3.teacher_id = T4.teacher_id WHERE T2.event_type_code = "achievement" AND T2.other_details = "won" /* Answer the following: How many students have won an achievement? */ SELECT COUNT(*) FROM Student_Events WHERE event_type_code = "achievement" AND other_details = "won" /* Answer the following: How many students have won an achievement? */ SELECT COUNT(*) FROM Student_Events WHERE event_type_code = "achievement" AND other_details = "won" /* Answer the following: How many students have won an achievement? */ SELECT COUNT(*) FROM Student_Events WHERE event_type_code = "achievement" AND other_details =
SELECT count(*) FROM Classes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id LEFT JOIN Achievements AS T3 ON T2.student_id = T3.student_id WHERE T3.achievement_id IS NULL /* Answer the following: Find the first names and last names of the students who have won an achievement. */ SELECT T1.student_fname, T1.student_lname FROM Students AS T1 JOIN Achievements AS T2 ON T1.student_id = T2.student_id /* Answer the following: Find the first names and last names of the students who have never won an achievement. */ SELECT T1.student_fname, T1.student_lname FROM Students AS T1 LEFT JOIN Achievements AS T2 ON T1.student_id = T2.student_id WHERE T2.achievement_id IS NULL /* Answer the following: Find the first names and last names
SELECT date_of_transcript, transcript_details FROM Transcripts
SELECT date_of_transcript, transcript_details FROM Transcripts
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements
SELECT datetime_detention_start, datetime_detention_end FROM Detention
SELECT datetime_detention_start, datetime_detention_end FROM Detention
SELECT T1.bio_data FROM Students AS T1 WHERE T1.student_details LIKE "%Suite%"
SELECT bio_data FROM Students WHERE student_details LIKE "%Suite%"
SELECT T1.teacher_details, T2.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id INTERSECT SELECT T1.teacher_details, T2.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id
SELECT T1.teacher_details, T2.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id
SELECT MAX(count), T2.emp_num FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T2.emp_num
SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 1 /* Answer the following: What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach? */ SELECT T2.emp_fname, T4.prof_office, T3.crs_description, T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5 ON T4.dept_code = T5.dept_code /* Answer the following: Find the first names of professors who are teaching more than one class. */ SELECT T2.emp_fname FROM CLASS AS T1
SELECT MAX(COUNT(course_id)), student_id FROM Student_Course_Enrolment GROUP BY student_id
SELECT T1.student_id, count(*) FROM Student_Course_Enrolment AS T1 GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT student_id, student_details FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id GROUP BY student_id HAVING COUNT(*) = 2
SELECT T1.student_id, T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) = 2
SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type GROUP BY detention_type_code, detention_type_description ORDER BY count(*) ASC LIMIT 1
SELECT T1.detention_type_code, T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)
SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id WHERE T2.amount_of_loan > (SELECT avg(amount_of_loan) FROM Student_Loans)
SELECT min(date_of_loan) FROM Student_Loans
SELECT MIN(date_of_loan) FROM Student_Loans
SELECT T1.student_id, T1.bio_data, T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.amount_of_loan LIMIT 1
SELECT student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1)
SELECT date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY amount_of_loan DESC LIMIT 1
SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1
SELECT T1.teacher_details FROM Teachers AS T1 JOIN Student_Events AS T2 ON T1.teacher_id = T2.teacher_id JOIN Students AS T3 ON T2.student_id = T3.student_id JOIN Transcripts AS T4 ON T3.student_id = T4.student_id ORDER BY T4.date_of_transcript LIMIT 1
SELECT T1.student_details, T2.transcript_details FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id ORDER BY T2.date_of_transcript LIMIT 1
SELECT student_id, sum(amount_of_loan) FROM Student_Loans GROUP BY student_id
SELECT T1.student_id, sum(T2.amount_of_loan) FROM Student_Loans AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id
SELECT T1.student_id, T1.bio_data, COUNT(*) FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id
SELECT T1.student_id, T1.bio_data, COUNT(*) FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id
SELECT COUNT(*) FROM Detention
SELECT COUNT(*) FROM Students WHERE student_id IN (SELECT student_id FROM Detention)
SELECT address_type_code, address_type_description FROM Students_Addresses GROUP BY address_type_code ORDER BY count(*) DESC LIMIT 1
SELECT address_type_code, address_type_description FROM Ref_Address_Types GROUP BY address_type_code ORDER BY count(*) DESC LIMIT 1
SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id = T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans)
SELECT T1.date_from, T1.date_to FROM Students_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2)
SELECT T1.date_from, T1.date_to FROM Students_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id JOIN Transcripts AS T3 ON T2.student_id = T3.student_id WHERE T3.transcript_id = 2
SELECT datetime_detention_start FROM Detention
SELECT datetime_detention_start FROM detention
SELECT Name FROM Author
SELECT Name FROM Author
SELECT Name, Address FROM Client
SELECT Name, Address FROM Client
SELECT Title, ISBN, SalePrice FROM Book
SELECT Title, ISBN, SalePrice FROM Book
SELECT count(*) FROM Book
SELECT count(*) FROM Book
SELECT count(*) FROM Author
SELECT count(*) FROM Author
SELECT count(*) FROM Client
SELECT COUNT(*) FROM Client
SELECT Name, Address FROM Client ORDER BY Name ASC
SELECT Name, Address FROM Client ORDER BY Name ASC
SELECT Book.Title, Author.Name FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor
SELECT B.Title, A.Name FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor
SELECT IdOrder, Name FROM Orders, Client WHERE Orders.IdClient = Client.IdClient
SELECT IdOrder, Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient
SELECT T2.Name, count(*) FROM Author_Book AS T1 JOIN Author AS T2 ON T1.Author = T2.idAuthor GROUP BY T1.Author
SELECT T1.Name, COUNT(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author GROUP BY T1.Name
SELECT ISBN, count(*) FROM Books_Order GROUP BY ISBN
SELECT T1.ISBN, count(*) FROM Books_Order AS T1 GROUP BY T1.ISBN
SELECT T1.ISBN, sum(T2.amount) FROM Books_Order AS T1 JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder GROUP BY T1.ISBN
SELECT T1.ISBN, SUM(T2.amount) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T2.ISBN ORDER BY count(*) DESC LIMIT 1
SELECT Title, PurchasePrice FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Title, PurchasePrice ORDER BY SUM(amount) DESC LIMIT 1
SELECT b.Title, b.PurchasePrice FROM Book AS b JOIN Books_Order AS bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN ORDER BY SUM(bo.amount) DESC LIMIT 1
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN
SELECT DISTINCT Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN
SELECT Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient
SELECT Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient
SELECT Name, COUNT(*) FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Name
SELECT T1.Name, COUNT(*) FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient
SELECT Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Name ORDER BY count(*) DESC LIMIT 1
SELECT T2.Name FROM Orders AS T1 JOIN Client AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient ORDER BY COUNT(*) DESC LIMIT 1
SELECT C.Name, SUM(AB.amount) FROM Client C JOIN Books_Order BO ON C.IdClient = BO.IdClient JOIN Author_Book AB ON BO.ISBN = AB.ISBN GROUP BY C.IdClient
SELECT C.Name, SUM(AB.amount) FROM Client AS C JOIN Books_Order AS AB ON C.IdClient = AB.IdClient GROUP BY C.Name
SELECT T1.Name, SUM(T2.amount) FROM Client AS T1 JOIN Books_Order AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient ORDER BY SUM(T2.amount) DESC LIMIT 1
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder GROUP BY T1.IdClient ORDER BY sum(T3.amount) DESC LIMIT 1
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)
SELECT max(SalePrice), min(SalePrice) FROM Book
SELECT max(SalePrice), min(SalePrice) FROM Book
SELECT avg(PurchasePrice), avg(SalePrice) FROM Book
SELECT avg(PurchasePrice), avg(SalePrice) FROM Book
SELECT max(SalePrice - PurchasePrice) FROM Book
SELECT max(SalePrice - PurchasePrice) FROM Book
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book)
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book)
SELECT Title FROM Book ORDER BY SalePrice ASC LIMIT 1
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book)
SELECT Title FROM Book ORDER BY PurchasePrice DESC
SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1
SELECT AVG(SalePrice) FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = "George Orwell"
SELECT AVG(SalePrice) FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthorA WHERE T3.Name = "George Orwell"
SELECT SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = "Plato"
SELECT SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = "Plato"
SELECT Title FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'George Orwell') ORDER BY SalePrice LIMIT 1
SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell') ORDER BY SalePrice LIMIT 1
SELECT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = "Plato" AND SalePrice < (SELECT AVG(SalePrice) FROM Book)
SELECT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato' AND Book.SalePrice < (SELECT AVG(Book.SalePrice) FROM Book)
SELECT Name FROM Author WHERE idAuthor = (SELECT Author FROM Author_Book WHERE ISBN = "978055327352")
SELECT Name FROM Author WHERE idAuthor IN (SELECT Author FROM Author_Book WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))
SELECT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%'
SELECT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%'
SELECT count(*) FROM Books_Order AS t1 JOIN Book AS t2 ON t1.ISBN = t2.ISBN WHERE t2.Title = "Pride and Prejudice"
SELECT count(*) FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder = T2.IdOrder JOIN Book AS T3 ON T2.ISBN = T3.ISBN WHERE T3.Title = "Pride and Prejudice"
SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title IN ("Pride and Prejudice", "The Little Prince")) GROUP BY IdOrder HAVING COUNT(ISBN) = 2
SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name IN ('Pride and Prejudice', 'The Little Prince')))
SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = 'PeterDoe') INTERSECT SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = 'JamesSmith')
SELECT T1.ISBN FROM Books_Order AS T1 JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder JOIN Client AS T3 ON T2.IdClient = T3.IdClient WHERE T3.Name = "Peter Doe" INTERSECT SELECT T1.ISBN FROM Books_Order AS T1 JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder JOIN Client AS T3 ON T2.IdClient = T3.IdClient WHERE T3.Name = "James Smith"
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T2.IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = "PeterDoe") EXCEPT SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T2.IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = "JamesSmith")
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T2.IdOrder = (SELECT IdOrder FROM Client WHERE Name = 'Peter Doe') EXCEPT SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T2.IdOrder = (SELECT IdOrder FROM Client WHERE Name = 'James Smith')
SELECT Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN = "978055327352")
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN = '97801410260')))
SELECT count(*) FROM book
SELECT Title FROM book ORDER BY Title ASC
SELECT Title FROM book ORDER BY Pages DESC
SELECT Type, Release FROM book
SELECT max(Chapters), min(Chapters) FROM book
SELECT Title FROM book WHERE Type!= "Poet"
SELECT avg(Rating) FROM review
SELECT Title, Rating FROM book
SELECT Rating FROM review ORDER BY Chapters DESC LIMIT 1
SELECT Rank FROM review WHERE Pages = (SELECT MIN(Pages) FROM review)
SELECT Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rank DESC LIMIT 1
SELECT avg(T1.Readers_in_Million) FROM review AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Type = "Novel"
SELECT Type, COUNT(*) FROM book GROUP BY Type
SELECT Type FROM book GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1
SELECT Type FROM book GROUP BY Type HAVING COUNT(*) >= 3
SELECT Title FROM book ORDER BY Rating ASC
SELECT T1.Title, T1.Audio FROM book AS T1 JOIN review AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Readers_in_Million DESC
SELECT count(*) FROM book WHERE book_id NOT IN (SELECT book_id FROM review)
SELECT Type FROM book WHERE Chapters > 75 INTERSECT SELECT Type FROM book WHERE Chapters < 50
SELECT count(DISTINCT Type) FROM book
SELECT Type, Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)
SELECT count(*) FROM customer
SELECT count(*) FROM customer
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Nationality, Card_Credit FROM customer
SELECT Nationality, Card_Credit FROM customer
SELECT Name FROM customer WHERE Nationality = "England" OR Nationality = "Australia"
SELECT Name FROM customer WHERE Nationality = "England" OR Nationality = "Australia"
SELECT avg(T1.Card_Credit) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Level_of_Membership > 1
SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership > 1
SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1
SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer)
SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality
SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM customer WHERE Card_Credit < 50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit > 75
SELECT Nationality FROM customer WHERE Card_Credit > 50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit < 75
SELECT T1.Name, T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID
SELECT T1.Name, T2.Dish_Name FROM customer_order AS T1 JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID
SELECT T1.Name, T2.Dish_Name, T2.Quantity FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.Quantity DESC
SELECT T2.Name, T3.Dish_Name FROM customer_order AS T1 JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN customer_order AS T3 ON T1.Customer_ID = T3.Customer_ID AND T1.Branch_ID = T3.Branch_ID ORDER BY T1.Quantity DESC
SELECT T1.Name, SUM(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Name
SELECT T1.Name, SUM(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Name
SELECT T1.Customer_ID, T1.Name, T1.Nationality, T1.Card_Credit, T1.Level_of_Membership, T2.Branch_ID, T2.Manager, T2.Years_opened, T2.Location_of_office, T3.Dish_Name, T3.Quantity FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN customer_order AS T3 ON T1.Customer_ID = T3.Customer_ID AND T2.Branch_ID = T3.Branch_ID GROUP BY T1.Customer_ID, T1.Name, T1.Nationality, T1.Card_Credit, T1.Level_of_Membership, T2.Branch_ID, T2.Manager, T2.Years_opened, T2.Location_of_office, T3.Dish_Name, T3.Quantity HAVING SUM(T3.Quantity) > 1
SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID HAVING SUM(T2.Quantity) > 1
SELECT DISTINCT Manager FROM branch
SELECT DISTINCT Manager FROM branch
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
SELECT count(*) FROM member
SELECT Name FROM member ORDER BY Age ASC
SELECT Name, Nationality FROM member
SELECT Name FROM member WHERE Nationality!= " England "
SELECT Name FROM member WHERE Age = 19 OR Age = 20
SELECT Name FROM member ORDER BY Age DESC LIMIT 1
SELECT Nationality, COUNT(*) FROM member GROUP BY Nationality
SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*) >= 2
SELECT T2.Name, T1.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID
SELECT T2.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN club AS T3 ON T1.Club_ID = T3.Club_ID WHERE T3.Overall_Ranking > 100
SELECT T2.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Year_Join < 2018
SELECT T2.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Club_ID IN (SELECT Club_ID FROM club WHERE Club_Name = "Houston")
SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)
SELECT Nationality FROM member WHERE Age > 22 INTERSECT SELECT Nationality FROM member WHERE Age < 19
SELECT avg(T2.Age) FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID
SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%'
SELECT Collection_Subset_Name FROM Collection_Subsets
SELECT Collection_Subset_Name FROM Collection_Subsets
SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = "Top collection"
SELECT Collection_Subset_Members.Collection_ID, Collections.Collection_Name, Collections.Collection_Description FROM Collection_Subset_Members JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collection_Subset_Members.Collection_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Top collection')
SELECT Document_Subset_Name FROM Document_Subsets
SELECT Document_Subset_Name FROM Document_Subsets
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Object_ID FROM Document_Objects
SELECT Document_Object_ID FROM Document_Objects
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Marlin'
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Owner FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID WHERE T3.Collection_Description = "Braeden Collection"
SELECT Owner FROM Document_Objects AS T1 JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T2.Collection_Name = "Braeden Collection"
SELECT T1.Owner FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID WHERE T3.Collection_Name = 'Marlin'
SELECT T1.Owner FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Marlin'
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL
SELECT count(*) FROM Document_Objects AS T1 JOIN Owners AS T2 ON T1.Owner = T2.Owner_ID WHERE T2.Owner_Name = "Marlin"
SELECT count(*) FROM Document_Objects AS T1 JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Marlin'
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL
SELECT Document_Object_ID, count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID
SELECT count(*), Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID
SELECT Collections.Collection_Name FROM Collections
SELECT Collection_Name FROM Collections
SELECT Collection_Description FROM Collections WHERE Collection_Name = "Best"
SELECT Collection_Subset_Members.Collection_ID, Collections.Collection_Description FROM Collection_Subset_Members JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'
SELECT Parent_Collection_Name FROM Collections WHERE Collection_Name = "Nice"
SELECT Collection_Name FROM Collections WHERE Collection_Name IN (SELECT Collection_Name FROM Collections WHERE Collection_Name = "Nice")
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections)
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections)
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects)
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects) GROUP BY Parent_Document_Object_ID HAVING count(*) > 1
SELECT count(*) FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best" AND T2.Collection_Subset_Name = "Child"
SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Owner = "Ransom"
SELECT T1.Collection_Subset_ID, T1.Collection_Subset_Name, COUNT(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID GROUP BY T1.Collection_Subset_ID
SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID GROUP BY T1.Collection_Subset_ID
SELECT Document_Object_ID, COUNT(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Document_Object_ID = T2.Parent_Document_Object_ID GROUP BY T1.Document_Object_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT Document_Object_ID, count(*) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Document_Object_ID
SELECT Document_Object_ID, count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY count(*) ASC LIMIT 1
SELECT Document_Object_ID FROM Document_Objects GROUP BY Document_Object_ID ORDER BY count(*) ASC LIMIT 1
SELECT Document_Object_ID, COUNT(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(*) BETWEEN 2 AND 4
SELECT Document_Object_ID, COUNT(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(*) BETWEEN 2 AND 4
SELECT T1.Owner FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID = T3.Document_Subset_ID WHERE T3.Document_Subset_Name = 'Braeden'
SELECT DISTINCT Owner FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID = T3.Document_Subset_ID WHERE T1.Owner = 'Braeden'
SELECT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID = T3.Document_Object_ID WHERE T3.Owner = 'Braeden'
SELECT DISTINCT Document_Subset_Name FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID = T3.Document_Subset_ID WHERE T1.Owner = "Braeden"
SELECT Document_Subset_ID, Document_Subset_Name, count(distinct Document_Object_ID) FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID GROUP BY Document_Subset_ID
SELECT Document_Subset_ID, Document_Subset_Name, count(DISTINCT Document_Object_ID) FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subset_ID
SELECT Answer:
SELECT T1.Document_Subset_ID, T1.Document_Subset_Name, count(*) FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID ORDER BY count(*) DESC LIMIT 1
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')
SELECT T1.Document_Subset_Name, T2.Document_Object_ID FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID
SELECT /* Answer the following: What are the different subsets of collections related to each collection id, list the name of the collection subset and id of the actual collection? */ SELECT /* Answer the following: What are the different subsets of documents related to each document id, list the name of the document subset and id of the actual document? */ SELECT /* Answer the following: What are the different subsets of collections related to each collection id, list the name of the collection subset and id of the actual collection? */ SELECT /* Answer the following: What are the different subsets of documents related to each document id, list the name of the document subset and id of the actual document? */ SELECT /* Answer the following: What are the different subsets of collections related to each collection id, list the name of the collection subset and id of the actual collection? */ SELECT /* Answer the following: What are the different subsets of documents related to each document id, list the name of the document subset and id
SELECT Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID = T3.Document_Object_ID WHERE T3.Owner = 'Ransom '
SELECT Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID = T3.Document_Object_ID WHERE T3.Owner = 'Ransom'
SELECT count(*), T1.Document_Object_ID FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID GROUP BY T1.Document_Object_ID
SELECT Document_Object_ID, count(*) FROM Documents_in_Collections GROUP BY Document_Object_ID
SELECT count(*) FROM Collections AS t1 JOIN Documents_in_Collections AS t2 ON t1.Collection_ID = t2.Collection_ID WHERE t1.Collection_Name = "Best"
SELECT count(*) FROM Collections AS t1 JOIN Documents_in_Collections AS t2 ON t1.Collection_ID = t2.Collection_ID WHERE t1.Collection_Name = "Best"
SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = "Best"
SELECT COUNT(Document_Object_ID) FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'
SELECT Collections.Collection_Name, Collections.Collection_ID, COUNT(Documents_in_Collections.Document_Object_ID) FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID GROUP BY Collections.Collection_ID ORDER BY COUNT(Documents_in_Collections.Document_Object_ID) DESC LIMIT 1
SELECT /* Answer the following: For every collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have? */ SELECT /* Answer the following: For every collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have? */ SELECT /* Answer the following: For every collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have? */ SELECT /* Answer the following: For every collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have? */ SELECT /* Answer the following: For every collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have? */ SELECT /* Answer the following: For every collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have? */ SELECT /* Answer the following: For every collection named 'Best', what is the name and id of
SELECT Document_Object_ID FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Collection_Subset_Members AS T3 ON T2.Collection_ID = T3.Collection_ID JOIN Collection_Subsets AS T4 ON T3.Collection_Subset_ID = T4.Collection_Subset_ID WHERE T4.Collection_Subset_Name = "Best for 2000" AND T1.Owner = "Best"
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') INTERSECT SELECT Document_Object_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID = (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')
SELECT Document_Object_ID FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = "Best" EXCEPT SELECT Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID WHERE T2.Document_Subset_Name = "Best for 2000"
SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') EXCEPT SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Collection_Subsets AS T3 ON T2.Collection_ID = T3.Collection_Subset_ID WHERE T3.Collection_Subset_Name = "Best for 2000" UNION SELECT T1.Document_Object_ID FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID WHERE T3.Collection_Name = "Best"
SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT DISTINCT Document_Object_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')
SELECT Collection_Name FROM Collections WHERE Collection_Name IN (SELECT Collection_Name FROM Collections WHERE Collection_Name = "Best")
SELECT Collection_Name FROM Collections WHERE Collection_Name IN (SELECT Collection_Name FROM Collections WHERE Collection_Name = "Best")
SELECT count(*) FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Collection_Subsets AS T3 ON T2.Collection_Subset_ID = T3.Collection_Subset_ID WHERE T3.Collection_Subset_Name = 'Best'
SELECT count(DISTINCT Collection_ID) FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Best'
SELECT Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets INNER JOIN Collections ON Collection_Subsets.Collection_Subset_ID = Collections.Collection_ID WHERE Collections.Collection_Name = "Best"
SELECT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID WHERE T3.Collection_Name = 'Best'
SELECT count(*) FROM songs WHERE name LIKE "%Love%"
SELECT name FROM songs ORDER BY name ASC
SELECT name, language FROM songs
SELECT max(voice_sound_quality), min(voice_sound_quality) FROM performance_score
SELECT T1.voice_sound_quality, T1.rhythm_tempo, T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id = T2.id WHERE T2.name = 'Freeway'
SELECT id, language, original_artist FROM songs WHERE name!= 'Love'
SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love'
SELECT DISTINCT(stage_presence) FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id = T2.id WHERE T2.language = 'English'
SELECT T1.id, T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id GROUP BY T1.id HAVING COUNT(*) >= 2
SELECT T1.id, T1.name, T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id GROUP BY T1.id ORDER BY count(*) DESC
SELECT /* Answer the following: What is the average popularity of the participants who received score 5 for their stage presence? */ SELECT /* Answer the following: What is the average popularity of the participants who received score 5 for their voice and sound quality? */ SELECT /* Answer the following: What is the average popularity of the participants who received score 5 for their voice and sound quality, or 5 for their rhythm and tempo? */ SELECT /* Answer the following: What is the average popularity of the participants who received score 5 for their voice and sound quality, or 5 for their rhythm and tempo, or 5 for their stage presence? */ SELECT /* Answer the following: What is the average popularity of the participants who received score 5 for their voice and sound quality, or 5 for their rhythm and tempo, or 5 for their stage presence, or 5 for their original artist? */ SELECT /* Answer the following: What is the average popularity of
SELECT voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id = T2.id WHERE T2.name = 'The Balkan Girls'AND T2.language = 'English'
SELECT T1.id, T1.name FROM songs AS T1 JOIN performance_score AS T2 ON T1.id = T2.songs_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
SELECT count(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9
SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score )
SELECT avg(rhythm_tempo), language FROM performance_score JOIN songs ON performance_score.songs_id = songs.id GROUP BY language
SELECT DISTINCT name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English'))
SELECT T1.name, T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id JOIN songs AS T3 ON T2.songs_id = T3.id WHERE T3.language = "croatian" INTERSECT SELECT T1.name, T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id JOIN songs AS T3 ON T2.songs_id = T3.id WHERE T3.language = "english"
SELECT name FROM songs WHERE name LIKE '%Is%'
SELECT T1.original_artist FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id = T2.id WHERE T1.rhythm_tempo > 5 ORDER BY T1.voice_sound_quality DESC
SELECT count(*) FROM City
SELECT count(*) FROM City
SELECT DISTINCT state FROM City
SELECT DISTINCT state FROM City
SELECT count(DISTINCT country) FROM City
SELECT count(*) FROM Country
SELECT city_name, city_code, state, country FROM City
SELECT city_name, city_code, state, country FROM City
SELECT latitude, longitude FROM City WHERE city_name = "Baltimore"
SELECT latitude, longitude FROM City WHERE city_name = "Baltimore"
SELECT city_name FROM City WHERE state = "PA"
SELECT city_name FROM City WHERE state = "PA"
SELECT count(*) FROM City WHERE country = 'Canada'
SELECT count(*) FROM City WHERE country = 'Canada'
SELECT city_name FROM City WHERE country = "USA" ORDER BY latitude
SELECT city_name FROM City WHERE country = "USA" ORDER BY latitude
SELECT state, COUNT(*) FROM City GROUP BY state
SELECT count(*), state FROM city GROUP BY state
SELECT country, count(*) FROM City GROUP BY country
SELECT COUNT(*), country FROM City GROUP BY country
SELECT state, COUNT(*) FROM City GROUP BY state HAVING COUNT(*) >= 2
SELECT state FROM city GROUP BY state HAVING COUNT(*) >= 2
SELECT state, COUNT(*) FROM City GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1
SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1
SELECT country, count(*) FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1
SELECT country, count(*) FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1
SELECT Fname, LName FROM Student WHERE state = "MD"
SELECT Fname, LName FROM Student WHERE city_code = "MD"
SELECT count(*) FROM Student WHERE city_code = 'CHN'
SELECT count(*) FROM Student WHERE city_code = "CHN"
SELECT Fname, Major FROM Student WHERE city_code = (SELECT city_code FROM City WHERE city_name = 'Baltimore')
SELECT Fname, Major FROM Student WHERE city_code = "BAL"
SELECT country, COUNT(*) FROM Student GROUP BY country
SELECT country, COUNT(*) FROM Student GROUP BY country
SELECT city_code, count(*) FROM Student GROUP BY city_code
SELECT city_code, count(*) FROM Student GROUP BY city_code
SELECT state FROM Student GROUP BY state ORDER BY count(*) DESC LIMIT 1
SELECT state FROM Student GROUP BY state ORDER BY count(*) DESC LIMIT 1
SELECT country FROM Student GROUP BY country ORDER BY count(*) ASC LIMIT 1
SELECT country FROM Student GROUP BY country ORDER BY count(*) ASC LIMIT 1
SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3)
SELECT city_name FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY city_name HAVING COUNT(*) >= 3
SELECT state FROM Student GROUP BY state HAVING COUNT(*) > 5
SELECT state FROM Student GROUP BY state HAVING count(*) > 5
SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')
SELECT StuID FROM Student WHERE country!= "USA"
SELECT StuID FROM Student WHERE sex = 'F' AND city_code = "PA"
SELECT StuID FROM Student WHERE sex = 'F' AND state = 'PA'
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')
SELECT StuID FROM Student WHERE sex = 'M' EXCEPT SELECT StuID FROM City WHERE country = "USA"
SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'
SELECT distance FROM Direct_distance WHERE city1_code = "BAL" AND city2_code = "CHI"
SELECT distance FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'EWR'
SELECT distance FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'EWR'
SELECT avg(distance), min(distance), max(distance) FROM Direct_distance
SELECT avg(distance), min(distance), max(distance) FROM Direct_distance
SELECT city1_code, city2_code, distance FROM Direct_distance ORDER BY distance DESC LIMIT 2
SELECT city1_code, city2_code, distance FROM Direct_distance ORDER BY distance DESC LIMIT 1
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)
SELECT city1_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000
SELECT sum(T1.distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code = T2.city_code WHERE T2.city_name = "BAL"
SELECT SUM(T1.distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code = T2.city_code WHERE T2.city_name = 'BAL'
SELECT avg(T1.distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code = T2.city_code WHERE T2.city_name = "Boston"
SELECT avg(distance) FROM Direct_distance WHERE city1_code = 'BOS'
SELECT city_name FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE distance = (SELECT MIN(distance) FROM Direct_distance WHERE city2_code = 'CHI'))
SELECT city_name FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE city2_code = 'CHI') ORDER BY distance LIMIT 1
SELECT city_name FROM City WHERE distance > (SELECT distance FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'YTO')
SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS') ORDER BY distance DESC LIMIT 1
SELECT city_code, sum(distance) FROM Direct_distance GROUP BY city_code
SELECT city_code, SUM(distance) FROM Direct_distance GROUP BY city_code
SELECT city_name, AVG(distance) FROM City AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code GROUP BY T1.city_name
SELECT city_name, avg(distance) FROM City AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code GROUP BY T1.city_name
SELECT D.distance FROM Student AS T1 JOIN Student AS T2 ON T1.StuID = T2.Advisor JOIN Direct_distance AS D ON D.city1_code = T1.city_code AND D.city2_code = T2.city_code WHERE T1.Fname = "Linda" AND T1.Lname = "Smith" AND T2.Fname = "Tracy" AND T2.Lname = "Kim"
SELECT D.distance FROM Student AS S JOIN Direct_distance AS D ON S.city_code = D.city1_code WHERE S.LName = 'Smith' AND S.Fname = 'Linda' INTERSECT SELECT D.distance FROM Student AS S JOIN Direct_distance AS D ON S.city_code = D.city2_code WHERE S.LName = 'Kim' AND S.Fname = 'Tracy'
SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.city_name = "Linda Smith" ORDER BY T2.latitude DESC LIMIT 1
SELECT T1.Fname, T1.Lname FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.city_name = "Linda" AND T2.state = "Smith" /* Answer the following: What is the full name of the student who lives closest to Linda Smith? */ SELECT T1.Fname, T1.Lname FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.city_name = "Linda" AND T2.state = "Smith" /* Answer the following: What is the full name of the student who lives closest to the student who lives furthest from Linda Smith? */ SELECT T1.Fname, T1.Lname FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T
SELECT state FROM Student WHERE Fname = "Linda"
SELECT state FROM Student WHERE Fname = 'LINDA'
SELECT * FROM Sailors WHERE age > 30
SELECT * FROM Sailors WHERE age > 30
SELECT name, age FROM Sailors WHERE age < 30
SELECT name, age FROM Sailors WHERE age < 30
SELECT T1.bid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.sid = 1
SELECT DISTINCT bid FROM Reserves WHERE sid = 1
SELECT Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 102
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102)
SELECT DISTINCT bid FROM Reserves
SELECT bid FROM Reserves
SELECT name FROM Sailors WHERE name LIKE '%e%'
SELECT name FROM Sailors WHERE name LIKE '%e%'
SELECT DISTINCT sid FROM Sailors WHERE age > (SELECT max(age) FROM Sailors)
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Sailors ORDER BY age ASC LIMIT 1)
SELECT DISTINCT name FROM Sailors WHERE age > (SELECT MIN(age) FROM Sailors WHERE rating > 7)
SELECT DISTINCT name FROM Sailors WHERE age > (SELECT MIN(age) FROM Sailors WHERE rating > 7)
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid GROUP BY T1.sid HAVING count(*) >= 1
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid GROUP BY T1.sid HAVING count(*) >= 1
SELECT T1.sid, T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid GROUP BY T1.sid HAVING count(*) > 1
SELECT DISTINCT name FROM Reserves GROUP BY sid HAVING COUNT(*) >= 2
SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color ='red' OR Boats.color = 'blue'
SELECT T1.sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color = 'red' OR T2.color = 'blue'
SELECT name,sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Boats.bid = Reserves.bid WHERE Boats.color ='red' OR Boats.color = 'blue'
SELECT Sailors.name, Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Boats.bid = Reserves.bid WHERE Boats.color ='red' OR Boats.color = 'blue'
SELECT T1.sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color = "red" INTERSECT SELECT T1.sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color = "blue"
SELECT sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color = "red" INTERSECT SELECT sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color = "blue"
SELECT Sailors.name, Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Boats.bid = Reserves.bid WHERE Boats.color ='red' INTERSECT SELECT Sailors.name, Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Boats.bid = Reserves.bid WHERE Boats.color = 'blue'
SELECT Sailors.name, Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Boats.bid = Reserves.bid WHERE Boats.color ='red' OR Boats.color = 'blue'
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT name, sid FROM Sailors EXCEPT SELECT T1.name, T2.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid
SELECT name,sid FROM Sailors WHERE NOT sid IN (SELECT sid FROM Reserves)
SELECT sid FROM Sailors WHERE NOT sid IN (SELECT sid FROM Reserves)
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 103
SELECT name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 103
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')
SELECT name FROM Sailors WHERE rating > (SELECT MIN(rating) FROM Sailors WHERE name = 'Luis')
SELECT Sailors.name, Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Sailors.rating > 2
SELECT name, sid FROM Sailors WHERE rating >= 3 INTERSECT SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1
SELECT count(*) FROM Sailors
SELECT count(*) FROM Sailors
SELECT avg(age) FROM Sailors WHERE rating = 7
SELECT avg(age) FROM Sailors WHERE rating = 7
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'
SELECT count(*) FROM Sailors WHERE name LIKE 'D%'
SELECT avg(rating), max(age) FROM Sailors
SELECT avg(rating), max(age) FROM Sailors
SELECT bid, COUNT(*) FROM Reserves GROUP BY bid
SELECT T1.bid, count(*) FROM Reserves AS T1 GROUP BY T1.bid
SELECT count(*), bid FROM Reserves WHERE bid > 50 GROUP BY bid
SELECT bid, count(*) FROM Reserves WHERE bid > 50 GROUP BY bid
SELECT count(*), bid FROM Reserves GROUP BY bid HAVING count(*) > 1
SELECT bid, count(*) FROM Reserves GROUP BY bid HAVING count(*) > 1
SELECT count(*), T2.bid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.sid > 1 GROUP BY T2.bid
SELECT T1.bid, count(*) FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.sid > 1 GROUP BY T1.bid
SELECT rating, avg(age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = "red" GROUP BY rating
SELECT T1.rating, avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = 'red' GROUP BY T1.rating
SELECT name, rating, age FROM Sailors ORDER BY rating, age
SELECT name, rating, age FROM Sailors ORDER BY rating, age
SELECT count(*) FROM Boats
SELECT count(*) FROM Boats
SELECT count(*) FROM Boats WHERE color = 'red'
SELECT count(*) FROM Boats WHERE color ='red'
SELECT T1.name FROM Boats AS T1 JOIN Reserves AS T2 ON T1.bid = T2.bid WHERE T2.sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30)
SELECT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30))
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors, Reserves WHERE Sailors.sid = Reserves.sid AND Boats.color ='red')
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T1.rating > (SELECT max(T4.rating) FROM Sailors AS T4 JOIN Reserves AS T5 ON T4.sid = T5.sid JOIN Boats AS T6 ON T5.bid = T6.bid WHERE T6.color = 'red')
SELECT max(rating) FROM Sailors
SELECT max(rating) FROM Sailors
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid IN (SELECT T3.bid FROM Boats AS T3 WHERE T3.name = 'Melon')
SELECT name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Boats.bid = Reserves.bid WHERE Boats.name = "Melon"
SELECT name, age FROM sailors ORDER BY rating DESC
SELECT name, age FROM Sailors ORDER BY rating DESC
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
SELECT Model FROM headphone ORDER BY Model
SELECT DISTINCT Model FROM headphone ORDER BY Model
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) > 2
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) <= 2
SELECT count(*), Class FROM headphone WHERE Price > 200 GROUP BY Class
SELECT /* Answer the following: What is the average price of headphones? */ SELECT /* Answer the following: What is the average price of headphones for each headphone class? */ SELECT /* Answer the following: What is the average price of headphones for each headphone class, sorted by average price in ascending order? */ SELECT /* Answer the following: What is the average price of headphones for each headphone class, sorted by average price in descending order? */ SELECT /* Answer the following: What is the average price of headphones for each headphone class, sorted by average price in descending order, limited to headphones with a price greater than 100? */ SELECT /* Answer the following: What is the average price of headphones for each headphone class, sorted by average price in descending order, limited to headphones with a price greater than 100, limited to headphones with a price less than 200? */ SELECT /* Answer the following: What is the average price of headphones for each headphone class, sorted by average price in descending order, limited to headphones with a price greater than 100
SELECT count(DISTINCT Earpads) FROM headphone
SELECT count(DISTINCT Earpads) FROM headphone
SELECT Earpads, COUNT(*) FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2
SELECT Earpads, COUNT(*) FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2
SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC LIMIT 1
SELECT T1.Model, T1.Class, T1.Construction FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID ORDER BY T1.Price LIMIT 1
SELECT avg(Price), Construction FROM headphone GROUP BY Construction
SELECT avg(Price), Construction FROM headphone GROUP BY Construction
SELECT Class FROM headphone WHERE Earpads = "Bowls" INTERSECT SELECT Class FROM headphone WHERE Earpads = "Comfort Pads"
SELECT DISTINCT Class FROM headphone WHERE Earpads = "Bowls" INTERSECT SELECT DISTINCT Class FROM headphone WHERE Earpads = "Comfort Pads"
SELECT earpads FROM headphone WHERE construction <> "Plastic"
SELECT Earpads FROM headphone WHERE Construction!= "Plastic"
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone)
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone)
SELECT Name FROM store ORDER BY Date_Opened
SELECT Name FROM store ORDER BY Date_Opened
SELECT Name, Parking FROM store WHERE Neighborhood = "Tarzana"
SELECT T1.Name, T1.Parking FROM store AS T1 JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Neighborhood = "Tarzana"
SELECT count(DISTINCT neighborhood) FROM store
SELECT count(DISTINCT Neighborhood) FROM store
SELECT count(*), neighborhood FROM store GROUP BY neighborhood
SELECT count(*), neighborhood FROM store GROUP BY neighborhood
SELECT t1.Name, count(*) FROM store AS t1 JOIN stock AS t2 ON t1.Store_ID = t2.Store_ID GROUP BY t1.Store_ID ORDER BY count(*) DESC LIMIT 1
SELECT T1.Name, SUM(T2.Quantity) FROM store AS T1 JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID GROUP BY T1.Name
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)
SELECT T1.Model FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.Model ORDER BY SUM(T2.Quantity) DESC LIMIT 1
SELECT T1.Model FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.Model ORDER BY sum(T2.Quantity) DESC LIMIT 1
SELECT count(*) FROM stock WHERE Store_ID = (SELECT Store_ID FROM store WHERE Name = 'Woodman')
SELECT sum(T2.Quantity) FROM store AS T1 JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Name = "Woodman"
SELECT neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)
SELECT neighborhood FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)
SELECT count(*) FROM Author
SELECT COUNT(*) FROM Author
SELECT COUNT(*) FROM Paper
SELECT COUNT(*) FROM Paper
SELECT count(*) FROM Affiliation
SELECT COUNT(*) FROM Affiliation
SELECT COUNT(*) FROM Paper AS T1 JOIN Venue AS T2 ON T1.venue = T2.id WHERE T2.name = "NAACL" AND T1.year = 2000
SELECT COUNT(*) FROM Paper AS T1 JOIN Venue AS T2 ON T1.venue = T2.venue_id WHERE T2.name = "NAACL" AND T1.year = 2000
SELECT count(*) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = "Columbia University" AND T1.year = 2009
SELECT COUNT(*) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = "Columbia University" AND T1.year = 2009
SELECT name, address FROM Affiliation
SELECT name, address FROM Affiliation
SELECT venue, year FROM Paper ORDER BY year
SELECT DISTINCT venue, year FROM Paper ORDER BY year
SELECT title, paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = "Harvard University"
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = "Harvard University"
SELECT title, paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.name = "Mckeown"
SELECT title, paper_id FROM Paper, Author_list WHERE Paper.paper_id = Author_list.paper_id AND Author_list.author_id = (SELECT author_id FROM Author WHERE name = "Mckeown")
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = "Stanford University" INTERSECT SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = "Columbia University"
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = "Stanford University" INTERSECT SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = "Columbia University"
SELECT T1.paper_id, T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = "Mckeown, Kathleen" INTERSECT SELECT T1.paper_id, T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = "Rambow, Owen"
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id = "Mckeown, Kathleen" INTERSECT SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id = "Rambow, Owen"
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = "Mckeown")) AND paper_id NOT IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = "Rambow"))
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown' EXCEPT SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Rambow'
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown, Kathleen' OR T3.name = 'Rambow, Owen'
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = "Mckeown, Kathleen" OR T3.name = "Rambow, Owen"
SELECT A.name, COUNT(P.paper_id) AS num_papers FROM Author AS A JOIN Author_list AS AL ON A.author_id = AL.author_id JOIN Paper AS P ON AL.paper_id = P.paper_id GROUP BY A.name ORDER BY num_papers DESC
SELECT COUNT(T1.paper_id), T2.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id GROUP BY T2.name ORDER BY COUNT(T1.paper_id) DESC
SELECT T1.name, COUNT(*) FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.name ORDER BY COUNT(*)
SELECT name, COUNT(*) FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.name ORDER BY COUNT(*)
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.name HAVING count(*) > 50
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.name HAVING COUNT(*) > 50
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id HAVING COUNT(*) = 1
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id HAVING count(*) = 1
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY count(*) DESC LIMIT 1
SELECT venue, COUNT(*) FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1
SELECT COUNT(*) FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T2.paper_id = "A00-1002"
SELECT COUNT(*) FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T2.paper_id = "A00-1002"
SELECT COUNT(*) FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T2.paper_id = "D12-1027"
SELECT COUNT(*) FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T2.paper_id = "D12-1027"
SELECT paper_id, COUNT(*) FROM Citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT paper_id, COUNT(*) FROM Citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.title, COUNT(*) FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.cited_paper_id GROUP BY T1.title ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1
SELECT paper_id, COUNT(*) as num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 10
SELECT paper_id, title, venue, year, COUNT(*) AS citations FROM Paper JOIN Citation ON Paper.paper_id = Citation.paper_id GROUP BY paper_id, title, venue, year ORDER BY citations DESC LIMIT 10
SELECT COUNT(*) FROM Citation AS T1 JOIN Paper AS T2 ON T1.paper_id = T2.paper_id JOIN Author_list AS T3 ON T2.paper_id = T3.paper_id WHERE T3.author_id = 1 AND T2.year = 2016
SELECT COUNT(*) FROM Citation AS T1 JOIN Paper AS T2 ON T1.paper_id = T2.paper_id JOIN Author_list AS T3 ON T2.paper_id = T3.paper_id WHERE T3.author_id = (SELECT T4.author_id FROM Author AS T4 JOIN Paper AS T5 ON T4.author_id = T5.author_id WHERE T5.title = "Mckeown, Kathleen")
SELECT count(*) FROM Citation AS T1 JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.title = "Mckeown, Kathleen"
SELECT COUNT(*) FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T2.venue = "SIGMOD" AND T2.year = 1999 AND T1.paper_id = "SIGMOD99"
SELECT T1.name, count(*) FROM Author AS T1 JOIN Citation AS T2 ON T1.author_id = T2.paper_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
SELECT T1.name, COUNT(T2.cited_paper_id) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.name ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 1
SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))
SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = "Mckeown, Kathleen"))
SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))
SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = "Columbia University"))
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
SELECT name, COUNT(*) FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Paper.paper_id = Author_list.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.name ORDER BY COUNT(*) DESC LIMIT 3
SELECT affiliation_id, name, address, COUNT(*) AS num_papers FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY affiliation_id ORDER BY num_papers DESC LIMIT 3
SELECT count(*) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = "Columbia University" AND T1.year <= 2009
SELECT COUNT(*) FROM Paper AS T1 JOIN Affiliation AS T2 ON T1.venue = T2.name WHERE T2.name = "Columbia University" AND T1.year <= 2009
SELECT count(*) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = "Stanford University" AND T1.year BETWEEN 2000 AND 2009
SELECT COUNT(*) FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id JOIN affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = "Stanford University" AND T1.year >= 2000 AND T1.year <= 2009
SELECT T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(*) FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T1.author_id IN (SELECT T3.author_id FROM Author AS T3 JOIN Paper AS T4 ON T3.author_id = T4.author_id WHERE T4.title = "Mckeown, Kathleen") AND T2.title <> "Mckeown, Kathleen"
SELECT COUNT(*) FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T1.author_id IN (SELECT T4.author_id FROM Author AS T3 JOIN Paper AS T4 ON T3.author_id = T4.author_id WHERE T3.name = "Mckeown" INTERSECT SELECT T6.author_id FROM Author AS T5 JOIN Paper AS T6 ON T5.author_id = T6.author_id WHERE T5.name = "Kathleen")
SELECT COUNT(*) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = "Mckeown, Kathleen" GROUP BY T3.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT /* Answer the following: Show the names of all authors who have co-authored a paper with Mckeown, Kathleen. */ SELECT /* Answer the following: Show the names of all authors who have co-authored a paper with Mckeown, Kathleen and published it in VLDB. */ SELECT /* Answer the following: Show the names of all authors who have co-authored a paper with Mckeown, Kathleen and published it in VLDB. */ SELECT /* Answer the following: Show the names of all authors who have co-authored a paper with Mckeown, Kathleen and published it in VLDB. */ SELECT /* Answer the following: Show the names of all authors who have co-authored a paper with Mckeown, Kathleen and published it in VLDB. */ SELECT /* Answer the following: Show the names of all authors who have co-authored a paper with
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)
SELECT T1.name, COUNT(*) FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T1.address LIKE '%China%' GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT name, COUNT(*) FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Paper.paper_id = Author_list.paper_id WHERE Affiliation.address LIKE '%China%' GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1
SELECT venue, year, COUNT(*) FROM Paper GROUP BY venue, year
SELECT venue, year, COUNT(*) FROM Paper GROUP BY venue, year
SELECT COUNT(*), affiliation_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id GROUP BY affiliation_id
SELECT affiliation_id, COUNT(*) FROM Author_list GROUP BY affiliation_id
SELECT title FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id HAVING count(*) > 50
SELECT T1.title FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id HAVING COUNT(T2.cited_paper_id) > 50
SELECT COUNT(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE NOT EXISTS (SELECT * FROM Paper AS T3 JOIN Citation AS T4 ON T3.paper_id = T4.cited_paper_id WHERE T4.paper_id = T2.paper_id GROUP BY T4.paper_id HAVING COUNT(*) > 50)
SELECT COUNT(*) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY author_id HAVING COUNT(*) > 50)
SELECT T2.name FROM Author_list AS T1 JOIN Author AS T2 ON T1.author_id = T2.author_id WHERE T1.paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'NAACL' INTERSECT SELECT paper_id FROM Paper WHERE venue = 'ACL') AND YEAR = 2009
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.venue = 'NAACL' INTERSECT SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.venue = 'ACL' AND T3.year = 2009
SELECT T1.name FROM Author AS T1 LEFT JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.paper_id IS NULL
SELECT name FROM Author EXCEPT SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.venue = 'ACL'
SELECT count(*) FROM conference
SELECT count(*) FROM conference
SELECT DISTINCT Conference_Name FROM conference
SELECT DISTINCT Conference_Name FROM conference
SELECT Conference_Name, Year, Location FROM conference
SELECT Conference_Name, Year, Location FROM conference
SELECT Conference_Name, COUNT(*) FROM conference GROUP BY Conference_Name
SELECT Conference_Name, count(*) FROM conference_participation AS T1 JOIN conference AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T2.Conference_Name
SELECT Year, count(*) FROM conference GROUP BY Year
SELECT COUNT(DISTINCT Year) FROM conference
SELECT Year FROM conference GROUP BY Year ORDER BY count(*) ASC LIMIT 1
SELECT Year FROM conference GROUP BY Year ORDER BY count(*) LIMIT 1
SELECT T1.Location FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Location HAVING COUNT(*) >= 2
SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2
SELECT Institution_Name, Location, Founded FROM institution
SELECT Institution_Name, Location, Founded FROM institution
SELECT count(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900
SELECT count(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1
SELECT /* Answer the following: Show the institution name and the number of staff for each institution founded after 1800. */ SELECT /* Answer the following: Show the institution name and the number of staff for each institution founded after 1800. */ SELECT /* Answer the following: Show the institution name and the number of staff for each institution founded after 1800. */ SELECT /* Answer the following: Show the institution name and the number of staff for each institution founded after 1800. */ SELECT /* Answer the following: Show the institution name and the number of staff for each institution founded after 1800. */ SELECT /* Answer the following: Show the institution name and the number of staff for each institution founded after 1800. */ SELECT /* Answer the following: Show the institution name and the number of staff for each institution founded after 1800. */ SELECT /* Answer the following: Show the institution name and the number of staff for each institution founded after 1800. */ SELECT /* Answer the following:
SELECT /* Answer the following: For each institution id, how many staff members does each institution have that was founded after 1800? return their names. */ SELECT /* Answer the following: For each institution id, how many staff members does each institution have that was founded after 1800? return their names. */ SELECT /* Answer the following: For each institution id, how many staff members does each institution have that was founded after 1800? return their names. */ SELECT /* Answer the following: For each institution id, how many staff members does each institution have that was founded after 1800? return their names. */ SELECT /* Answer the following: For each institution id, how many staff members does each institution have that was founded after 1800? return their names. */ SELECT /* Answer the following: For each institution id, how many staff members does each institution have that was founded after 1800? return their names. */ SELECT /* Answer the following: For each institution id, how many staff members does each institution have that was founded after 1
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff)
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff)
SELECT max(Age), min(Age) FROM staff WHERE Nationality = 'United States'
SELECT max(Age), min(Age) FROM staff
SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID JOIN staff AS T3 ON T2.staff_ID = T3.staff_ID WHERE T3.Nationality = "Canada"
SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID JOIN staff AS T3 ON T2.staff_ID = T3.staff_ID WHERE T3.Nationality = "Canada"
SELECT t1.name FROM staff AS t1 JOIN conference_participation AS t2 ON t1.staff_ID = t2.staff_ID WHERE t2.role = "speaker" INTERSECT SELECT t1.name FROM staff AS t1 JOIN conference_participation AS t2 ON t1.staff_ID = t2.staff_ID WHERE t2.role = "sponsor"
SELECT T2.name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_ID = T2.staff_ID WHERE T1.role = "speaker" INTERSECT SELECT T2.name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_ID = T2.staff_ID WHERE T1.role = "sponsor"
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = "ACL") INTERSECT SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = "Naccl"))
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.Conference_ID = "ACL" INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.Conference_ID = "NACCL"
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2003 OR Year = 2004))
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year BETWEEN 2003 AND 2004))
SELECT Conference_Name, Year, count(*) FROM conference_participation GROUP BY Conference_Name, Year
SELECT T1.Conference_ID, T1.Conference_Name, T1.Year, count(*) FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID
SELECT T1.Conference_Name FROM conference_participation AS T1 JOIN conference AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID ORDER BY count(*) DESC LIMIT 2
SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_Name ORDER BY COUNT(*) DESC LIMIT 2
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE "Conference_Name" = 'ACL'))
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation)
SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2004))
SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2004))
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING avg(age) < (SELECT avg(age) FROM PilotSkills)
SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING AVG(age) < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC
SELECT * FROM PilotSkills WHERE age < 30
SELECT * FROM Pilot WHERE age < 30
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" AND T1.age < 35
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'Piper Cub' AND T1.age < 35
SELECT hangar.location FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE PilotSkills.pilot_name = "John Smith"
SELECT location FROM Hangar WHERE plane_name = "F-14 Fighter"
SELECT count(distinct location) FROM Hangar
SELECT COUNT(DISTINCT location) FROM Hangar
SELECT plane_name FROM PilotSkills WHERE pilot_name = "Jones" AND age = 32
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32
SELECT count(*) FROM Pilot WHERE age > 40
SELECT count(*) FROM PilotSkills WHERE age > 40
SELECT COUNT(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = "Boston" AND T1.age < 35 AND T1.plane_name = "B-52 Bomber"
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "B-52 Bomber" AND T1.age < 35
SELECT pilot_name FROM PilotSkills WHERE plane_name = "Piper Cub" ORDER BY age LIMIT 1
SELECT pilot_name FROM PilotSkills WHERE plane_name = "Piper Cub" ORDER BY age DESC LIMIT 1
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1
SELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY count(*) ASC LIMIT 1
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) LIMIT 1
SELECT COUNT(DISTINCT(pilot_name)) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Chicago'
SELECT count(DISTINCT p.pilot_name) FROM PilotSkills AS p JOIN Hangar AS h ON p.plane_name = h.plane_name WHERE h.location = "Chicago"
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41
SELECT T1.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name = "Smith" AND T1.age = 41
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills
SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith'
SELECT count(DISTINCT plane_name) FROM PilotSkills WHERE pilot_name = "Smith"
SELECT COUNT(*) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE PilotSkills.age > 40
SELECT count(DISTINCT plane_name) FROM PilotSkills WHERE age > 40
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC
SELECT pilot_name FROM PilotSkills ORDER BY age DESC
SELECT pilot_name FROM PilotSkills ORDER BY age DESC
SELECT location FROM Hangar ORDER BY plane_name
SELECT location FROM Hangar ORDER BY plane_name
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name
SELECT plane_name FROM Hangar ORDER BY plane_name ASC
SELECT count(*) FROM PilotSkills AS T1 JOIN Person AS T2 ON T1.pilot_name = T2.name WHERE T2.age > 40 OR T2.age < 30
SELECT count(*) FROM PilotSkills WHERE age > 40 OR age < 30
SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 UNION SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'F-14 Fighter' AND age < 30
SELECT /* Answer the following: Return the names and locations of all planes in the hangar. */ SELECT /* Answer the following: Return the names and locations of all planes in the hangar that are not flown by any pilot. */ SELECT /* Answer the following: Return the names and locations of all planes in the hangar that are flown by a pilot older than 40. */ SELECT /* Answer the following: Return the names and locations of all planes in the hangar that are flown by a pilot older than 40 and younger than 30. */ SELECT /* Answer the following: Return the names and locations of all planes in the hangar that are flown by a pilot older than 40 and younger than 30, or are flown by a pilot older than 30 and younger than 40. */ SELECT /* Answer the following: Return the names and locations of all planes in the hangar that are flown by a pilot older than 40 and younger than 30, or are flown by a pilot older than 30
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'Piper Cub' EXCEPT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'B-52 Bomber'
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" EXCEPT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "B-52 Bomber"
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'Piper Cub' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'B-52 Bomber'
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'Piper Cub' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'B-52 Bomber'
SELECT avg(age), min(age) FROM PilotSkills
SELECT avg(age), min(age) FROM PilotSkills
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Boston'
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Boston'
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" OR T2.plane_name = "F-14 Fighter"
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter'
SELECT avg(age), plane_name FROM PilotSkills GROUP BY plane_name
SELECT avg(age), plane_name FROM PilotSkills GROUP BY plane_name
SELECT plane_name, count(*) FROM PilotSkills GROUP BY plane_name
SELECT plane_name, count(*) FROM PilotSkills GROUP BY plane_name
SELECT T1.pilot_name, T1.plane_name, MIN(T1.age) FROM PilotSkills AS T1 GROUP BY T1.plane_name ORDER BY T1.plane_name ASC
SELECT plane_name, pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name ORDER BY T1.age DESC
SELECT /* Answer the following: What is the name of the oldest pilot for each type of plane? */ SELECT /* Answer the following: What is the name of the oldest pilot for each type of plane? */ SELECT /* Answer the following: What is the name of the oldest pilot for each type of plane? */ SELECT /* Answer the following: What is the name of the oldest pilot for each type of plane? */ SELECT /* Answer the following: What is the name of the oldest pilot for each type of plane? */ SELECT /* Answer the following: What is the name of the oldest pilot for each type of plane? */ SELECT /* Answer the following: What is the name of the oldest pilot for each type of plane? */ SELECT /* Answer the following: What is the name of the oldest pilot for each type of plane? */ SELECT /* Answer the following: What is the name of the oldest pilot for each type of plane? */ SELECT /* Answer the following: What is the name of the oldest pilot for each type of plane? */ SELECT /* Answer the
SELECT plane_name, pilot_name FROM PilotSkills JOIN (SELECT plane_name, MIN(age) AS oldest_age FROM PilotSkills GROUP BY plane_name) AS oldest_pilots ON PilotSkills.plane_name = oldest_pilots.plane_name AND PilotSkills.age = oldest_pilots.oldest_age
SELECT pilot_name, max(age) FROM PilotSkills GROUP BY pilot_name
SELECT pilot_name, max(age) FROM PilotSkills GROUP BY pilot_name
SELECT COUNT(*), AVG(age), city_code FROM PilotSkills GROUP BY city_code
SELECT hangar.location, count(pilot_skills.pilot_name), avg(pilot_skills.age) FROM PilotSkills JOIN Hangar ON pilot_skills.plane_name = hangar.plane_name GROUP BY hangar.location
SELECT count(*) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35
SELECT plane_name, COUNT(*) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35
SELECT location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name ORDER BY T2.age LIMIT 1
SELECT location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name ORDER BY T2.age LIMIT 1
SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin'
SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin'
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age > (SELECT max(age) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'Piper Cub')
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = "Piper Cub" EXCEPT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age > (SELECT max(age) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = "Piper Cub") ORDER BY T1.pilot_name
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age < (SELECT MIN(age) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "F-14 Fighter")
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'F-14 Fighter' AND T1.age < (SELECT min(age) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'F-14 Fighter')
SELECT DISTINCT(plane_name) FROM PilotSkills WHERE plane_name LIKE "%Bomber%"
SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'
SELECT count(*) FROM PilotSkills AS T1 JOIN PilotSkills AS T2 ON T1.pilot_name = T2.pilot_name WHERE T1.age > T2.age AND T2.plane_name = "Piper Cub"
SELECT count(*) FROM PilotSkills AS t1 JOIN Pilot AS t2 ON t1.pilot_name = t2.name WHERE t2.age = (SELECT min(age) FROM pilot WHERE name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = "Piper Cub" ) ) AND t1.plane_name = "Piper Cub"
SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1
SELECT /* Answer the following: Select the name and age of the spokesman who has the highest rank position. */ SELECT /* Answer the following: Select the name and age of the spokesman who has the highest points. */ SELECT /* Answer the following: Select the name and age of the spokesman who has the highest rank position and the highest points. */ SELECT /* Answer the following: Select the name and age of the spokesman who has the highest rank position and the highest points, and who is from the district with the smallest population. */ SELECT /* Answer the following: Select the name and age of the spokesman who has the highest rank position and the highest points, and who is from the district with the smallest population, and who has been a spokesman for the longest time. */ SELECT /* Answer the following: Select the name and age of the spokesman who has the highest rank position and the highest points, and who is from the district with the smallest population, and who has been a spokesman for the longest time, and who has the highest age. */ SELECT /* Answer the following: Select the name and age
SELECT Name, Population FROM district WHERE Area_km > (SELECT avg(Area_km) FROM district)
SELECT MAX(Area_km), avg(Area_km) FROM district
SELECT SUM(Population) FROM district WHERE Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3)
SELECT District_ID, Name, Government_website FROM district ORDER BY Population DESC
SELECT district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID JOIN spokesman ON spokesman_district.Spokesman_ID = spokesman.Spokesman_ID WHERE spokesman.Government_website LIKE "%gov%"
SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000
SELECT T1.Name, T1.Speach_title FROM spokesman AS T1 JOIN spokesman_district AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID
SELECT avg(Points), avg(Age) FROM spokesman WHERE Rank_position = 1
SELECT FROM WHERE /* Answer the following: What are the names and points of spokesmen who are older than 40? */ SELECT FROM WHERE /* Answer the following: What are the names and points of spokesmen who are older than 40 and have a rank position of 1? */ SELECT FROM WHERE /* Answer the following: What are the names and points of spokesmen who are older than 40 and have a rank position of 1? */ SELECT FROM WHERE /* Answer the following: What are the names and points of spokesmen who are older than 40 and have a rank position of 1? */ SELECT FROM WHERE /* Answer the following: What are the names and points of spokesmen who are older than 40 and have a rank position of 1? */ SELECT FROM WHERE /* Answer the following: What are the names and points of spokesmen who are older than 40 and have a rank position of 1? */ SELECT FROM WHERE /* Answer the
SELECT Name FROM spokesman ORDER BY Age DESC LIMIT 1
SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman)
SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Name FROM spokesman AS T1 JOIN spokesman_district AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID WHERE T2.Start_year < 2004
SELECT COUNT(*), T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.Name
SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID JOIN spokesman AS T3 ON T2.Spokesman_ID = T3.Spokesman_ID WHERE T3.Rank_position = 1 INTERSECT SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID JOIN spokesman AS T3 ON T2.Spokesman_ID = T3.Spokesman_ID WHERE T3.Rank_position = 2
SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.Name HAVING COUNT(*) > 1
SELECT count(*) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district)
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)
SELECT sum(Population), avg(Population) FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district)
SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures)
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1
SELECT title, location FROM Paintings ORDER BY year LIMIT 1
SELECT title, location FROM Paintings ORDER BY year LIMIT 1
SELECT title FROM Sculptures WHERE location = "Gallery 226"
SELECT title FROM Sculptures WHERE location = "gallery 226"
SELECT title, location FROM Paintings
SELECT title, location FROM Paintings
SELECT title, location FROM Sculptures
SELECT title, location FROM Sculptures
SELECT medium FROM Paintings WHERE paintingID = 80
SELECT medium FROM Paintings WHERE paintingID = 80
SELECT fname, lname FROM Artists WHERE birthYear > 1850
SELECT fname, lname FROM Artists WHERE birthYear > 1850
SELECT title, year FROM Sculptures WHERE location!= 226
SELECT title, year FROM Sculptures WHERE location!= 226
SELECT DISTINCT T1.fname, T1.lname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year < 1900
SELECT DISTINCT Artists.fname, Artists.lname FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year < 1900
SELECT DISTINCT birthYear FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year > 1920
SELECT DISTINCT B.birthYear FROM Sculptures AS A JOIN Artists AS B ON A.sculptorID = B.artistID WHERE A.year > 1920
SELECT fname, lname FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1
SELECT fname, lname FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1
SELECT min(deathYear - birthYear) FROM Artists
SELECT MIN(deathYear - birthYear) FROM Artists
SELECT fname, deathYear - birthYear FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1
SELECT fname, deathYear - birthYear FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1
SELECT COUNT(*) FROM Paintings AS T1 JOIN Exhibits_Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE T2.galleryID = 240
SELECT count(*) FROM Paintings AS T1 JOIN Exhibits_Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE T2.galleryID = 240
SELECT COUNT(*) FROM Paintings WHERE artistID IN (SELECT artistID FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1)
SELECT COUNT(*) FROM Paintings WHERE artistID IN (SELECT artistID FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1)
SELECT T2.title, T2.year FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.fname = "Mary"
SELECT title, year FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = "Mary")
SELECT width_mm FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE birthYear < 1850
SELECT width_mm FROM Paintings JOIN Artists ON Artists.artistID = Paintings.painterID WHERE Artists.birthYear < 1850
SELECT location, medium FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.fname = "Pablo"
SELECT T1.location, T1.mediumOn FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.fname = 'Pablo'
SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID INTERSECT SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings UNION SELECT sculptorID FROM Sculptures)
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil') INTERSECT SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'lithographic')
SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'Oil' INTERSECT SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'Lithographic'
SELECT birthYear FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year = 1884 AND Paintings.mediumOn = "canvas"
SELECT birthYear FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year = 1884
SELECT DISTINCT fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = "oil" AND T2.location = "gallery 241"
SELECT fname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.location = "gallery 241"
SELECT medium, COUNT(*) FROM Paintings GROUP BY medium /* Answer the following: What are the numbers of works for different medium type? */ SELECT /* Answer the following: What are the numbers of works for different medium type? */ SELECT /* Answer the following: What are the numbers of works for different medium type? */ SELECT /* Answer the following: What are the numbers of works for different medium type? */ SELECT /* Answer the following: What are the numbers of works for different medium type? */ SELECT /* Answer the following: What are the numbers of works for different medium type? */ SELECT /* Answer the following: What are the numbers of works for different medium type? */ SELECT /* Answer the following: What are the numbers of works for different medium type? */ SELECT /* Answer the following: What are the numbers of works for different medium type? */ SELECT /* Answer the following: What are the numbers of works for different medium type? */ SELECT /* Answer the following: What are the numbers of works for different medium type? */ SELECT /* Answer the following: What are the numbers of works for
SELECT medium, COUNT(*) FROM Paintings GROUP BY medium UNION SELECT medium, COUNT(*) FROM Sculptures GROUP BY medium
SELECT avg(height_mm), medium FROM Paintings GROUP BY medium
SELECT avg(height_mm), medium FROM Paintings GROUP BY medium
SELECT count(*), location FROM Paintings WHERE year < 1900 GROUP BY location
SELECT count(DISTINCT location) FROM Paintings WHERE year < 1900
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'Oil'
SELECT title FROM Paintings WHERE medium = 'Oil' AND year > 1910
SELECT DISTINCT T1.painterID FROM Paintings AS T1 JOIN Exhibits AS T2 ON T1.paintingID = T2.paintingID WHERE T2.galleryID = 240 AND T1.medium = "oil"
SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'
SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT max(height_mm) FROM Paintings WHERE mediumOn = "canvas")
SELECT DISTINCT T1.title FROM Paintings AS T1 JOIN Paintings AS T2 ON T1.height_mm > T2.height_mm WHERE T2.mediumOn = 'canvas'
SELECT DISTINCT T1.paintingID FROM Paintings AS T1 JOIN Paintings AS T2 ON T1.year < T2.year WHERE T2.location = "gallery 240"
SELECT DISTINCT T1.paintingID FROM Paintings AS T1 JOIN Paintings AS T2 ON T1.year < T2.year WHERE T2.location = "gallery 240"
SELECT paintingID FROM Paintings ORDER BY year LIMIT 1
SELECT paintingID FROM Paintings ORDER BY year LIMIT 1
SELECT fname, lname FROM Artists AS t1 JOIN Sculptures AS t2 ON t1.artistID = t2.sculptorID WHERE t2.title LIKE "%female%"
SELECT fname, lname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%female%'
SELECT DISTINCT title FROM Paintings ORDER BY title
SELECT DISTINCT title FROM Paintings ORDER BY title
SELECT DISTINCT title FROM Paintings ORDER BY height_mm
SELECT title FROM Paintings ORDER BY height_mm
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950
SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222
SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222
SELECT artistID FROM Paintings WHERE year < 1900 GROUP BY artistID ORDER BY COUNT(*) DESC LIMIT 1
SELECT artistID FROM Paintings WHERE year < 1900 GROUP BY artistID ORDER BY COUNT(*) DESC LIMIT 1
SELECT fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY fname ORDER BY count(*) DESC LIMIT 1
SELECT fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930
SELECT DISTINCT location FROM Paintings WHERE year < 1885 UNION SELECT DISTINCT location FROM Paintings WHERE year > 1930
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000
SELECT location FROM Paintings WHERE mediumOn = "on panel" INTERSECT SELECT location FROM Paintings WHERE mediumOn = "on canvas"
SELECT DISTINCT location FROM Paintings WHERE mediumOn = "panel" INTERSECT SELECT DISTINCT location FROM Paintings WHERE mediumOn = "canvas"
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930
SELECT location FROM Paintings WHERE year < 1885 INTERSECT SELECT location FROM Paintings WHERE year > 1930
SELECT avg(height_mm), avg(width_mm) FROM Paintings WHERE medium = "oil" AND location = "gallery 241"
SELECT avg(height_mm), avg(width_mm) FROM Paintings WHERE medium = "oil" AND location = "gallery 241"
SELECT max(height_mm), painterID FROM Paintings WHERE year < 1900
SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1
SELECT max(height_mm), max(width_mm), year FROM Paintings GROUP BY year
SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year
SELECT avg(height_mm), avg(width_mm), T1.fname, T1.lname FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID GROUP BY T1.painterID ORDER BY T1.fname
SELECT avg(height_mm), avg(width_mm), T2.fname, T2.lname FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID GROUP BY T2.fname, T2.lname ORDER BY T2.fname
SELECT T1.fname, count(*) FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T2.painterID HAVING count(*) >= 2
SELECT fname, COUNT(*) FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY fname HAVING COUNT(*) >= 2
SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING count(*) <= 3)
SELECT T1.artistID, T1.lname, T1.fname, T1.deathYear FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.artistID HAVING COUNT(*) < 4
SELECT deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY count(*) LIMIT 1)
SELECT deathYear FROM Artists WHERE artistID NOT IN (SELECT sculptorID FROM Sculptures)
SELECT T1.paintingID, T1.height_mm FROM Paintings AS T1 JOIN Gallery AS T2 ON T1.paintingID = T2.paintingID WHERE T2.galleryID = 240 ORDER BY T1.width_mm DESC LIMIT 1
SELECT height_mm, paintingID FROM Paintings WHERE galleryID = 240 ORDER BY height_mm DESC LIMIT 1
SELECT T1.paintingID FROM Paintings AS T1 JOIN Gallery AS T2 ON T1.paintingID = T2.paintingID WHERE T2.galleryID = 240 INTERSECT SELECT paintingID FROM Paintings WHERE galleryID < 240
SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')
SELECT T1.paintingID FROM Paintings AS T1 WHERE T1.height_mm > (SELECT max(height_mm) FROM Paintings WHERE year > 1900)
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)
SELECT T1.fname, T1.lname, count(*) FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = "oil" GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 3
SELECT T1.artistID, T1.fname, T1.lname, COUNT(*) FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = "oil" GROUP BY T1.artistID ORDER BY COUNT(*) DESC
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year
SELECT paintingID, location, title FROM Paintings WHERE medium = "oil" ORDER BY year
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures)
SELECT fname, lname FROM Artists WHERE artistID NOT IN (SELECT sculptorID FROM Sculptures) AND artistID IN (SELECT painterID FROM Paintings)
SELECT location FROM Paintings WHERE year < 1885 EXCEPT SELECT location FROM Paintings WHERE mediumOn = 'canvas'
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn!= "canvas"
SELECT count(*) FROM race
SELECT count(*) FROM race
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team
SELECT T1.Driver_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Winning_driver = T2.Driver_Name EXCEPT SELECT T1.Driver_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position = "Junior Strous"
SELECT T1.Driver_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Winning_driver!= "Junior Strous"
SELECT Constructor FROM driver ORDER BY Age ASC
SELECT Constructor FROM driver GROUP BY Constructor ORDER BY Age ASC
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20
SELECT Entrant FROM driver WHERE Age >= 20 GROUP BY Entrant
SELECT max(Age), min(Age) FROM driver
SELECT max(Age), min(Age) FROM driver
SELECT count(distinct Engine) FROM driver WHERE Age > 30 OR Age < 20
SELECT count(distinct Engine) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age > 30 OR T1.Age < 20
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
SELECT T1.Driver_Name, T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID
SELECT T1.Driver_Name, T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID
SELECT T1.Driver_Name, COUNT(*) FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_Name
SELECT T1.Driver_ID, COUNT(*) FROM race AS T1 GROUP BY T1.Driver_ID
SELECT MAX(T1.Age) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID
SELECT AVG(Age) FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Driver_Name, T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_Name HAVING COUNT(*) >= 2
SELECT T1.Driver_Name, T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*) >= 2
SELECT Race_Name FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Age >= 26)
SELECT Race_Name FROM race WHERE Driver_ID >= 26
SELECT Driver_Name FROM driver WHERE Constructor!= "Bugatti"
SELECT Driver_Name FROM driver WHERE Constructor <> 'Bugatti'
SELECT Constructor, COUNT(*) FROM driver GROUP BY Constructor
SELECT Constructor, COUNT(*) FROM driver GROUP BY Constructor
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1
SELECT Engine FROM race GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= 2
SELECT T1.Engine FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Engine HAVING COUNT(*) >= 2
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
SELECT Constructor FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE driver.Age < 20 INTERSECT SELECT Constructor FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE driver.Age > 30
SELECT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30
SELECT T1.Winning_team FROM race AS T1 JOIN race AS T2 ON T1.Winning_team = T2.Winning_team WHERE T1.Road < T2.Road GROUP BY T1.Winning_team HAVING COUNT(*) > 1
SELECT Winning_team, COUNT(*) FROM race GROUP BY Winning_team HAVING COUNT(*) > 1
SELECT T1.Driver_Name FROM race AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position = "James Hinchcliffe" INTERSECT SELECT T1.Driver_Name FROM race AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position = "Carl Skerlong"
SELECT /* Answer the following: What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong? */ SELECT /* Answer the following: What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong? */ SELECT /* Answer the following: What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong? */ SELECT /* Answer the following: What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong? */ SELECT /* Answer the following: What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong? */ SELECT /* Answer the following: What are the names of drivers who had both the pole position James Hinchcl
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = "James Hinchcliffe")
SELECT Driver_Name FROM driver WHERE Driver_Name <> 'James Hinchcliffe'
SELECT count(*) FROM languages
SELECT count(*) FROM languages
SELECT name FROM languages ORDER BY name ASC
SELECT name FROM languages ORDER BY name
SELECT name FROM languages WHERE name LIKE '%ish%'
SELECT name FROM languages WHERE name LIKE '%ish%'
SELECT name FROM countries ORDER BY overall_score DESC
SELECT name FROM countries ORDER BY overall_score DESC
SELECT avg(justice_score) FROM countries
SELECT avg(justice_score) FROM countries
SELECT max(health_score), min(health_score) FROM countries WHERE name!= "Norway"
SELECT max(health_score), min(health_score) FROM countries WHERE name!= "Norway"
SELECT count(*) FROM official_languages
SELECT count(DISTINCT language_id) FROM official_languages
SELECT name FROM countries ORDER BY education_score DESC
SELECT name FROM countries ORDER BY education_score DESC
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
SELECT T2.name, T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id JOIN languages AS T3 ON T2.language_id = T3.id
SELECT T1.name, T2.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id
SELECT T1.name, count(*) FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name
SELECT T2.name, count(*) FROM official_languages AS T1 JOIN countries AS T2 ON T1.country_id = T2.id GROUP BY T2.name
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name HAVING COUNT(*) >= 2
SELECT t1.name FROM languages AS t1 JOIN official_languages AS t2 ON t1.id = t2.language_id GROUP BY t1.name HAVING count(*) >= 2
SELECT avg(overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id JOIN languages AS T3 ON T2.language_id = T3.id WHERE T3.name = "English"
SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id = (SELECT id FROM languages WHERE name = "English"))
SELECT t1.name FROM languages AS t1 JOIN official_languages AS t2 ON t1.id = t2.language_id GROUP BY t1.name ORDER BY count(*) DESC LIMIT 3
SELECT name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name ORDER BY count(*) DESC LIMIT 3
SELECT T1.name, avg(T2.overall_score) FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name ORDER BY avg(T2.overall_score) DESC
SELECT T1.name, avg(T2.overall_score) FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name ORDER BY avg(T2.overall_score) DESC
SELECT name FROM countries ORDER BY count(*) DESC LIMIT 1
SELECT T1.name, COUNT(*) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id JOIN countries AS T3 ON T3.id = T2.country_id WHERE T3.overall_score > 95 INTERSECT SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id JOIN countries AS T3 ON T3.id = T2.country_id WHERE T3.overall_score < 90
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95)) INTERSECT SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score < 90))
SELECT distinct country, town_city FROM addresses
SELECT country, town_city FROM addresses
SELECT FROM WHERE 
SELECT T1.State_Province FROM Properties AS T1 JOIN Addresses AS T2 ON T1.Property_Address_ID = T2.Address_ID
SELECT feature_description FROM Features WHERE feature_name = "Rooftop"
SELECT feature_description FROM Features WHERE feature_name = "rooftop"
SELECT feature_name, feature_description FROM Features JOIN Property_Features ON Features.feature_id = Property_Features.feature_id GROUP BY feature_name, feature_description ORDER BY COUNT(*) DESC LIMIT 1
SELECT feature_name, feature_description FROM Features, Property_Features WHERE Features.feature_id = Property_Features.feature_id GROUP BY feature_name, feature_description ORDER BY COUNT(*) DESC LIMIT 1
SELECT min(room_count) FROM Properties
SELECT MIN(room_count) FROM Properties
SELECT count(*) FROM Properties WHERE garage_yn = "Y" OR parking_lots = "Y"
SELECT count(*) FROM Properties WHERE parking_lots = 1 OR garage_yn = 1
SELECT age_category_code FROM Users WHERE other_user_details LIKE '%Mother%'
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_description LIKE "%Mother%"
SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 1
SELECT first_name FROM users WHERE user_id IN (SELECT owner_user_id FROM properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT avg(room_count) FROM Properties WHERE garage_yn = "Y"
SELECT avg(room_count) FROM Properties AS T1 JOIN Property_Features AS T2 ON T1.property_id = T2.property_id WHERE T2.feature_name = "Garden"
SELECT city FROM Properties WHERE property_features.feature_id = 'pool'
SELECT DISTINCT T1.town_city FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id = T2.property_address_id JOIN Property_Features AS T3 ON T2.property_id = T3.property_id WHERE T3.feature_name = 'Swimming Pool'
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1
SELECT avg(room_count) FROM Properties
SELECT avg(room_count) FROM Properties
SELECT count(DISTINCT room_size) FROM Rooms
SELECT COUNT(DISTINCT room_size) FROM Rooms
SELECT user_id, search_string FROM User_Searches GROUP BY user_id HAVING COUNT(*) >= 2
SELECT user_id, search_seq FROM User_Searches GROUP BY user_id, search_seq HAVING COUNT(*) >= 2
SELECT MAX(search_datetime) FROM User_Searches
SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC LIMIT 1
SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC
SELECT zip_postcode FROM Properties WHERE property_id NOT IN (SELECT property_id FROM Users WHERE owner_user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*) <= 2))
SELECT zip_postcode FROM Properties WHERE property_id NOT IN (SELECT property_id FROM Users WHERE owner_user_id IN (SELECT user_id FROM Users GROUP BY user_id HAVING COUNT(*) <= 2))
SELECT user_id, user_category_code FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1
SELECT user_id, user_category_code FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1
SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code JOIN User_Searches AS T3 ON T2.user_id = T3.user_id ORDER BY T3.search_datetime ASC LIMIT 1
SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code JOIN User_Searches AS T3 ON T2.user_id = T3.user_id ORDER BY T3.search_datetime ASC LIMIT 1
SELECT login_name FROM Users WHERE age_category_code = 'Senior Citizen' ORDER BY first_name
SELECT login_name FROM Users WHERE age_category_code = (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior Citizen') ORDER BY first_name
SELECT count(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = 'Y')
SELECT count(*) FROM User_Searches AS T1 JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.is_buyer = "Y"
SELECT date_registered FROM Users WHERE login_name = "ratione"
SELECT registration_date FROM Users WHERE login_name = 'ratione'
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 'Y'
SELECT T1.line_1_number_building, T1.line_2_number_street, T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.age_category_code = 'SENIOR'
SELECT T1.line_1_number_building, T1.line_2_number_street, T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.age_category_code = "senior"
SELECT count(*) FROM Properties AS T1 JOIN Property_Features AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id HAVING count(*) >= 2
SELECT count(*) FROM Properties INNER JOIN Property_Features ON Properties.property_id = Property_Features.property_id GROUP BY Properties.property_id HAVING count(*) >= 2
SELECT T1.property_id, count(*) FROM property_photos AS T1 GROUP BY T1.property_id
SELECT T1.property_id, count(*) FROM property_photos AS T1 GROUP BY T1.property_id
SELECT T1.user_id, count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id = T2.property_id GROUP BY T1.user_id
SELECT owner_user_id, count(*) FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id
SELECT sum(max(price_max)) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id = T2.user_id WHERE T2.is_single_mother = 'Y' OR T2.is_student = 'Y'
SELECT sum(max(price_max)) FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE user_category_code = 'Single_Mother' OR user_category_code = 'Student')
SELECT datestamp, property_name FROM user_property_history JOIN properties ON user_property_history.property_id = properties.property_id ORDER BY datestamp
SELECT datestamp, property_name FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY datestamp
SELECT T1.property_type_description, T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT PROPERTY_TYPE_CODE, PROPERTY_TYPE_DESCRIPTION FROM PROPERTIES GROUP BY PROPERTY_TYPE_CODE ORDER BY COUNT(*) DESC LIMIT 1
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = "Over 60"
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'
SELECT room_size, count(*) FROM Rooms GROUP BY room_size
SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size
SELECT country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.first_name = "Robbie"
SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.first_name = "Robbie"
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id JOIN Addresses AS T3 ON T2.property_address_id = T3.address_id WHERE T3.city = "Damianfort"
SELECT T1.first_name, T1.last_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id WHERE T1.user_id IN (SELECT owner_user_id FROM Properties)
SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT user_id FROM Properties)
SELECT search_string FROM user_searches WHERE user_id NOT IN (SELECT user_id FROM properties)
SELECT last_name, user_id FROM users WHERE user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(*) >= 2) AND user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(*) <= 2)
SELECT T2.last_name, T2.user_id FROM User_Searches AS T1 JOIN Users AS T2 ON T1.user_id = T2.user_id GROUP BY T2.user_id HAVING count(*) <= 2 INTERSECT SELECT T2.last_name, T2.user_id FROM User_Searches AS T1 JOIN Users AS T2 ON T1.user_id = T2.user_id JOIN Properties AS T3 ON T2.user_id = T3.owner_user_id GROUP BY T2.user_id HAVING count(*) >= 2
SELECT count(*) FROM bike WHERE weight > 780
SELECT product_name, weight FROM bike ORDER BY price ASC
SELECT heat, name, nation FROM cyclist
SELECT max(weight), min(weight) FROM bike
SELECT avg(price) FROM bike WHERE material = "Carbon CC"
SELECT name, result FROM cyclist WHERE nation!= 'Russia'
SELECT DISTINCT T1.id, T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id WHERE T2.purchase_year > 2015
SELECT T1.id, T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id GROUP BY T1.id HAVING COUNT(*) >= 4
SELECT T1.id, T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
SELECT DISTINCT T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.nation = 'Russia' OR T3.nation = 'Great Britain'
SELECT count(DISTINCT heat) FROM cyclist
SELECT count(DISTINCT cyclist_id) FROM cyclists_own_bikes WHERE purchase_year > 2015
SELECT DISTINCT T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.result < "4:21.558"
SELECT T1.product_name, T1.price FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id WHERE T2.cyclist_id = (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') INTERSECT SELECT T1.product_name, T1.price FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id WHERE T2.cyclist_id = (SELECT id FROM cyclist WHERE name = 'Antonio Tauler')
SELECT name, nation, result FROM cyclist WHERE NOT id IN (SELECT cyclist_id FROM cyclists_own_bikes)
SELECT product_name FROM bike WHERE material LIKE '%fiber%'
SELECT T1.id, count(*) FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id GROUP BY T1.id ORDER BY T1.id
SELECT Flavor, max(Price) FROM goods WHERE Food = 'cake'
SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1
SELECT Flavor FROM goods WHERE Price = (SELECT MIN(Price) FROM goods WHERE Food = 'cookie')
SELECT Id, Flavor FROM goods WHERE Food = 'Cookie' ORDER BY Price LIMIT 1
SELECT Id FROM goods WHERE Flavor = "apple"
SELECT Id FROM goods WHERE Flavor = "apple"
SELECT Id FROM goods WHERE Price < 3
SELECT Id FROM goods WHERE Price < 3
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Flavor = "lemon" AND T3.Food = "cake"
SELECT DISTINCT T1.CustomerId FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Flavor = "Lemon" AND T3.Food = "Cake"
SELECT Food, COUNT(DISTINCT CustomerId) FROM items JOIN goods ON items.Item = goods.Id GROUP BY Food
SELECT Food, count(*) FROM items, goods WHERE items.Item = goods.Id GROUP BY Food
SELECT T1.Id FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = "Bakery" GROUP BY T1.Id HAVING count(*) >= 15
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt GROUP BY T1.ReceiptNumber HAVING count(*) >= 15
SELECT T1.LastName FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = "bakery" GROUP BY T1.LastName HAVING count(*) > 10
SELECT LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId WHERE receipts.ReceiptNumber IN (SELECT ReceiptNumber FROM receipts GROUP BY ReceiptNumber HAVING COUNT(*) > 10)
SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = "Cake"
SELECT count(DISTINCT t1.Flavor) FROM goods AS t1 JOIN items AS t2 ON t1.Id = t2.Item JOIN receipts AS t3 ON t2.Receipt = t3.ReceiptNumber WHERE t3.CustomerId = ?
SELECT Flavor FROM goods WHERE Food = "Croissant"
SELECT Flavor FROM goods WHERE Food = "croissant"
SELECT DISTINCT T1.Item FROM items AS T1 JOIN receipts AS T2 ON T1.Receipt = T2.ReceiptNumber WHERE T2.CustomerId = 15
SELECT DISTINCT T3.Item FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T1.CustomerId = 15
SELECT Food, AVG(Price), MAX(Price), MIN(Price) FROM goods GROUP BY Food
SELECT Food, avg(Price), min(Price), max(Price) FROM goods GROUP BY Food
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = "Cake" INTERSECT SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = "Cookie"
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Food = 'cake' INTERSECT SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Food = 'cookie'
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = "Croissant" INTERSECT SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T1.CustomerId IN (SELECT Id FROM customers WHERE LastName = "LOGAN")
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = 'croissant' AND T1.CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Logan')
SELECT ReceiptNumber, Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id ORDER BY T3.Price DESC LIMIT 1
SELECT T1.ReceiptNumber, T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id ORDER BY T3.Price DESC LIMIT 1
SELECT Item FROM items GROUP BY Item ORDER BY count(*) DESC LIMIT 1
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) LIMIT 1
SELECT Food, COUNT(*) FROM goods GROUP BY Food
SELECT food, COUNT(*) FROM goods GROUP BY food
SELECT avg(Price), Food FROM goods GROUP BY Food
SELECT Food, avg(Price) FROM goods GROUP BY Food
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5
SELECT Id FROM goods WHERE Flavor = "Apricot" AND Price < 5
SELECT T1.Flavor FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item WHERE T2.Receipt IN (SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId = T2.Id WHERE T2.LastName = 'Smith' AND T2.FirstName = 'John') AND T1.Price > 10
SELECT T1.Flavor FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item WHERE T2.Item LIKE '%cake%' AND T1.Price > 10
SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods)
SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods)
SELECT DISTINCT T1.Id FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'Tart' INTERSECT SELECT DISTINCT T1.Id FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Price < (SELECT min(Price) FROM goods WHERE Food = 'Tart')
SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart')
SELECT DISTINCT receipts.ReceiptNumber FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Price > 13
SELECT Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Price > 15
SELECT T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Price > 15
SELECT Id FROM goods WHERE Id LIKE "%APP%"
SELECT Id FROM goods WHERE Id LIKE "%APP%"
SELECT Id, Price FROM goods WHERE Id LIKE "%70%"
SELECT Id, Price FROM goods WHERE Id LIKE "%70%"
SELECT LastName FROM customers ORDER BY LastName
SELECT LastName FROM customers ORDER BY LastName
SELECT Id FROM goods ORDER BY Id ASC
SELECT DISTINCT Id FROM goods ORDER BY Id
SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12 UNION SELECT ReceiptNumber FROM items WHERE Item = "Apple Flavor Pie"
SELECT ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item = "Apple Flavor Pie" OR T1.CustomerId = 12
SELECT Date, ReceiptNumber FROM receipts ORDER BY Date DESC LIMIT 1
SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T1.Date = (SELECT MIN(Date) FROM receipts) OR T3.Price > 10
SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT min(Date) FROM receipts) UNION SELECT ReceiptNumber FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 10
SELECT Id FROM goods WHERE Price BETWEEN 3 AND 7 AND Flavor = "Cookie" INTERSECT SELECT Id FROM goods WHERE Price BETWEEN 3 AND 7 AND Flavor = "Cake"
SELECT Id FROM goods WHERE Flavor = 'Cookies' OR Flavor = 'Cakes' AND Price BETWEEN 3 AND 7
SELECT FirstName, LastName FROM customers WHERE Date = (SELECT MIN(Date) FROM receipts)
SELECT LastName, FirstName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId ORDER BY receipts.Date LIMIT 1
SELECT avg(Price) FROM goods WHERE Flavor = "blackberry" OR Flavor = "blueberry"
SELECT avg(Price) FROM goods WHERE Flavor = "blackberry" OR Flavor = "blueberry"
SELECT MIN(Price) FROM goods WHERE Flavor = 'cheese'
SELECT min(Price) FROM goods WHERE Flavor = 'cheese'
SELECT max(Price), min(Price), avg(Price) FROM goods GROUP BY Flavor ORDER BY Flavor
SELECT /* Answer the following: What are the maximum, minimum, and average prices of goods of each food, ordered by food? */ SELECT /* Answer the following: What are the maximum, minimum, and average prices of goods of each food, ordered by food? */ SELECT /* Answer the following: What are the maximum, minimum, and average prices of goods of each food, ordered by food? */ SELECT /* Answer the following: What are the maximum, minimum, and average prices of goods of each food, ordered by food? */ SELECT /* Answer the following: What are the maximum, minimum, and average prices of goods of each food, ordered by food? */ SELECT /* Answer the following: What are the maximum, minimum, and average prices of goods of each food, ordered by food? */ SELECT /* Answer the following: What are the maximum, minimum, and average prices of goods of each food, ordered by food? */ SELECT /* Answer the following: What are the maximum, minimum, and average prices of goods of each food, ordered by food? */ SELECT /* Answer the following: What are the maximum, minimum, and
SELECT min(Price), max(Price) FROM goods GROUP BY Food ORDER BY Food
SELECT min(Price), max(Price) FROM goods WHERE Food = 'food' ORDER BY Food
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3
SELECT Date FROM receipts GROUP BY Date ORDER BY count(*) DESC LIMIT 3
SELECT CustomerId, COUNT(*) FROM receipts GROUP BY CustomerId ORDER BY COUNT(*) DESC LIMIT 1
SELECT CustomerId, COUNT(*) FROM receipts GROUP BY CustomerId ORDER BY COUNT(*) DESC LIMIT 1
SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date
SELECT Date, COUNT(*) FROM receipts GROUP BY Date
SELECT FirstName, LastName FROM customers AS c JOIN items AS i ON c.Id = i.CustomerId JOIN goods AS g ON i.Item = g.Id WHERE g.Flavor = "Apple" AND g.Food = "Tart"
SELECT LastName, FirstName FROM customers AS T1 JOIN items AS T2 ON T1.Id = T2.CustomerId JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Flavor = "Apple" AND T3.Food = "Tart"
SELECT T1.Id FROM goods AS T1 JOIN goods AS T2 ON T1.Price < T2.Price WHERE T2.Food = "Croissant"
SELECT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Croissant')
SELECT Id FROM goods WHERE Price >= (SELECT avg(Price) FROM goods WHERE Food = "Tart")
SELECT T1.Id FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'cake' AND T1.Price >= (SELECT avg(T1.Price) FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'tart')
SELECT Id FROM goods WHERE Price > 2 * (SELECT avg(Price) FROM goods)
SELECT Id FROM goods WHERE Price > 2 * (SELECT avg(Price) FROM goods)
SELECT Id, Flavor, Food FROM goods ORDER BY Price
SELECT Id, Flavor, Food FROM goods ORDER BY Price
SELECT Id, Flavor FROM goods WHERE Food = 'Cake' ORDER BY Flavor ASC
SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor
SELECT T1.Item FROM items AS T1 JOIN goods AS T2 ON T1.Item = T2.Id WHERE T2.Flavor = "Chocolate" GROUP BY T1.Item HAVING count(*) <= 10
SELECT T1.Item FROM items AS T1 JOIN goods AS T2 ON T1.Item = T2.Id WHERE T2.Flavor = "Chocolate" GROUP BY T1.Item HAVING count(*) <= 10
SELECT T1.Flavor FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item WHERE T2.Item LIKE "%Cake%" EXCEPT SELECT T1.Flavor FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item WHERE T2.Item LIKE "%Tart%"
SELECT T1.Flavor FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item WHERE T2.Item = 'Tart' EXCEPT SELECT Flavor FROM goods WHERE Food = 'Cake'
SELECT Food, COUNT(*) FROM items JOIN goods ON items.Item = goods.Id GROUP BY Food ORDER BY COUNT(*) DESC LIMIT 3
SELECT Item, sum(Price) FROM items JOIN goods ON items.Item = goods.Id GROUP BY Item ORDER BY sum(Price) DESC LIMIT 3
SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING sum(Price) > 150
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id GROUP BY T1.ReceiptNumber HAVING sum(T3.Price) > 150
SELECT CustomerId FROM items GROUP BY CustomerId HAVING avg(Price) > 5
SELECT T1.CustomerId FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt GROUP BY T1.CustomerId HAVING avg(T2.Price) > 5
SELECT Date FROM receipts WHERE (SELECT SUM(Price) FROM items WHERE Receipt = receipts.ReceiptNumber) > 100 GROUP BY Date
SELECT Date FROM receipts WHERE (SELECT SUM(Price) FROM items WHERE Receipt = receipts.ReceiptNumber) > 100
SELECT count(*) FROM driver
SELECT count(*) FROM driver
SELECT count(*), Make FROM driver WHERE points > 150 GROUP BY Make
SELECT Make, count(*) FROM driver WHERE Points > 150 GROUP BY Make
SELECT avg(Age), Make FROM driver GROUP BY Make
SELECT avg(Driver.Age), Driver.Make FROM Driver GROUP BY Driver.Make
SELECT avg(Laps) FROM driver WHERE Age < 20
SELECT avg(Laps) FROM driver WHERE Age < 20
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner
SELECT T1.Manager, T1.Sponsor FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID ORDER BY T3.Car_Owner
SELECT T1.Make FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Make HAVING COUNT(*) > 1
SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1
SELECT T1.Make FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T3.Car_Owner = "Buddy Arrington"
SELECT T1.Make FROM team AS T1 JOIN driver AS T2 ON T1.Team_ID = T2.Team_ID WHERE T2.Car_Owner = "Buddy Arrington"
SELECT max(Points), min(Points) FROM driver
SELECT max(Points), min(Points) FROM driver
SELECT count(*) FROM driver WHERE Points < 150
SELECT count(*) FROM driver WHERE points < 150
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Points DESC
SELECT Driver FROM driver ORDER BY Points DESC
SELECT T2.Driver, T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country
SELECT driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id
SELECT max(Points) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = "Dublin"
SELECT max(Points) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Capital = "Dublin")
SELECT avg(T1.Age) FROM driver AS T1 JOIN country AS T2 ON T1.Country = T2.Country_Id WHERE T2.Official_native_language = "English"
SELECT avg(t3.Age) FROM country AS t1 JOIN driver AS t2 ON t1.Country_Id = t2.Country JOIN team_driver AS t3 ON t2.Driver_ID = t3.Driver_ID WHERE t1.Official_native_language = "English"
SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points > 150
SELECT DISTINCT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points > 150
SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country GROUP BY T1.Capital ORDER BY sum(T2.Points) DESC LIMIT 1
SELECT Capital FROM country WHERE Country_Id IN (SELECT Country FROM driver ORDER BY Points DESC LIMIT 1)
SELECT Make, COUNT(*) FROM driver GROUP BY Make
SELECT Make, COUNT(*) FROM driver GROUP BY Make
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1
SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) >= 3
SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) >= 3
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = "Dodge" INTERSECT SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = "Chevrolet"
SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = "Dodge" INTERSECT SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = "Chevrolet"
SELECT sum(Points), avg(Points) FROM driver
SELECT sum(Points), avg(Points) FROM driver
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver)
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver)
SELECT T1.Manager, T1.Sponsor FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID ORDER BY count(*) DESC LIMIT 1
SELECT T1.Manager, T1.Sponsor FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID ORDER BY count(*) DESC LIMIT 1
SELECT T1.Manager, T1.Car_Owner FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID HAVING count(*) >= 2
SELECT T1.Manager, T1.Car_Owner FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID HAVING count(*) >= 2
SELECT count(*) FROM institution
SELECT count(*) FROM institution
SELECT Name FROM institution ORDER BY Name ASC
SELECT Name FROM institution ORDER BY Name ASC
SELECT Name FROM institution ORDER BY Founded
SELECT Name FROM institution ORDER BY Founded
SELECT City, Province FROM institution
SELECT City, Province FROM institution
SELECT max(enrollment), min(enrollment) FROM institution
SELECT max(Enrollment), min(Enrollment) FROM institution
SELECT Affiliation FROM institution WHERE City!= "Vancouver"
SELECT Affiliation FROM institution WHERE City!= "Vancouver"
SELECT Stadium FROM institution ORDER BY Capacity DESC
SELECT Stadium FROM institution ORDER BY Capacity DESC
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1
SELECT T1.Stadium FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Enrollment DESC LIMIT 1
SELECT Name, Nickname FROM institution
SELECT T1.Name, T2.Nickname FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID
SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Enrollment LIMIT 1)
SELECT Nickname FROM Championship ORDER BY Enrollment LIMIT 1
SELECT Name FROM institution ORDER BY Number_of_Championships DESC
SELECT Name FROM institution ORDER BY Number_of_Championships DESC
SELECT Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID GROUP BY institution.Institution_ID HAVING COUNT(*) >= 1
SELECT T1.Name FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T1.Institution_ID HAVING count(*) >= 1
SELECT sum(T1.Number_of_Championships) FROM Championship AS T1 JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Affiliation = 'Public'
SELECT sum(T1.Number_of_Championships) FROM Championship AS T1 JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Affiliation = "Public"
SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation
SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
SELECT Founded FROM institution GROUP BY Founded HAVING count(*) > 1
SELECT Founded_Year, COUNT(*) FROM institution GROUP BY Founded_Year HAVING COUNT(*) > 1
SELECT Nickname FROM Championship ORDER BY Capacity DESC
SELECT Nickname FROM institution ORDER BY Capacity DESC
SELECT sum(T1.Enrollment) FROM institution AS T1 WHERE T1.City = "Vancouver" OR T1.City = "Calgary"
SELECT Enrollment FROM institution WHERE City = "Vancouver" OR City = "Calgary"
SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950
SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950
SELECT count(DISTINCT Province) FROM institution
SELECT count(DISTINCT Province) FROM institution
SELECT * FROM Warehouses
SELECT * FROM Warehouses
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = "New York")
SELECT Contents FROM Boxes WHERE Value > 150
SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Value > 150
SELECT W.Code, AVG(B.Value) FROM Boxes AS B JOIN Warehouses AS W ON B.Warehouse = W.Code GROUP BY W.Code
SELECT avg(Value), Warehouse FROM Boxes GROUP BY Warehouse
SELECT avg(Value), sum(Value) FROM Boxes
SELECT avg(Value), sum(Value) FROM Boxes
SELECT avg(Capacity), sum(Capacity) FROM Warehouses
SELECT avg(Capacity), sum(Capacity) FROM Warehouses
SELECT Contents, AVG(Value) AS AverageValue, MAX(Value) AS MaxValue FROM Boxes GROUP BY Contents
SELECT T1.Contents, avg(T2.Value), max(T2.Value) FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T1.Contents
SELECT Contents, sum(Value) FROM Boxes GROUP BY Contents ORDER BY sum(Value) DESC LIMIT 1
SELECT Contents, Value FROM Boxes ORDER BY Value DESC LIMIT 1
SELECT avg(Value) FROM Boxes
SELECT avg(Value) FROM Boxes
SELECT DISTINCT Contents FROM Boxes
SELECT DISTINCT Contents FROM Boxes
SELECT count(DISTINCT Contents) FROM Boxes
SELECT count(DISTINCT Contents) FROM Boxes
SELECT DISTINCT Location FROM Warehouses
SELECT DISTINCT Location FROM Warehouses
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))
SELECT sum(T2.Value) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location = 'Chicago' OR T1.Location = 'New York'
SELECT SUM(Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'
SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))
SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = "Chicago") INTERSECT SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = "New York")
SELECT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York')
SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')
SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = "Rocks" EXCEPT SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = "Scissors"
SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks' EXCEPT SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Scissors'
SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents = 'Rocks' OR Boxes.Contents = 'Scissors'
SELECT DISTINCT Warehouse FROM Boxes WHERE Contents = "Rocks" OR Contents = "Scissors"
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors'))
SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = "Rocks" INTERSECT SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = "Scissors"
SELECT Code, Contents FROM Boxes ORDER BY Value DESC
SELECT Code, Contents FROM Boxes ORDER BY Value
SELECT Code, Contents FROM Boxes ORDER BY Value LIMIT 1
SELECT Code, Contents FROM Boxes ORDER BY Value LIMIT 1
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT avg(Value) FROM Boxes)
SELECT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes)
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC
SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')
SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = "Rocks")
SELECT Code, Contents FROM Boxes WHERE Value > (SELECT max(Value) FROM Boxes WHERE Contents = "Scissors")
SELECT T1.Code, T1.Contents FROM Boxes AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Code WHERE T1.Value > (SELECT max(Value) FROM Boxes WHERE Contents = "Scissors")
SELECT sum(Value) FROM Boxes JOIN Warehouses ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY Warehouses.Capacity DESC LIMIT 1
SELECT sum(Value) FROM Boxes JOIN Warehouses ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY Warehouses.Capacity DESC LIMIT 1
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150
SELECT avg(Value), Warehouse FROM Boxes GROUP BY Warehouse HAVING avg(Value) > 150
SELECT contents, sum(value), count(*) FROM Boxes GROUP BY contents
SELECT Contents, sum(Value), count(*) FROM Boxes GROUP BY Contents
SELECT sum(Capacity), avg(Capacity), max(Capacity) FROM Warehouses
SELECT Location, sum(Capacity), avg(Capacity), max(Capacity) FROM Warehouses GROUP BY Location
SELECT sum(Capacity) FROM Warehouses
SELECT sum(Capacity) FROM Warehouses
SELECT T1.Location, max(T2.Value) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location
SELECT Warehouses.Location, max(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location
SELECT T1.Code, COUNT(*) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT COUNT(*), Warehouse FROM Boxes GROUP BY Warehouse
SELECT count(DISTINCT Location) FROM Warehouses WHERE Capacity > 1000
SELECT count(distinct Warehouse) FROM Boxes WHERE Contents = 'Rocks'
SELECT Code, Location FROM Boxes JOIN Warehouses ON Warehouses.Code = Boxes.Warehouse
SELECT Code, Location FROM Warehouses UNION SELECT Code, Location FROM Boxes
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = "Chicago")
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = "Chicago")
SELECT COUNT(Code), Warehouse FROM Boxes GROUP BY Warehouse
SELECT count(*), Warehouse FROM Boxes GROUP BY Warehouse
SELECT W.Code, W.Location, W.Capacity, count(distinct B.Contents) as NumberOfContents FROM Warehouses W JOIN Boxes B on W.Code = B.Warehouse GROUP BY W.Code, W.Location, W.Capacity
SELECT Warehouse, COUNT(DISTINCT Contents) FROM Boxes GROUP BY Warehouse
SELECT Code FROM Warehouses WHERE Capacity < (SELECT SUM(Value) FROM Boxes WHERE Warehouse = Warehouses.Code)
SELECT Code FROM Warehouses WHERE Capacity < (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Warehouses.Code)
SELECT sum(T2.Value) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location <> "Chicago"
SELECT sum(T1.Value) FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location <> "Chicago"
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC
SELECT University_Name, City, State FROM university ORDER BY University_Name
SELECT count(*) FROM university WHERE State = "Illinois" OR State = "Ohio"
SELECT count(*) FROM university WHERE state IN ('Illinois', 'Ohio')
SELECT max(Enrollment), avg(Enrollment), min(Enrollment) FROM university
SELECT max(enrollment), avg(enrollment), min(enrollment) FROM university
SELECT T1.Team_Name FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Enrollment > (SELECT avg(Enrollment) FROM university)
SELECT T1.Team_Name FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Enrollment > (SELECT AVG(Enrollment) FROM university)
SELECT Home_conference FROM University
SELECT DISTINCT Home_Conference FROM university
SELECT Home_Conference, count(*) FROM university GROUP BY Home_Conference
SELECT Home_Conference, COUNT(*) FROM university GROUP BY Home_Conference
SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1
SELECT State, COUNT(*) FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Home_Conference FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID GROUP BY T1.Home_Conference HAVING avg(T1.Enrollment) > 2000
SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING avg(Enrollment) > 2000
SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY count(*) ASC LIMIT 1
SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY COUNT(*) DESC LIMIT 1
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code
SELECT T1.Major_Name, T2.Rank FROM major AS T1 JOIN major_ranking AS T2 ON T1.Major_ID = T2.Major_ID WHERE T2.University_ID = (SELECT University_ID FROM university WHERE University_Name = "Augustana College")
SELECT T1.Rank, T1.University_Name, T2.Major_Name FROM overall_ranking AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.University_Name = 'Augustana College'
SELECT University_Name, City, State FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE major.Major_Name = "Accounting" AND major_ranking.Rank = 1
SELECT University_Name, City, State FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID JOIN major_ranking AS T3 ON T1.University_ID = T3.University_ID WHERE T3.Rank = 1 AND T3.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting')
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 GROUP BY T1.University_Name ORDER BY count(*) DESC LIMIT 1
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 GROUP BY T1.University_Name ORDER BY count(*) DESC LIMIT 1
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = "Accounting")) INTERSECT SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = "Urban Education"))
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting')) INTERSECT SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education'))
SELECT T1.University_Name, T1.Rank FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State = "Wisconsin"
SELECT University_Name, Rank FROM university WHERE State = 'Wisconsin'
SELECT University_Name FROM university ORDER BY Research_point DESC LIMIT 1
SELECT University_Name FROM university ORDER BY Research_point DESC LIMIT 1
SELECT University_Name FROM university ORDER BY Reputation_point ASC
SELECT University_Name FROM university ORDER BY Reputation_point ASC
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank >= 3 AND Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting'))
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank >= 3 AND Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting'))
SELECT sum(enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)
SELECT sum(T1.Enrollment) FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank <= 5
SELECT T1.University_Name, T1.Citation_point FROM overall_ranking AS T1 JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Reputation_point > 3 ORDER BY T1.Citation_point DESC
SELECT University_Name, Citation_point FROM university ORDER BY Reputation_point DESC LIMIT 3
SELECT T1.State FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Enrollment < 3000 GROUP BY T1.State HAVING count(*) > 2
SELECT T1.State FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Enrollment < 3000 GROUP BY T1.State HAVING count(*) > 2
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)
SELECT Title FROM Movies WHERE Rating = 'G'
SELECT Title FROM Movies WHERE Rating = 'G'
SELECT Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Odeon'
SELECT Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Odeon'
SELECT T1.Title, T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie
SELECT M.Title,MT.Name FROM Movies AS M JOIN MovieTheaters AS MT ON M.Code = MT.Movie
SELECT count(*) FROM Movies WHERE Rating = "G"
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'
SELECT count(*) FROM Movies
SELECT COUNT(*) FROM MovieTheaters
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters
SELECT COUNT(DISTINCT Title) FROM Movies
SELECT count(DISTINCT Code) FROM MovieTheaters
SELECT count(DISTINCT Code) FROM MovieTheaters
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG'))
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG')
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'cinema Odeon' OR Name = 'Imperial')
SELECT Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Odeon' OR T2.Name = 'Imperial'
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' INTERSECT SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Odeon' INTERSECT SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Imperial'
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')
SELECT Title FROM Movies ORDER BY Title ASC
SELECT Title FROM Movies ORDER BY Title
SELECT Title FROM Movies ORDER BY Rating
SELECT Title FROM Movies ORDER BY Rating
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie GROUP BY T1.Title ORDER BY count(*) DESC LIMIT 1
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie GROUP BY T1.Title ORDER BY count(*) DESC LIMIT 1
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating
SELECT T1.Rating, count(*) FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie GROUP BY T1.Rating
SELECT count(*) FROM Movies WHERE Rating IS NOT NULL
SELECT count(*) FROM Movies WHERE Rating!= "null"
SELECT Name FROM MovieTheaters
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL
SELECT Name FROM MovieTheaters WHERE Code NOT IN (SELECT Movie FROM Movies)
SELECT Name FROM MovieTheaters WHERE Movie IS NULL
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')
SELECT Title FROM Movies
SELECT Title FROM Movies
SELECT DISTINCT Rating FROM Movies
SELECT DISTINCT Rating FROM Movies
SELECT * FROM Movies WHERE Rating IS NULL
SELECT * FROM Movies WHERE Rating IS NULL
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)
SELECT Package.Recipient, Package.Weight FROM Package ORDER BY Package.Weight DESC LIMIT 1
SELECT T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient ORDER BY T2.Weight DESC LIMIT 1
SELECT sum(Weight) FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'Leo Wong'
SELECT sum(T1.Weight) FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = "Leo Wong"
SELECT Position FROM Employee WHERE Name = "Amy Wong"
SELECT Position FROM Employee WHERE Name = "Amy Wong"
SELECT Salary, Position FROM Employee WHERE Name = "Turanga Leela"
SELECT Salary, Position FROM Employee WHERE Name = "Turanga Leela"
SELECT avg(Salary) FROM Employee WHERE Position = "intern"
SELECT avg(Salary) FROM Employee WHERE Position = "Intern"
SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Name = "Physician")
SELECT Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.Position = "Physician"
SELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = "Leo Wong")
SELECT count(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = "Leo Wong")
SELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = "Leo Wong")
SELECT T1.PackageNumber FROM Package AS T1 JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber WHERE T2.Name = "Leo Wong"
SELECT PackageNumber, Contents, Weight, Date FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = "Leo Wong") OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = "Leo Wong")
SELECT DISTINCT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = "Leo Wong") OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = "Leo Wong")
SELECT count(*) FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber WHERE T2.Name = 'Ogden Wernstrom' AND T3.Name = 'Leo Wong'
SELECT count(*) FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber WHERE T2.Name = "Ogden Wernstrom" AND T3.Name = "Leo Wong"
SELECT T1.Contents FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = "John Zoidfarb"
SELECT T3.Contents FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber WHERE T2.Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'John Zoidfarb')
SELECT PackageNumber, Weight FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name LIKE '%John%' ORDER BY Weight DESC LIMIT 1
SELECT PackageNumber, Weight FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name LIKE "%John%" ORDER BY Weight DESC LIMIT 1
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3
SELECT T1.Name, COUNT(*) FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name ORDER BY count(*) DESC
SELECT T1.Name, count(*) FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1
SELECT T1.Name, COUNT(*) FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T1.Name ORDER BY COUNT(*) ASC
SELECT min(count(*)), T1.Name FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID GROUP BY T1.Name
SELECT T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name HAVING COUNT(*) > 1
SELECT T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.AccountNumber HAVING COUNT(*) > 1
SELECT Coordinates FROM Planet WHERE Name = 'Mars'
SELECT Coordinates FROM Planet WHERE Name = "Mars"
SELECT Name, Coordinates FROM Planet ORDER BY Name
SELECT Name, Coordinates FROM Planet ORDER BY Name
SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Has_Clearance AS T2 ON T1.Manager = T2.Employee WHERE T2.Level = "Phillip J. Fry"
SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Has_Clearance AS T2 ON T1.Manager = T2.Employee WHERE T2.Level = 'Manager' AND T2.Planet = 'Earth' AND T1.Date >= '2018-01-01' AND T1.Date <= '2018-12-31'
SELECT Date FROM Shipment
SELECT Date FROM Shipment
SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name = 'Mars'
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = "Mars")
SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = "Turanga Leela" INTERSECT SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name = "Mars"
SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = "Turanga Leela" AND T1.Planet = (SELECT PlanetID FROM Planet WHERE Name = "Mars")
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = "Mars") OR Manager = (SELECT EmployeeID FROM Employee WHERE Name = "Turanga Leela")
SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Has_Clearance AS T2 ON T1.Manager = T2.Employee WHERE T2.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND T2.Level = 1 AND T1.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND T1.Date > '2017-06-19 02:59:21' /* Answer the following: What are the ids and names of all clients who have sent packages to Earth? */ SELECT T1.AccountNumber, T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T2.Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Earth') /* Answer the following: What is the name of the employee who manages the shipment with id 1? */ SELECT T1.Name FROM Employee AS T1 JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager WHERE T2.ShipmentID = 1 /* Answer the following: What is the name
SELECT T1.Name, count(*) FROM Planet AS T1 JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.Name
SELECT T1.Name, COUNT(*) FROM Planet AS T1 JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.Name
SELECT Name FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Name FROM Planet AS T1 JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1
SELECT T1.Name, COUNT(*) FROM Employee AS T1 JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager GROUP BY T1.Name
SELECT COUNT(*), T1.Name FROM Employee AS T1 JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager GROUP BY T1.Name
SELECT sum(Weight) FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = 'Mars'
SELECT sum(T1.Weight) FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = "Mars"
SELECT sum(Weight), T1.Name FROM Planet AS T1 JOIN Package AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.Name
SELECT sum(Weight), T2.Name FROM Package AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T2.Name
SELECT T1.Name FROM Planet AS T1 JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment GROUP BY T1.Name HAVING SUM(T3.Weight) > 30
SELECT T1.Name FROM Planet AS T1 JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment GROUP BY T1.PlanetID HAVING sum(T3.Weight) > 30
SELECT PackageNumber FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID JOIN Client AS T4 ON T1.Sender = T4.AccountNumber WHERE T3.Name = "Omicron Persei 8" AND T4.Name = "Zapp Brannigan"
SELECT count(*) FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID WHERE T2.Manager = (SELECT EmployeeID FROM Employee WHERE Name = "Zapp Brannigan") AND T2.Planet = (SELECT PlanetID FROM Planet WHERE Name = "Omicron Persei 8")
SELECT T1.PackageNumber FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = "Omicron Persei 8" OR T2.Manager = (SELECT EmployeeID FROM Employee WHERE Name = "Zapp Brannigan")
SELECT count(*) FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID WHERE T2.Planet = "Omicron Persei 8" SELECT count(*) FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = "Zapp Brannigan"
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30
SELECT Name FROM Employee EXCEPT SELECT T1.Name FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T2.Planet = 'Mars'
SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))
SELECT T1.Name FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T2.Planet = "Omega III" AND T2.Level = "III"
SELECT T1.Name FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T2.Planet = 'Omega III' AND T2.Level = 3
SELECT T1.Name FROM Planet AS T1 JOIN Has_Clearance AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.Name HAVING COUNT(*) = 1
SELECT T1.Name FROM Planet AS T1 JOIN Has_Clearance AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.Name HAVING count(*) = 1
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000
SELECT count(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = "Mars"))
SELECT count(*) FROM Employee WHERE NOT EXISTS (SELECT * FROM Has_Clearance WHERE EmployeeID = Employee.EmployeeID AND PlanetID = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))
SELECT count(*) FROM game
SELECT count(*) FROM game
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC
SELECT avg(Units_sold_Millions) FROM game WHERE Developers NOT IN (SELECT Developers FROM game WHERE Developers = "Nintendo")
SELECT avg(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%'
SELECT Platform_name, Market_district FROM platform
SELECT Platform_name, Market_district FROM platform
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1
SELECT max(Rank_of_the_year), min(Rank_of_the_year) FROM player
SELECT max(Rank_of_the_year), min(Rank_of_the_year) FROM Player
SELECT count(*) FROM player WHERE Rank_of_the_year < 3
SELECT count(*) FROM player WHERE Rank_of_the_year <= 3
SELECT Player_name FROM player ORDER BY Player_name ASC
SELECT Player_name FROM player ORDER BY Player_name
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC
SELECT T1.Player_name, T1.Rank_of_the_year FROM player AS T1 JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID JOIN game AS T3 ON T2.Game_ID = T3.Game_ID WHERE T3.Title = "Super Mario World"
SELECT T1.Player_name, T1.Rank_of_the_year FROM player AS T1 JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID JOIN game AS T3 ON T2.Game_ID = T3.Game_ID WHERE T3.Title = "Super Mario World"
SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = "Auburn"
SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = "Auburn"
SELECT avg(T1.Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.Position = "Guard"
SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.Position = "Guard"
SELECT T1.Title, T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID
SELECT Title, Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID
SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T2.Market_district = "Asia" OR T2.Market_district = "USA"
SELECT T2.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T2.Market_district = "Asia" OR T2.Market_district = "USA"
SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise
SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
SELECT Player_name FROM player EXCEPT SELECT T1.Player_name FROM player AS T1 JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID
SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = "Oklahoma" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = "Auburn"
SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = "Oklahoma" OR T3.College = "Auburn"
SELECT DISTINCT Franchise FROM game
SELECT DISTINCT Franchise FROM game
SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.Position = 'Guard' INTERSECT SELECT T1.Title FROM game AS T1 EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.Position = 'Guard'
SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))
SELECT Name FROM press ORDER BY Year_Profits_billion DESC
SELECT Name FROM press ORDER BY Year_Profits_billion DESC
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1
SELECT avg(Year_Profits_billion), max(Year_Profits_billion) FROM press
SELECT Press_ID, avg(Year_Profits_billion) as avg_yearly_profit, max(Year_Profits_billion) as max_yearly_profit FROM press GROUP BY Press_ID
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1 SELECT Name FROM press ORDER BY Month_Profits_billion ASC LIMIT 1
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1 SELECT Name FROM press ORDER BY Month_Profits_billion ASC LIMIT 1
SELECT count(*) FROM author WHERE Age < 30
SELECT count(*) FROM author WHERE Age < 30
SELECT avg(Age), Gender FROM author GROUP BY Gender
SELECT T1.Gender, avg(T1.Age) FROM author AS T1 GROUP BY T1.Gender
SELECT count(*), gender FROM author WHERE age > 30 GROUP BY gender
SELECT Gender, COUNT(*) FROM author WHERE Age > 30 GROUP BY Gender
SELECT Title FROM book ORDER BY Release_date DESC
SELECT Title FROM book ORDER BY Release_date DESC
SELECT Book_Series, count(*) FROM book GROUP BY Book_Series
SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5
SELECT T1.Title, T1.Release_date FROM book AS T1 ORDER BY T1.Sale_Amount DESC LIMIT 5
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount < 500
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount < 500
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = "MM" INTERSECT SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = "LT"
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = 'MM' INTERSECT SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = 'LT'
SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Name HAVING count(*) > 1
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Name HAVING COUNT(*) > 1
SELECT T1.Title, T2.Name, T3.Name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.Author_ID JOIN press AS T3 ON T1.Press_ID = T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 3
SELECT T1.Title, T2.Name, T3.Name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.Author_ID JOIN press AS T3 ON T1.Press_ID = T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 3
SELECT T1.Name, SUM(T2.Sale_Amount) FROM press AS T1 JOIN book AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Name
SELECT T1.Name, SUM(T2.Sale_Amount) FROM press AS T1 JOIN book AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Name
SELECT COUNT(*), T2.Name FROM book AS T1 JOIN press AS T2 ON T1.Press_ID = T2.Press_ID WHERE T1.Sale_Amount > 1000 GROUP BY T2.Name
SELECT T1.Name, count(*) FROM press AS T1 JOIN book AS T2 ON T1.Press_ID = T2.Press_ID WHERE T2.Sale_Amount > 1000 GROUP BY T1.Name
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T2.Sale_Amount DESC LIMIT 1
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T2.Sale_Amount DESC LIMIT 1
SELECT T1.Name, T1.Gender FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Name, T1.Gender ORDER BY count(*) DESC LIMIT 1
SELECT T1.Name, T1.Gender FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Name, T1.Gender ORDER BY count(*) DESC LIMIT 1
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = "Accor"))
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID = (SELECT Press_ID FROM press WHERE Name = "Accor"))
SELECT T1.Name, T1.Year_Profits_billion FROM press AS T1 JOIN book AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Press_ID HAVING count(*) > 2
SELECT T1.Name, T1.Year_Profits_billion FROM press AS T1 JOIN book AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Press_ID HAVING COUNT(*) > 2
SELECT count(*) FROM Authors
SELECT author_name FROM Authors
SELECT author_name, other_details FROM Authors
SELECT other_details FROM Authors WHERE author_name = "Addison Denesik"
SELECT count(*) FROM Documents
SELECT T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name = T2.author_name WHERE T2.document_id = 4
SELECT author_name FROM Documents WHERE document_name = "Travel to Brazil"
SELECT count(*) FROM Documents WHERE author_name = "Era Kerluke"
SELECT document_name, document_description FROM Documents
SELECT document_id, document_name FROM Documents WHERE author_name = "Bianka Cummings"
SELECT T1.author_name, T1.other_details FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name = T2.author_name WHERE T2.document_name = "Travel to China"
SELECT author_name, count(*) FROM Documents GROUP BY author_name
SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1
SELECT T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name = T2.author_name GROUP BY T1.author_name HAVING COUNT(*) >= 2
SELECT count(*) FROM Business_Processes
SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9
SELECT T1.process_name FROM Business_Processes AS T1 JOIN Documents_Processes AS T2 ON T1.process_id = T2.process_id WHERE T2.document_id = 9 AND T2.next_process_id IS NOT NULL
SELECT count(*) FROM Process_Outcomes
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes
SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = "working"
SELECT count(*) FROM Process_Status
SELECT process_status_code, process_status_description FROM Process_Status
SELECT process_status_description FROM Process_Status WHERE process_status_code = "ct"
SELECT count(*) FROM Staff
SELECT staff_id, staff_details FROM Staff
SELECT staff_details FROM Staff WHERE staff_id = 100
SELECT count(*) FROM Ref_Staff_Roles
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles
SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = "HR"
SELECT count(*) FROM Documents
SELECT process_id FROM Documents_Processes
SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_Processes
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes)
SELECT T1.process_outcome_description, T1.process_status_description FROM Documents_Processes AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_id = 0
SELECT T1.process_name FROM Business_Processes AS T1 JOIN Documents_Processes AS T2 ON T1.process_id = T2.process_id JOIN Documents AS T3 ON T2.document_id = T3.document_id WHERE T3.document_name = "Travel to Brazil"
SELECT process_id, count(*) FROM Documents_Processes GROUP BY process_id
SELECT count(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9
SELECT staff_id, count(*) FROM Documents_Processes GROUP BY staff_id
SELECT staff_role_code, count(*) FROM Staff_in_Processes GROUP BY staff_role_code
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3
SELECT count(*) FROM Agencies
SELECT count(*) FROM Agencies
SELECT agency_id, agency_details FROM Agencies
SELECT agency_id, agency_details FROM Agencies
SELECT count(*) FROM Clients
SELECT count(*) FROM Clients
SELECT client_id, client_details FROM Clients
SELECT client_id, client_details FROM Clients
SELECT agency_id, count(*) FROM Clients GROUP BY agency_id
SELECT agency_id, COUNT(*) FROM Clients GROUP BY agency_id
SELECT agency_id, agency_details FROM Agencies GROUP BY agency_id ORDER BY count(*) DESC LIMIT 1
SELECT agency_id, agency_details FROM Agencies GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT agency_id, agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY agency_id HAVING count(*) >= 2
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) >= 2)
SELECT agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.client_details = "Mac"
SELECT T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.client_details = "Mac"
SELECT T1.client_id, T1.sic_code, T1.client_details, T2.staff_id, T2.agency_id, T2.staff_details FROM Clients AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id
SELECT C.client_details, A.agency_details FROM Clients AS C JOIN Agencies AS A ON C.agency_id = A.agency_id
SELECT T1.sic_code, COUNT(*) FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.sic_code
SELECT T1.sic_code, count(*) FROM Clients AS T1 GROUP BY T1.sic_code
SELECT client_id, client_details FROM Clients WHERE sic_code = "Bad"
SELECT client_details FROM Clients WHERE sic_code = "Bad"
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients)
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients)
SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients
SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients
SELECT count(*) FROM Invoices
SELECT count(*) FROM Invoices
SELECT invoice_id, invoice_status, invoice_details FROM Invoices
SELECT invoice_id, invoice_status, invoice_details FROM Invoices
SELECT client_id, count(*) FROM Invoices GROUP BY client_id
SELECT client_id, count(*) FROM Invoices GROUP BY client_id
SELECT client_id, client_details FROM Clients GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT client_id, client_details FROM Clients ORDER BY count(*) DESC LIMIT 1
SELECT client_id FROM Clients GROUP BY client_id HAVING count(*) >= 2
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2
SELECT invoice_status, count(*) FROM Invoices GROUP BY invoice_status
SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status
SELECT invoice_status FROM GROUP BY ORDER BY LIMIT 1
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.invoice_status, T1.invoice_details, T2.client_id, T2.client_details, T2.agency_id, T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id JOIN Agencies AS T3 ON T2.agency_id = T3.agency_id
SELECT T1.invoice_status, T1.invoice_details, T2.client_id, T2.client_details, T2.agency_id, T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id JOIN Agencies AS T3 ON T2.agency_id = T3.agency_id
SELECT meeting_type_code, meeting_type_details FROM Ref_Meeting_Types
SELECT meeting_type, other_details FROM Meetings
SELECT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working')
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = "Working")
SELECT invoice_id, invoice_status FROM Invoices EXCEPT SELECT invoice_id, invoice_status FROM Payments
SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments)
SELECT count(*) FROM Payments
SELECT count(*) FROM Payments
SELECT payment_id, invoice_id, payment_details FROM Payments
SELECT T1.payment_id, T1.invoice_id, T1.payment_details FROM Payments AS T1
SELECT invoice_id, invoice_status FROM Payments
SELECT DISTINCT invoice_id, invoice_status FROM Payments
SELECT invoice_id, count(*) FROM Payments GROUP BY invoice_id
SELECT invoice_id, count(*) FROM Payments GROUP BY invoice_id
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT count(*) FROM Staff
SELECT count(*) FROM Staff
SELECT T1.agency_id, count(*) FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id
SELECT agency_id, COUNT(*) FROM Staff GROUP BY agency_id
SELECT agency_id, agency_details FROM Agencies ORDER BY count(*) DESC LIMIT 1
SELECT agency_id, agency_details FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1
SELECT meeting_outcome, count(*) FROM Meetings GROUP BY meeting_outcome
SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome
SELECT client_id, COUNT(*) FROM Meetings GROUP BY client_id
SELECT client_id, count(*) FROM Meetings GROUP BY client_id
SELECT meeting_type, COUNT(*) FROM Meetings GROUP BY meeting_type
SELECT meeting_type, count(*) FROM Meetings GROUP BY meeting_type
SELECT T1.meeting_id, T1.meeting_outcome, T1.meeting_type, T2.client_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id
SELECT T1.meeting_id, T1.meeting_outcome, T1.meeting_type, T2.client_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id
SELECT meeting_id, count(*) FROM Staff_in_Meetings GROUP BY meeting_id
SELECT meeting_id, COUNT(*) FROM Staff_in_Meetings GROUP BY meeting_id
SELECT T1.staff_id, COUNT(*) FROM Staff_in_Meetings AS T1 GROUP BY T1.staff_id ORDER BY COUNT(*) ASC LIMIT 1
SELECT T1.staff_id FROM Staff_in_Meetings AS T1 GROUP BY T1.staff_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT count(*) FROM Staff_in_Meetings
SELECT COUNT(DISTINCT T1.staff_id) FROM Staff_in_Meetings AS T1 JOIN Meetings AS T2 ON T1.meeting_id = T2.meeting_id
SELECT count(*) FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM staff_in_meetings)
SELECT count(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)
SELECT T1.client_id, T1.client_details FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id = T2.client_id UNION SELECT T1.client_id, T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id = T2.client_id
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices)
SELECT T1.staff_id, T1.staff_details FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id HAVING COUNT(*) >= 1 AND T1.staff_details LIKE '%s%'
SELECT staff_id, staff_details FROM Staff WHERE staff_details LIKE '%s%' AND staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) >= 1)
SELECT client_id, sic_code, agency_id FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id = T2.client_id WHERE T2.meeting_id IN (SELECT meeting_id FROM Meetings WHERE client_id = T1.client_id) AND client_id IN (SELECT client_id FROM Invoices)
SELECT T1.client_id, T1.sic_code, T1.agency_id FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id = T2.client_id JOIN Invoices AS T3 ON T1.client_id = T3.client_id GROUP BY T1.client_id HAVING COUNT(T2.meeting_id) = 1 AND COUNT(T3.invoice_id) = 1
SELECT T1.start_date_time, T1.end_date_time, T2.client_details, T3.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id JOIN Staff_in_Meetings AS T3 ON T1.meeting_id = T3.meeting_id JOIN Staff AS T4 ON T3.staff_id = T4.staff_id
SELECT T1.start_date_time, T1.end_date_time, T2.client_details, T3.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id = T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id = T3.meeting_id JOIN staff AS T4 ON T3.staff_id = T4.staff_id